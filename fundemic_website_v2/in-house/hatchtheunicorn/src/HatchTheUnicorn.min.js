//Mejdu FrameWork powered by PIXI
/*!
 SoundJS
 Visit http://createjs.com/ for documentation, updates and examples.

 Copyright (c) 2010 gskinner.com, inc.

 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software and associated documentation
 files (the "Software"), to deal in the Software without
 restriction, including without limitation the rights to use,
 copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following
 conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
*/
this.createjs = this.createjs || {};
(function() {
    var s = createjs.SoundJS = createjs.SoundJS || {};
    s.version = "NEXT";
    s.buildDate = "Thu, 11 Dec 2014 23:16:15 GMT";
})();
this.createjs = this.createjs || {};
createjs.extend = function(subclass, superclass) {
    "use strict";

    function o() {
        this.constructor = subclass;
    }
    o.prototype = superclass.prototype;
    return (subclass.prototype = new o());
};
this.createjs = this.createjs || {};
createjs.promote = function(subclass, prefix) {
    "use strict";
    var subP = subclass.prototype,
        supP = (Object.getPrototypeOf && Object.getPrototypeOf(subP)) || subP.__proto__;
    if (supP) {
        subP[(prefix += "_") + "constructor"] = supP.constructor;
        for (var n in supP) {
            if (subP.hasOwnProperty(n) && (typeof supP[n] == "function")) {
                subP[prefix + n] = supP[n];
            }
        }
    }
    return subclass;
};
this.createjs = this.createjs || {};
createjs.indexOf = function(array, searchElement) {
    "use strict";
    for (var i = 0, l = array.length; i < l; i++) {
        if (searchElement === array[i]) {
            return i;
        }
    }
    return -1;
};
this.createjs = this.createjs || {};
(function() {
    "use strict";
    createjs.proxy = function(method, scope) {
        var aArgs = Array.prototype.slice.call(arguments, 2);
        return function() {
            return method.apply(scope, Array.prototype.slice.call(arguments, 0).concat(aArgs));
        };
    }
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";
    var t = Object.defineProperty ? true : false;
    var foo = {};
    try {
        Object.defineProperty(foo, "bar", {
            get: function() {
                return this._bar;
            },
            set: function(value) {
                this._bar = value;
            }
        });
    } catch (e) {
        t = false;
    }
    createjs.definePropertySupported = t;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function BrowserDetect() {
        throw "BrowserDetect cannot be instantiated";
    };
    var agent = BrowserDetect.agent = window.navigator.userAgent;
    BrowserDetect.isWindowPhone = (agent.indexOf("IEMobile") > -1) || (agent.indexOf("Windows Phone") > -1);
    BrowserDetect.isFirefox = (agent.indexOf("Firefox") > -1);
    BrowserDetect.isOpera = (window.opera != null);
    BrowserDetect.isChrome = (agent.indexOf("Chrome") > -1);
    BrowserDetect.isIOS = (agent.indexOf("iPod") > -1 || agent.indexOf("iPhone") > -1 || agent.indexOf("iPad") > -1) && !BrowserDetect.isWindowPhone;
    BrowserDetect.isAndroid = (agent.indexOf("Android") > -1) && !BrowserDetect.isWindowPhone;
    BrowserDetect.isBlackberry = (agent.indexOf("Blackberry") > -1);
    createjs.BrowserDetect = BrowserDetect;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function EventDispatcher() {
        this._listeners = null;
        this._captureListeners = null;
    }
    var p = EventDispatcher.prototype;
    EventDispatcher.initialize = function(target) {
        target.addEventListener = p.addEventListener;
        target.on = p.on;
        target.removeEventListener = target.off = p.removeEventListener;
        target.removeAllEventListeners = p.removeAllEventListeners;
        target.hasEventListener = p.hasEventListener;
        target.dispatchEvent = p.dispatchEvent;
        target._dispatchEvent = p._dispatchEvent;
        target.willTrigger = p.willTrigger;
    };
    p.addEventListener = function(type, listener, useCapture) {
        var listeners;
        if (useCapture) {
            listeners = this._captureListeners = this._captureListeners || {};
        } else {
            listeners = this._listeners = this._listeners || {};
        }
        var arr = listeners[type];
        if (arr) {
            this.removeEventListener(type, listener, useCapture);
        }
        arr = listeners[type];
        if (!arr) {
            listeners[type] = [listener];
        } else {
            arr.push(listener);
        }
        return listener;
    };
    p.on = function(type, listener, scope, once, data, useCapture) {
        if (listener.handleEvent) {
            scope = scope || listener;
            listener = listener.handleEvent;
        }
        scope = scope || this;
        return this.addEventListener(type, function(evt) {
            listener.call(scope, evt, data);
            once && evt.remove();
        }, useCapture);
    };
    p.removeEventListener = function(type, listener, useCapture) {
        var listeners = useCapture ? this._captureListeners : this._listeners;
        if (!listeners) {
            return;
        }
        var arr = listeners[type];
        if (!arr) {
            return;
        }
        for (var i = 0, l = arr.length; i < l; i++) {
            if (arr[i] == listener) {
                if (l == 1) {
                    delete(listeners[type]);
                } else {
                    arr.splice(i, 1);
                }
                break;
            }
        }
    };
    p.off = p.removeEventListener;
    p.removeAllEventListeners = function(type) {
        if (!type) {
            this._listeners = this._captureListeners = null;
        } else {
            if (this._listeners) {
                delete(this._listeners[type]);
            }
            if (this._captureListeners) {
                delete(this._captureListeners[type]);
            }
        }
    };
    p.dispatchEvent = function(eventObj) {
        if (typeof eventObj == "string") {
            var listeners = this._listeners;
            if (!listeners || !listeners[eventObj]) {
                return false;
            }
            eventObj = new createjs.Event(eventObj);
        } else if (eventObj.target && eventObj.clone) {
            eventObj = eventObj.clone();
        }
        try {
            eventObj.target = this;
        } catch (e) {}
        if (!eventObj.bubbles || !this.parent) {
            this._dispatchEvent(eventObj, 2);
        } else {
            var top = this,
                list = [top];
            while (top.parent) {
                list.push(top = top.parent);
            }
            var i, l = list.length;
            for (i = l - 1; i >= 0 && !eventObj.propagationStopped; i--) {
                list[i]._dispatchEvent(eventObj, 1 + (i == 0));
            }
            for (i = 1; i < l && !eventObj.propagationStopped; i++) {
                list[i]._dispatchEvent(eventObj, 3);
            }
        }
        return eventObj.defaultPrevented;
    };
    p.hasEventListener = function(type) {
        var listeners = this._listeners,
            captureListeners = this._captureListeners;
        return !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));
    };
    p.willTrigger = function(type) {
        var o = this;
        while (o) {
            if (o.hasEventListener(type)) {
                return true;
            }
            o = o.parent;
        }
        return false;
    };
    p.toString = function() {
        return "[EventDispatcher]";
    };
    p._dispatchEvent = function(eventObj, eventPhase) {
        var l, listeners = (eventPhase == 1) ? this._captureListeners : this._listeners;
        if (eventObj && listeners) {
            var arr = listeners[eventObj.type];
            if (!arr || !(l = arr.length)) {
                return;
            }
            try {
                eventObj.currentTarget = this;
            } catch (e) {}
            try {
                eventObj.eventPhase = eventPhase;
            } catch (e) {}
            eventObj.removed = false;
            arr = arr.slice();
            for (var i = 0; i < l && !eventObj.immediatePropagationStopped; i++) {
                var o = arr[i];
                if (o.handleEvent) {
                    o.handleEvent(eventObj);
                } else {
                    o(eventObj);
                }
                if (eventObj.removed) {
                    this.off(eventObj.type, o, eventPhase == 1);
                    eventObj.removed = false;
                }
            }
        }
    };
    createjs.EventDispatcher = EventDispatcher;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function Event(type, bubbles, cancelable) {
        this.type = type;
        this.target = null;
        this.currentTarget = null;
        this.eventPhase = 0;
        this.bubbles = !!bubbles;
        this.cancelable = !!cancelable;
        this.timeStamp = (new Date()).getTime();
        this.defaultPrevented = false;
        this.propagationStopped = false;
        this.immediatePropagationStopped = false;
        this.removed = false;
    }
    var p = Event.prototype;
    p.preventDefault = function() {
        this.defaultPrevented = this.cancelable && true;
    };
    p.stopPropagation = function() {
        this.propagationStopped = true;
    };
    p.stopImmediatePropagation = function() {
        this.immediatePropagationStopped = this.propagationStopped = true;
    };
    p.remove = function() {
        this.removed = true;
    };
    p.clone = function() {
        return new Event(this.type, this.bubbles, this.cancelable);
    };
    p.set = function(props) {
        for (var n in props) {
            this[n] = props[n];
        }
        return this;
    };
    p.toString = function() {
        return "[Event (type=" + this.type + ")]";
    };
    createjs.Event = Event;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function ErrorEvent(title, message, data) {
        this.Event_constructor("error");
        this.title = title;
        this.message = message;
        this.data = data;
    }
    var p = createjs.extend(ErrorEvent, createjs.Event);
    p.clone = function() {
        return new createjs.ErrorEvent(this.title, this.message, this.data);
    };
    createjs.ErrorEvent = createjs.promote(ErrorEvent, "Event");
}());
this.createjs = this.createjs || {};
(function(scope) {
    "use strict";

    function ProgressEvent(loaded, total) {
        this.Event_constructor("progress");
        this.loaded = loaded;
        this.total = (total == null) ? 1 : total;
        this.progress = (total == 0) ? 0 : this.loaded / this.total;
    };
    var p = createjs.extend(ProgressEvent, createjs.Event);
    p.clone = function() {
        return new createjs.ProgressEvent(this.loaded, this.total);
    };
    createjs.ProgressEvent = createjs.promote(ProgressEvent, "Event");
}(window));
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function LoadItem() {
        this.src = null;
        this.type = null;
        this.id = null;
        this.maintainOrder = false;
        this.callback = null;
        this.data = null;
        this.method = createjs.LoadItem.GET;
        this.values = null;
        this.headers = null;
        this.withCredentials = false;
        this.mimeType = null;
        this.crossOrigin = "Anonymous";
        this.loadTimeout = 8000;
    };
    var p = LoadItem.prototype = {};
    var s = LoadItem;
    s.create = function(value) {
        if (typeof value == "string") {
            var item = new LoadItem();
            item.src = value;
            return item;
        } else if (value instanceof s) {
            return value;
        } else if (value instanceof Object) {
            return value;
        } else {
            throw new Error("Type not recognized.");
        }
    };
    p.set = function(props) {
        for (var n in props) {
            this[n] = props[n];
        }
        return this;
    };
    createjs.LoadItem = s;
}());
(function() {
    var s = {};
    s.ABSOLUTE_PATT = /^(?:\w+:)?\/{2}/i;
    s.RELATIVE_PATT = '';
    s.EXTENSION_PATT = /\/?[^/]+\.(\w{1,5})$/i;
    s.parseURI = function(path) {
        var info = {
            absolute: false,
            relative: false
        };
        if (path == null) {
            return info;
        }
        var queryIndex = path.indexOf("?");
        if (queryIndex > -1) {
            path = path.substr(0, queryIndex);
        }
        var match;
        if (s.ABSOLUTE_PATT.test(path)) {
            info.absolute = true;
        } else if (s.RELATIVE_PATT.test(path)) {
            info.relative = true;
        }
        if (match = path.match(s.EXTENSION_PATT)) {
            info.extension = match[1].toLowerCase();
        }
        return info;
    };
    s.formatQueryString = function(data, query) {
        if (data == null) {
            throw new Error('You must specify data.');
        }
        var params = [];
        for (var n in data) {
            params.push(n + '=' + escape(data[n]));
        }
        if (query) {
            params = params.concat(query);
        }
        return params.join('&');
    };
    s.buildPath = function(src, data) {
        if (data == null) {
            return src;
        }
        var query = [];
        var idx = src.indexOf('?');
        if (idx != -1) {
            var q = src.slice(idx + 1);
            query = query.concat(q.split('&'));
        }
        if (idx != -1) {
            return src.slice(0, idx) + '?' + this._formatQueryString(data, query);
        } else {
            return src + '?' + this._formatQueryString(data, query);
        }
    };
    s.isCrossDomain = function(item) {
        var target = document.createElement("a");
        target.href = item.src;
        var host = document.createElement("a");
        host.href = location.href;
        var crossdomain = (target.hostname != "") && (target.port != host.port || target.protocol != host.protocol || target.hostname != host.hostname);
        return crossdomain;
    };
    s.isLocal = function(item) {
        var target = document.createElement("a");
        target.href = item.src;
        return target.hostname == "" && target.protocol == "file:";
    };
    s.isBinary = function(type) {
        switch (type) {
            case createjs.AbstractLoader.IMAGE:
            case createjs.AbstractLoader.BINARY:
                return true;
            default:
                return false;
        }
    };
    s.isImageTag = function(item) {
        return item instanceof HTMLImageElement;
    };
    s.isAudioTag = function(item) {
        if (window.HTMLAudioElement) {
            return item instanceof HTMLAudioElement;
        } else {
            return false;
        }
    };
    s.isVideoTag = function(item) {
        if (window.HTMLVideoElement) {
            return item instanceof HTMLVideoElement;
        } else {
            false;
        }
    };
    s.isText = function(type) {
        switch (type) {
            case createjs.AbstractLoader.TEXT:
            case createjs.AbstractLoader.JSON:
            case createjs.AbstractLoader.MANIFEST:
            case createjs.AbstractLoader.XML:
            case createjs.AbstractLoader.CSS:
            case createjs.AbstractLoader.SVG:
            case createjs.AbstractLoader.JAVASCRIPT:
                return true;
            default:
                return false;
        }
    };
    s.getTypeByExtension = function(extension) {
        if (extension == null) {
            return createjs.AbstractLoader.TEXT;
        }
        switch (extension.toLowerCase()) {
            case "jpeg":
            case "jpg":
            case "gif":
            case "png":
            case "webp":
            case "bmp":
                return createjs.AbstractLoader.IMAGE;
            case "ogg":
            case "mp3":
            case "webm":
                return createjs.AbstractLoader.SOUND;
            case "mp4":
            case "webm":
            case "ts":
                return createjs.AbstractLoader.VIDEO;
            case "json":
                return createjs.AbstractLoader.JSON;
            case "xml":
                return createjs.AbstractLoader.XML;
            case "css":
                return createjs.AbstractLoader.CSS;
            case "js":
                return createjs.AbstractLoader.JAVASCRIPT;
            case 'svg':
                return createjs.AbstractLoader.SVG;
            default:
                return createjs.AbstractLoader.TEXT;
        }
    };
    createjs.RequestUtils = s;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function AbstractLoader(loadItem, preferXHR, type) {
        this.EventDispatcher_constructor();
        this.loaded = false;
        this.canceled = false;
        this.progress = 0;
        this.type = type;
        this.resultFormatter = null;
        if (loadItem) {
            this._item = createjs.LoadItem.create(loadItem);
        } else {
            this._item = null;
        }
        this._preferXHR = preferXHR;
        this._result = null;
        this._rawResult = null;
        this._loadedItems = null;
        this._tagSrcAttribute = null;
        this._tag = null;
    };
    var p = createjs.extend(AbstractLoader, createjs.EventDispatcher);
    var s = AbstractLoader;
    s.POST = "POST";
    s.GET = "GET";
    s.BINARY = "binary";
    s.CSS = "css";
    s.IMAGE = "image";
    s.JAVASCRIPT = "javascript";
    s.JSON = "json";
    s.JSONP = "jsonp";
    s.MANIFEST = "manifest";
    s.SOUND = "sound";
    s.VIDEO = "video";
    s.SPRITESHEET = "spritesheet";
    s.SVG = "svg";
    s.TEXT = "text";
    s.XML = "xml";
    p.getItem = function() {
        return this._item;
    };
    p.getResult = function(raw) {
        return raw ? this._rawResult : this._result;
    };
    p.getTag = function() {
        return this._tag;
    };
    p.setTag = function(tag) {
        this._tag = tag;
    };
    p.load = function() {
        this._createRequest();
        this._request.on("complete", this, this);
        this._request.on("progress", this, this);
        this._request.on("loadStart", this, this);
        this._request.on("abort", this, this);
        this._request.on("timeout", this, this);
        this._request.on("error", this, this);
        var evt = new createjs.Event("initialize");
        evt.loader = this._request;
        this.dispatchEvent(evt);
        this._request.load();
    };
    p.cancel = function() {
        this.canceled = true;
        this.destroy();
    };
    p.destroy = function() {
        if (this._request) {
            this._request.removeAllEventListeners();
            this._request.destroy();
        }
        this._request = null;
        this._item = null;
        this._rawResult = null;
        this._result = null;
        this._loadItems = null;
        this.removeAllEventListeners();
    };
    p.getLoadedItems = function() {
        return this._loadedItems;
    };
    p._createRequest = function() {
        if (!this._preferXHR) {
            this._request = new createjs.TagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute);
        } else {
            this._request = new createjs.XHRRequest(this._item);
        }
    };
    p._createTag = function(src) {
        return null;
    };
    p._sendLoadStart = function() {
        if (this._isCanceled()) {
            return;
        }
        this.dispatchEvent("loadstart");
    };
    p._sendProgress = function(value) {
        if (this._isCanceled()) {
            return;
        }
        var event = null;
        if (typeof(value) == "number") {
            this.progress = value;
            event = new createjs.ProgressEvent(this.progress);
        } else {
            event = value;
            this.progress = value.loaded / value.total;
            event.progress = this.progress;
            if (isNaN(this.progress) || this.progress == Infinity) {
                this.progress = 0;
            }
        }
        this.hasEventListener("progress") && this.dispatchEvent(event);
    };
    p._sendComplete = function() {
        if (this._isCanceled()) {
            return;
        }
        this.loaded = true;
        var event = new createjs.Event("complete");
        event.rawResult = this._rawResult;
        if (this._result != null) {
            event.result = this._result;
        }
        this.dispatchEvent(event);
    };
    p._sendError = function(event) {
        if (this._isCanceled() || !this.hasEventListener("error")) {
            return;
        }
        if (event == null) {
            event = new createjs.ErrorEvent("PRELOAD_ERROR_EMPTY");
        }
        this.dispatchEvent(event);
    };
    p._isCanceled = function() {
        if (window.createjs == null || this.canceled) {
            return true;
        }
        return false;
    };
    p.resultFormatter = null;
    p.handleEvent = function(event) {
        switch (event.type) {
            case "complete":
                this._rawResult = event.target._response;
                var result = this.resultFormatter && this.resultFormatter(this);
                var _this = this;
                if (result instanceof Function) {
                    result(function(result) {
                        _this._result = result;
                        _this._sendComplete();
                    });
                } else {
                    this._result = result || this._rawResult;
                    this._sendComplete();
                }
                break;
            case "progress":
                this._sendProgress(event);
                break;
            case "error":
                this._sendError(event);
                break;
            case "loadstart":
                this._sendLoadStart();
                break;
            case "abort":
            case "timeout":
                if (!this._isCanceled()) {
                    this.dispatchEvent(event.type);
                }
                break;
        }
    };
    p.buildPath = function(src, data) {
        return createjs.RequestUtils.buildPath(src, data);
    };
    p.toString = function() {
        return "[PreloadJS AbstractLoader]";
    };
    createjs.AbstractLoader = createjs.promote(AbstractLoader, "EventDispatcher");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function AbstractMediaLoader(loadItem, preferXHR, type) {
        this.AbstractLoader_constructor(loadItem, preferXHR, type);
        this.resultFormatter = this._formatResult;
        this._tagSrcAttribute = "src";
    };
    var p = createjs.extend(AbstractMediaLoader, createjs.AbstractLoader);
    p.load = function() {
        if (!this._tag) {
            this._tag = this._createTag(this._item.src);
        }
        this._tag.preload = "auto";
        this._tag.load();
        this.AbstractLoader_load();
    };
    p._createTag = function() {};
    p._createRequest = function() {
        if (!this._preferXHR) {
            this._request = new createjs.MediaTagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute);
        } else {
            this._request = new createjs.XHRRequest(this._item);
        }
    };
    p._formatResult = function(loader) {
        this._tag.removeEventListener && this._tag.removeEventListener("canplaythrough", this._loadedHandler);
        this._tag.onstalled = null;
        if (this._preferXHR) {
            loader.getTag().src = loader.getResult(true);
        }
        return loader.getTag();
    };
    createjs.AbstractMediaLoader = createjs.promote(AbstractMediaLoader, "AbstractLoader");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";
    var AbstractRequest = function(item) {
        this._item = item;
    };
    var p = createjs.extend(AbstractRequest, createjs.EventDispatcher);
    p.load = function() {};
    p.destroy = function() {};
    p.cancel = function() {};
    createjs.AbstractRequest = createjs.promote(AbstractRequest, "EventDispatcher");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function TagRequest(loadItem, tag, srcAttribute) {
        this.AbstractRequest_constructor(loadItem);
        this._tag = tag;
        this._tagSrcAttribute = srcAttribute;
        this._loadedHandler = createjs.proxy(this._handleTagComplete, this);
        this._addedToDOM = false;
        this._startTagVisibility = null;
    };
    var p = createjs.extend(TagRequest, createjs.AbstractRequest);
    p.load = function() {
        if (this._tag.parentNode == null) {
            window.document.body.appendChild(this._tag);
            this._addedToDOM = true;
        }
        this._tag.onload = createjs.proxy(this._handleTagComplete, this);
        this._tag.onreadystatechange = createjs.proxy(this._handleReadyStateChange, this);
        var evt = new createjs.Event("initialize");
        evt.loader = this._tag;
        this.dispatchEvent(evt);
        this._hideTag();
        this._tag[this._tagSrcAttribute] = this._item.src;
    };
    p.destroy = function() {
        this._clean();
        this._tag = null;
        this.AbstractRequest_destroy();
    };
    p._handleReadyStateChange = function() {
        clearTimeout(this._loadTimeout);
        var tag = this._tag;
        if (tag.readyState == "loaded" || tag.readyState == "complete") {
            this._handleTagComplete();
        }
    };
    p._handleTagComplete = function() {
        this._rawResult = this._tag;
        this._result = this.resultFormatter && this.resultFormatter(this) || this._rawResult;
        this._clean();
        this._showTag();
        this.dispatchEvent("complete");
    };
    p._clean = function() {
        this._tag.onload = null;
        this._tag.onreadystatechange = null;
        if (this._addedToDOM && this._tag.parentNode != null) {
            this._tag.parentNode.removeChild(this._tag);
        }
    };
    p._hideTag = function() {
        this._startTagVisibility = this._tag.style.visibility;
        this._tag.style.visibility = "hidden";
    };
    p._showTag = function() {
        this._tag.style.visibility = this._startTagVisibility;
    };
    p._handleStalled = function() {};
    createjs.TagRequest = createjs.promote(TagRequest, "AbstractRequest");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function MediaTagRequest(loadItem, tag, srcAttribute) {
        this.AbstractRequest_constructor(loadItem);
        this._tag = tag;
        this._tagSrcAttribute = srcAttribute;
        this._loadedHandler = createjs.proxy(this._handleTagComplete, this);
    };
    var p = createjs.extend(MediaTagRequest, createjs.TagRequest);
    var s = MediaTagRequest;
    p.load = function() {
        this._tag.onstalled = createjs.proxy(this._handleStalled, this);
        this._tag.onprogress = createjs.proxy(this._handleProgress, this);
        this._tag.addEventListener && this._tag.addEventListener("canplaythrough", this._loadedHandler, false);
        this.TagRequest_load();
    };
    p._handleReadyStateChange = function() {
        clearTimeout(this._loadTimeout);
        var tag = this._tag;
        if (tag.readyState == "loaded" || tag.readyState == "complete") {
            this._handleTagComplete();
        }
    };
    p._handleStalled = function() {};
    p._handleProgress = function(event) {
        if (!event || event.loaded > 0 && event.total == 0) {
            return;
        }
        var newEvent = new createjs.ProgressEvent(event.loaded, event.total);
        this.dispatchEvent(newEvent);
    };
    p._clean = function() {
        this._tag.removeEventListener && this._tag.removeEventListener("canplaythrough", this._loadedHandler);
        this._tag.onstalled = null;
        this._tag.onprogress = null;
        this.TagRequest__clean();
    };
    createjs.MediaTagRequest = createjs.promote(MediaTagRequest, "TagRequest");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function XHRRequest(item) {
        this.AbstractRequest_constructor(item);
        this._request = null;
        this._loadTimeout = null;
        this._xhrLevel = 1;
        this._response = null;
        this._rawResponse = null;
        this._canceled = false;
        this._handleLoadStartProxy = createjs.proxy(this._handleLoadStart, this);
        this._handleProgressProxy = createjs.proxy(this._handleProgress, this);
        this._handleAbortProxy = createjs.proxy(this._handleAbort, this);
        this._handleErrorProxy = createjs.proxy(this._handleError, this);
        this._handleTimeoutProxy = createjs.proxy(this._handleTimeout, this);
        this._handleLoadProxy = createjs.proxy(this._handleLoad, this);
        this._handleReadyStateChangeProxy = createjs.proxy(this._handleReadyStateChange, this);
        if (!this._createXHR(item)) {}
    };
    var p = createjs.extend(XHRRequest, createjs.AbstractRequest);
    XHRRequest.ACTIVEX_VERSIONS = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.5.0", "Msxml2.XMLHTTP.4.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    p.getResult = function(raw) {
        if (raw && this._rawResponse) {
            return this._rawResponse;
        }
        return this._response;
    };
    p.cancel = function() {
        this.canceled = true;
        this._clean();
        this._request.abort();
    };
    p.load = function() {
        if (this._request == null) {
            this._handleError();
            return;
        }
        this._request.addEventListener("loadstart", this._handleLoadStartProxy, false);
        this._request.addEventListener("progress", this._handleProgressProxy, false);
        this._request.addEventListener("abort", this._handleAbortProxy, false);
        this._request.addEventListener("error", this._handleErrorProxy, false);
        this._request.addEventListener("timeout", this._handleTimeoutProxy, false);
        this._request.addEventListener("load", this._handleLoadProxy, false);
        this._request.addEventListener("readystatechange", this._handleReadyStateChangeProxy, false);
        if (this._xhrLevel == 1) {
            this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout);
        }
        try {
            if (!this._item.values || this._item.method == createjs.AbstractLoader.GET) {
                this._request.send();
            } else if (this._item.method == createjs.AbstractLoader.POST) {
                this._request.send(createjs.RequestUtils.formatQueryString(this._item.values));
            }
        } catch (error) {
            this.dispatchEvent(new createjs.ErrorEvent("XHR_SEND", null, error));
        }
    };
    p.setResponseType = function(type) {
        this._request.responseType = type;
    };
    p.getAllResponseHeaders = function() {
        if (this._request.getAllResponseHeaders instanceof Function) {
            return this._request.getAllResponseHeaders();
        } else {
            return null;
        }
    };
    p.getResponseHeader = function(header) {
        if (this._request.getResponseHeader instanceof Function) {
            return this._request.getResponseHeader(header);
        } else {
            return null;
        }
    };
    p._handleProgress = function(event) {
        if (!event || event.loaded > 0 && event.total == 0) {
            return;
        }
        var newEvent = new createjs.ProgressEvent(event.loaded, event.total);
        this.dispatchEvent(newEvent);
    };
    p._handleLoadStart = function(event) {
        clearTimeout(this._loadTimeout);
        this.dispatchEvent("loadstart");
    };
    p._handleAbort = function(event) {
        this._clean();
        this.dispatchEvent(new createjs.ErrorEvent("XHR_ABORTED", null, event));
    };
    p._handleError = function(event) {
        this._clean();
        this.dispatchEvent(new createjs.ErrorEvent(event.message));
    };
    p._handleReadyStateChange = function(event) {
        if (this._request.readyState == 4) {
            this._handleLoad();
        }
    };
    p._handleLoad = function(event) {
        if (this.loaded) {
            return;
        }
        this.loaded = true;
        var error = this._checkError();
        if (error) {
            this._handleError(error);
            return;
        }
        this._response = this._getResponse();
        this._clean();
        this.dispatchEvent(new createjs.Event("complete"));
    };
    p._handleTimeout = function(event) {
        this._clean();
        this.dispatchEvent(new createjs.ErrorEvent("PRELOAD_TIMEOUT", null, event));
    };
    p._checkError = function() {
        var status = parseInt(this._request.status);
        switch (status) {
            case 404:
            case 0:
                return new Error(status);
        }
        return null;
    };
    p._getResponse = function() {
        if (this._response != null) {
            return this._response;
        }
        if (this._request.response != null) {
            return this._request.response;
        }
        try {
            if (this._request.responseText != null) {
                return this._request.responseText;
            }
        } catch (e) {}
        try {
            if (this._request.responseXML != null) {
                return this._request.responseXML;
            }
        } catch (e) {}
        return null;
    };
    p._createXHR = function(item) {
        var crossdomain = createjs.RequestUtils.isCrossDomain(item);
        var headers = {};
        var req = null;
        if (window.XMLHttpRequest) {
            req = new XMLHttpRequest();
            if (crossdomain && req.withCredentials === undefined && window.XDomainRequest) {
                req = new XDomainRequest();
            }
        } else {
            for (var i = 0, l = s.ACTIVEX_VERSIONS.length; i < l; i++) {
                var axVersion = s.ACTIVEX_VERSIONS[i];
                try {
                    req = new ActiveXObject(axVersions);
                    break;
                } catch (e) {}
            }
            if (req == null) {
                return false;
            }
        }
        if (item.mimeType && req.overrideMimeType) {
            req.overrideMimeType(item.mimeType);
        }
        this._xhrLevel = (typeof req.responseType === "string") ? 2 : 1;
        var src = null;
        if (item.method == createjs.AbstractLoader.GET) {
            src = createjs.RequestUtils.buildPath(item.src, item.values);
        } else {
            src = item.src;
        }
        req.open(item.method || createjs.AbstractLoader.GET, src, true);
        if (crossdomain && req instanceof XMLHttpRequest && this._xhrLevel == 1) {
            headers["Origin"] = location.origin;
        }
        if (item.values && item.method == createjs.AbstractLoader.POST) {
            headers["Content-Type"] = "application/x-www-form-urlencoded";
        }
        if (!crossdomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
        }
        if (item.headers) {
            for (var n in item.headers) {
                headers[n] = item.headers[n];
            }
        }
        for (n in headers) {
            req.setRequestHeader(n, headers[n])
        }
        if (req instanceof XMLHttpRequest && item.withCredentials !== undefined) {
            req.withCredentials = item.withCredentials;
        }
        this._request = req;
        return true;
    };
    p._clean = function() {
        clearTimeout(this._loadTimeout);
        this._request.removeEventListener("loadstart", this._handleLoadStartProxy);
        this._request.removeEventListener("progress", this._handleProgressProxy);
        this._request.removeEventListener("abort", this._handleAbortProxy);
        this._request.removeEventListener("error", this._handleErrorProxy);
        this._request.removeEventListener("timeout", this._handleTimeoutProxy);
        this._request.removeEventListener("load", this._handleLoadProxy);
        this._request.removeEventListener("readystatechange", this._handleReadyStateChangeProxy);
    };
    p.toString = function() {
        return "[PreloadJS XHRRequest]";
    };
    createjs.XHRRequest = createjs.promote(XHRRequest, "AbstractRequest");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function SoundLoader(loadItem, preferXHR) {
        this.AbstractMediaLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.SOUND);
        if (createjs.RequestUtils.isAudioTag(loadItem)) {
            this._tag = loadItem;
        } else if (createjs.RequestUtils.isAudioTag(loadItem.src)) {
            this._tag = loadItem;
        } else if (createjs.RequestUtils.isAudioTag(loadItem.tag)) {
            this._tag = createjs.RequestUtils.isAudioTag(loadItem) ? loadItem : loadItem.src;
        }
        if (this._tag != null) {
            this._preferXHR = false;
        }
    };
    var p = createjs.extend(SoundLoader, createjs.AbstractMediaLoader);
    var s = SoundLoader;
    s.canLoadItem = function(item) {
        return item.type == createjs.AbstractLoader.SOUND;
    };
    p._createTag = function(src) {
        var tag = document.createElement("audio");
        tag.autoplay = false;
        tag.preload = "none";
        tag.src = src;
        return tag;
    };
    createjs.SoundLoader = createjs.promote(SoundLoader, "AbstractMediaLoader");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function Sound() {
        throw "Sound cannot be instantiated";
    }
    var s = Sound;
    s.INTERRUPT_ANY = "any";
    s.INTERRUPT_EARLY = "early";
    s.INTERRUPT_LATE = "late";
    s.INTERRUPT_NONE = "none";
    s.PLAY_INITED = "playInited";
    s.PLAY_SUCCEEDED = "playSucceeded";
    s.PLAY_INTERRUPTED = "playInterrupted";
    s.PLAY_FINISHED = "playFinished";
    s.PLAY_FAILED = "playFailed";
    s.SUPPORTED_EXTENSIONS = ["mp3", "ogg", "mpeg", "wav", "m4a", "mp4", "aiff", "wma", "mid"];
    s.EXTENSION_MAP = {
        m4a: "mp4"
    };
    s.FILE_PATTERN = /^(?:(\w+:)\/{2}(\w+(?:\.\w+)*\/?))?([/.]*?(?:[^?]+)?\/)?((?:[^/?]+)\.(\w+))(?:\?(\S+)?)?$/;
    s.defaultInterruptBehavior = s.INTERRUPT_NONE;
    s.alternateExtensions = [];
    s.activePlugin = null;
    s._pluginsRegistered = false;
    s._lastID = 0;
    s._masterVolume = 1;
    s._masterMute = false;
    s._instances = [];
    s._idHash = {};
    s._preloadHash = {};
    s.addEventListener = null;
    s.removeEventListener = null;
    s.removeAllEventListeners = null;
    s.dispatchEvent = null;
    s.hasEventListener = null;
    s._listeners = null;
    createjs.EventDispatcher.initialize(s);
    s.getPreloadHandlers = function() {
        return {
            callback: createjs.proxy(s.initLoad, s),
            types: ["sound"],
            extensions: s.SUPPORTED_EXTENSIONS
        };
    };
    s._handleLoadComplete = function(event) {
        var src = event.target.getItem().src;
        if (!s._preloadHash[src]) {
            return;
        }
        for (var i = 0, l = s._preloadHash[src].length; i < l; i++) {
            var item = s._preloadHash[src][i];
            s._preloadHash[src][i] = true;
            if (!s.hasEventListener("fileload")) {
                continue;
            }
            var event = new createjs.Event("fileload");
            event.src = item.src;
            event.id = item.id;
            event.data = item.data;
            event.sprite = item.sprite;
            s.dispatchEvent(event);
        }
    };
    s._handleLoadError = function(event) {
        var src = event.target.getItem().src;
        if (!s._preloadHash[src]) {
            return;
        }
        for (var i = 0, l = s._preloadHash[src].length; i < l; i++) {
            var item = s._preloadHash[src][i];
            s._preloadHash[src][i] = false;
            if (!s.hasEventListener("fileerror")) {
                continue;
            }
            var event = new createjs.Event("fileerror");
            event.src = item.src;
            event.id = item.id;
            event.data = item.data;
            event.sprite = item.sprite;
            s.dispatchEvent(event);
        }
    };
    s._registerPlugin = function(plugin) {
        if (plugin.isSupported()) {
            s.activePlugin = new plugin();
            return true;
        }
        return false;
    };
    s.registerPlugins = function(plugins) {
        s._pluginsRegistered = true;
        for (var i = 0, l = plugins.length; i < l; i++) {
            if (s._registerPlugin(plugins[i])) {
                return true;
            }
        }
        return false;
    };
    s.initializeDefaultPlugins = function() {
        if (s.activePlugin != null) {
            return true;
        }
        if (s._pluginsRegistered) {
            return false;
        }
        if (s.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin])) {
            return true;
        }
        return false;
    };
    s.isReady = function() {
        return (s.activePlugin != null);
    };
    s.getCapabilities = function() {
        if (s.activePlugin == null) {
            return null;
        }
        return s.activePlugin._capabilities;
    };
    s.getCapability = function(key) {
        if (s.activePlugin == null) {
            return null;
        }
        return s.activePlugin._capabilities[key];
    };
    s.initLoad = function(loadItem) {
        return s._registerSound(loadItem);
    };
    s._registerSound = function(loadItem) {
        if (!s.initializeDefaultPlugins()) {
            return false;
        }
        var details = s._parsePath(loadItem.src);
        if (details == null) {
            return false;
        }
        loadItem.src = details.src;
        loadItem.type = "sound";
        var data = loadItem.data;
        var numChannels = s.activePlugin.defaultNumChannels || null;
        if (data != null) {
            if (!isNaN(data.channels)) {
                numChannels = parseInt(data.channels);
            } else if (!isNaN(data)) {
                numChannels = parseInt(data);
            }
            if (data.audioSprite) {
                var sp;
                for (var i = data.audioSprite.length; i--;) {
                    sp = data.audioSprite[i];
                    s._idHash[sp.id] = {
                        src: loadItem.src,
                        startTime: parseInt(sp.startTime),
                        duration: parseInt(sp.duration)
                    };
                }
            }
        }
        if (loadItem.id != null) {
            s._idHash[loadItem.id] = {
                src: loadItem.src
            }
        };
        var loader = s.activePlugin.register(loadItem, numChannels);
        SoundChannel.create(loadItem.src, numChannels);
        if (data == null || !isNaN(data)) {
            loadItem.data = numChannels || SoundChannel.maxPerChannel();
        } else {
            loadItem.data.channels = numChannels || SoundChannel.maxPerChannel();
        }
        if (loader.type) {
            loadItem.type = loader.type;
        }
        return loader;
    };
    s.registerSound = function(src, id, data, basePath) {
        var loadItem = {
            src: src,
            id: id,
            data: data
        };
        if (src instanceof Object) {
            basePath = id;
            loadItem = src;
        }
        loadItem = createjs.LoadItem.create(loadItem);
        if (basePath != null) {
            loadItem.src = basePath + src;
        }
        var loader = s._registerSound(loadItem);
        if (!loader) {
            return false;
        }
        if (!s._preloadHash[loadItem.src]) {
            s._preloadHash[loadItem.src] = [];
        }
        s._preloadHash[loadItem.src].push(loadItem);
        if (s._preloadHash[loadItem.src].length == 1) {
            loader.on("complete", createjs.proxy(this._handleLoadComplete, this));
            loader.on("error", createjs.proxy(this._handleLoadError, this));
            s.activePlugin.preload(loader);
        } else {
            if (s._preloadHash[loadItem.src][0] == true) {
                return true;
            }
        }
        return loadItem;
    };
    s.registerSounds = function(sounds, basePath) {
        var returnValues = [];
        if (sounds.path) {
            if (!basePath) {
                basePath = sounds.path;
            } else {
                basePath = basePath + sounds.path;
            }
        }
        for (var i = 0, l = sounds.length; i < l; i++) {
            returnValues[i] = createjs.Sound.registerSound(sounds[i].src, sounds[i].id, sounds[i].data, basePath);
        }
        return returnValues;
    };
    s.registerManifest = function(manifest, basePath) {
        try {
            console.log("createjs.Sound.registerManifest is deprecated, please use createjs.Sound.registerSounds.")
        } catch (error) {};
        return this.registerSounds(manifest, basePath);
    };
    s.removeSound = function(src, basePath) {
        if (s.activePlugin == null) {
            return false;
        }
        if (src instanceof Object) {
            src = src.src;
        }
        src = s._getSrcById(src).src;
        if (basePath != null) {
            src = basePath + src;
        }
        var details = s._parsePath(src);
        if (details == null) {
            return false;
        }
        src = details.src;
        for (var prop in s._idHash) {
            if (s._idHash[prop].src == src) {
                delete(s._idHash[prop]);
            }
        }
        SoundChannel.removeSrc(src);
        delete(s._preloadHash[src]);
        s.activePlugin.removeSound(src);
        return true;
    };
    s.removeSounds = function(sounds, basePath) {
        var returnValues = [];
        if (sounds.path) {
            if (!basePath) {
                basePath = sounds.path;
            } else {
                basePath = basePath + sounds.path;
            }
        }
        for (var i = 0, l = sounds.length; i < l; i++) {
            returnValues[i] = createjs.Sound.removeSound(sounds[i].src, basePath);
        }
        return returnValues;
    };
    s.removeManifest = function(manifest, basePath) {
        try {
            console.log("createjs.Sound.removeManifest is deprecated, please use createjs.Sound.removeSounds.");
        } catch (error) {};
        return s.removeSounds(manifest, basePath);
    };
    s.removeAllSounds = function() {
        s._idHash = {};
        s._preloadHash = {};
        SoundChannel.removeAll();
        if (s.activePlugin) {
            s.activePlugin.removeAllSounds();
        }
    };
    s.loadComplete = function(src) {
        if (!s.isReady()) {
            return false;
        }
        var details = s._parsePath(src);
        if (details) {
            src = s._getSrcById(details.src).src;
        } else {
            src = s._getSrcById(src).src;
        }
        return (s._preloadHash[src][0] == true);
    };
    s._parsePath = function(value) {
        if (typeof(value) != "string") {
            value = value.toString();
        }
        var match = value.match(s.FILE_PATTERN);
        if (match == null) {
            return false;
        }
        var name = match[4];
        var ext = match[5];
        var c = s.getCapabilities();
        var i = 0;
        while (!c[ext]) {
            ext = s.alternateExtensions[i++];
            if (i > s.alternateExtensions.length) {
                return null;
            }
        }
        value = value.replace("." + match[5], "." + ext);
        var ret = {
            name: name,
            src: value,
            extension: ext
        };
        return ret;
    };
    s.play = function(src, interrupt, delay, offset, loop, volume, pan, startTime, duration) {
        if (interrupt instanceof Object) {
            delay = interrupt.delay;
            offset = interrupt.offset;
            loop = interrupt.loop;
            volume = interrupt.volume;
            pan = interrupt.pan;
            startTime = interrupt.startTime;
            duration = interrupt.duration;
            interrupt = interrupt.interrupt;
        }
        var instance = s.createInstance(src, startTime, duration);
        var ok = s._playInstance(instance, interrupt, delay, offset, loop, volume, pan);
        if (!ok) {
            instance._playFailed();
        }
        return instance;
    };
    s.createInstance = function(src, startTime, duration) {
        if (!s.initializeDefaultPlugins()) {
            return new createjs.DefaultSoundInstance(src, startTime, duration);
        }
        src = s._getSrcById(src);
        var details = s._parsePath(src.src);
        var instance = null;
        if (details != null && details.src != null) {
            SoundChannel.create(details.src);
            if (startTime == null) {
                startTime = src.startTime;
            }
            instance = s.activePlugin.create(details.src, startTime, duration || src.duration);
        } else {
            instance = new createjs.DefaultSoundInstance(src, startTime, duration);;
        }
        instance.uniqueId = s._lastID++;
        return instance;
    };
    s.setVolume = function(value) {
        if (Number(value) == null) {
            return false;
        }
        value = Math.max(0, Math.min(1, value));
        s._masterVolume = value;
        if (!this.activePlugin || !this.activePlugin.setVolume || !this.activePlugin.setVolume(value)) {
            var instances = this._instances;
            for (var i = 0, l = instances.length; i < l; i++) {
                instances[i].setMasterVolume(value);
            }
        }
    };
    s.getVolume = function() {
        return s._masterVolume;
    };
    s.setMute = function(value) {
        if (value == null) {
            return false;
        }
        this._masterMute = value;
        if (!this.activePlugin || !this.activePlugin.setMute || !this.activePlugin.setMute(value)) {
            var instances = this._instances;
            for (var i = 0, l = instances.length; i < l; i++) {
                instances[i].setMasterMute(value);
            }
        }
        return true;
    };
    s.getMute = function() {
        return this._masterMute;
    };
    s.stop = function() {
        var instances = this._instances;
        for (var i = instances.length; i--;) {
            instances[i].stop();
        }
    };
    s._playInstance = function(instance, interrupt, delay, offset, loop, volume, pan) {
        if (interrupt instanceof Object) {
            delay = interrupt.delay;
            offset = interrupt.offset;
            loop = interrupt.loop;
            volume = interrupt.volume;
            pan = interrupt.pan;
            interrupt = interrupt.interrupt;
        }
        interrupt = interrupt || s.defaultInterruptBehavior;
        if (delay == null) {
            delay = 0;
        }
        if (offset == null) {
            offset = instance.getPosition();
        }
        if (loop == null) {
            loop = instance.loop;
        }
        if (volume == null) {
            volume = instance.volume;
        }
        if (pan == null) {
            pan = instance.pan;
        }
        if (delay == 0) {
            var ok = s._beginPlaying(instance, interrupt, offset, loop, volume, pan);
            if (!ok) {
                return false;
            }
        } else {
            var delayTimeoutId = setTimeout(function() {
                s._beginPlaying(instance, interrupt, offset, loop, volume, pan);
            }, delay);
            instance.delayTimeoutId = delayTimeoutId;
        }
        this._instances.push(instance);
        return true;
    };
    s._beginPlaying = function(instance, interrupt, offset, loop, volume, pan) {
        if (!SoundChannel.add(instance, interrupt)) {
            return false;
        }
        var result = instance._beginPlaying(offset, loop, volume, pan);
        if (!result) {
            var index = createjs.indexOf(this._instances, instance);
            if (index > -1) {
                this._instances.splice(index, 1);
            }
            return false;
        }
        return true;
    };
    s._getSrcById = function(value) {
        return s._idHash[value] || {
            src: value
        };
    };
    s._playFinished = function(instance) {
        SoundChannel.remove(instance);
        var index = createjs.indexOf(this._instances, instance);
        if (index > -1) {
            this._instances.splice(index, 1);
        }
    };
    createjs.Sound = Sound;

    function SoundChannel(src, max) {
        this.init(src, max);
    }
    SoundChannel.channels = {};
    SoundChannel.create = function(src, max) {
        var channel = SoundChannel.get(src);
        if (channel == null) {
            SoundChannel.channels[src] = new SoundChannel(src, max);
            return true;
        }
        return false;
    };
    SoundChannel.removeSrc = function(src) {
        var channel = SoundChannel.get(src);
        if (channel == null) {
            return false;
        }
        channel._removeAll();
        delete(SoundChannel.channels[src]);
        return true;
    };
    SoundChannel.removeAll = function() {
        for (var channel in SoundChannel.channels) {
            SoundChannel.channels[channel]._removeAll();
        }
        SoundChannel.channels = {};
    };
    SoundChannel.add = function(instance, interrupt) {
        var channel = SoundChannel.get(instance.src);
        if (channel == null) {
            return false;
        }
        return channel._add(instance, interrupt);
    };
    SoundChannel.remove = function(instance) {
        var channel = SoundChannel.get(instance.src);
        if (channel == null) {
            return false;
        }
        channel._remove(instance);
        return true;
    };
    SoundChannel.maxPerChannel = function() {
        return p.maxDefault;
    };
    SoundChannel.get = function(src) {
        return SoundChannel.channels[src];
    };
    var p = SoundChannel.prototype;
    p.constructor = SoundChannel;
    p.src = null;
    p.max = null;
    p.maxDefault = 100;
    p.length = 0;
    p.init = function(src, max) {
        this.src = src;
        this.max = max || this.maxDefault;
        if (this.max == -1) {
            this.max = this.maxDefault;
        }
        this._instances = [];
    };
    p._get = function(index) {
        return this._instances[index];
    };
    p._add = function(instance, interrupt) {
        if (!this._getSlot(interrupt, instance)) {
            return false;
        }
        this._instances.push(instance);
        this.length++;
        return true;
    };
    p._remove = function(instance) {
        var index = createjs.indexOf(this._instances, instance);
        if (index == -1) {
            return false;
        }
        this._instances.splice(index, 1);
        this.length--;
        return true;
    };
    p._removeAll = function() {
        for (var i = this.length - 1; i >= 0; i--) {
            this._instances[i].stop();
        }
    };
    p._getSlot = function(interrupt, instance) {
        var target, replacement;
        if (interrupt != Sound.INTERRUPT_NONE) {
            replacement = this._get(0);
            if (replacement == null) {
                return true;
            }
        }
        for (var i = 0, l = this.max; i < l; i++) {
            target = this._get(i);
            if (target == null) {
                return true;
            }
            if (target.playState == Sound.PLAY_FINISHED || target.playState == Sound.PLAY_INTERRUPTED || target.playState == Sound.PLAY_FAILED) {
                replacement = target;
                break;
            }
            if (interrupt == Sound.INTERRUPT_NONE) {
                continue;
            }
            if ((interrupt == Sound.INTERRUPT_EARLY && target.getPosition() < replacement.getPosition()) || (interrupt == Sound.INTERRUPT_LATE && target.getPosition() > replacement.getPosition())) {
                replacement = target;
            }
        }
        if (replacement != null) {
            replacement._interrupt();
            this._remove(replacement);
            return true;
        }
        return false;
    };
    p.toString = function() {
        return "[Sound SoundChannel]";
    };
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";
    var AbstractSoundInstance = function(src, startTime, duration, playbackResource) {
        this.EventDispatcher_constructor();
        this.src = src;
        this.uniqueId = -1;
        this.playState = null;
        this.delayTimeoutId = null;
        this._startTime = Math.max(0, startTime || 0);
        this._volume = 1;
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "volume", {
                get: this.getVolume,
                set: this.setVolume
            });
        }
        this._pan = 0;
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "pan", {
                get: this.getPan,
                set: this.setPan
            });
        }
        this._duration = Math.max(0, duration || 0);
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "duration", {
                get: this.getDuration,
                set: this.setDuration
            });
        }
        this._playbackResource = null;
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "playbackResource", {
                get: this.getPlaybackResource,
                set: this.setPlaybackResource
            });
        }
        if (playbackResource !== false && playbackResource !== true) {
            this.setPlaybackResource(playbackResource);
        }
        this._position = 0;
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "position", {
                get: this.getPosition,
                set: this.setPosition
            });
        }
        this._loop = 0;
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "loop", {
                get: this.getLoop,
                set: this.setLoop
            });
        }
        this._muted = false;
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "muted", {
                get: this.getMuted,
                set: this.setMuted
            });
        }
        this._paused = false;
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "paused", {
                get: this.getPaused,
                set: this.setPaused
            });
        }
    };
    var p = createjs.extend(AbstractSoundInstance, createjs.EventDispatcher);
    p.play = function(interrupt, delay, offset, loop, volume, pan) {
        if (this.playState == createjs.Sound.PLAY_SUCCEEDED) {
            if (interrupt instanceof Object) {
                offset = interrupt.offset;
                loop = interrupt.loop;
                volume = interrupt.volume;
                pan = interrupt.pan;
            }
            if (offset != null) {
                this.setPosition(offset)
            }
            if (loop != null) {
                this.setLoop(loop);
            }
            if (volume != null) {
                this.setVolume(volume);
            }
            if (pan != null) {
                this.setPan(pan);
            }
            if (this._paused) {
                this.setPaused(false);
            }
            return;
        }
        this._cleanUp();
        createjs.Sound._playInstance(this, interrupt, delay, offset, loop, volume, pan);
        return this;
    };
    p.pause = function() {
        if (this._paused || this.playState != createjs.Sound.PLAY_SUCCEEDED) {
            return false;
        }
        this.setPaused(true);
        return true;
    };
    p.resume = function() {
        if (!this._paused) {
            return false;
        }
        this.setPaused(false);
        return true;
    };
    p.stop = function() {
        this._position = 0;
        this._paused = false;
        this._handleStop();
        this._cleanUp();
        this.playState = createjs.Sound.PLAY_FINISHED;
        return this;
    };
    p.destroy = function() {
        this._cleanUp();
        this.src = null;
        this.playbackResource = null;
        this.removeAllEventListeners();
    };
    p.toString = function() {
        return "[AbstractSoundInstance]";
    };
    p.getPaused = function() {
        return this._paused;
    };
    p.setPaused = function(value) {
        if ((value !== true && value !== false) || this._paused == value) {
            return;
        }
        if (value == true && this.playState != createjs.Sound.PLAY_SUCCEEDED) {
            return;
        }
        this._paused = value;
        if (value) {
            this._pause();
        } else {
            this._resume();
        }
        clearTimeout(this.delayTimeoutId);
        return this;
    };
    p.setVolume = function(value) {
        if (value == this._volume) {
            return this;
        }
        this._volume = Math.max(0, Math.min(1, value));
        if (!this._muted) {
            this._updateVolume();
        }
        return this;
    };
    p.getVolume = function() {
        return this._volume;
    };
    p.setMute = function(value) {
        this.setMuted(value);
    };
    p.getMute = function() {
        return this._muted;
    };
    p.setMuted = function(value) {
        if (value !== true && value !== false) {
            return;
        }
        this._muted = value;
        this._updateVolume();
        return this;
    };
    p.getMuted = function() {
        return this._muted;
    };
    p.setPan = function(value) {
        if (value == this._pan) {
            return this;
        }
        this._pan = Math.max(-1, Math.min(1, value));
        this._updatePan();
        return this;
    };
    p.getPan = function() {
        return this._pan;
    };
    p.getPosition = function() {
        if (!this._paused && this.playState == createjs.Sound.PLAY_SUCCEEDED) {
            return this._calculateCurrentPosition();
        }
        return this._position;
    };
    p.setPosition = function(value) {
        this._position = Math.max(0, value);
        if (this.playState == createjs.Sound.PLAY_SUCCEEDED) {
            this._updatePosition();
        }
        return this;
    };
    p.getDuration = function() {
        return this._duration;
    };
    p.setDuration = function(value) {
        if (value == this._duration) {
            return this;
        }
        this._duration = Math.max(0, value || 0);
        this._updateDuration();
        return this;
    };
    p.setPlaybackResource = function(value) {
        this._playbackResource = value;
        if (this._duration == 0) {
            this._setDurationFromSource();
        }
        return this;
    };
    p.getPlaybackResource = function() {
        return this._playbackResource;
    };
    p.getLoop = function() {
        return this._loop;
    };
    p.setLoop = function(value) {
        if (this._playbackResource != null) {
            if (this._loop != 0 && value == 0) {
                this._removeLooping(value);
            }
            if (this._loop == 0 && value != 0) {
                this._addLooping(value);
            }
        }
        this._loop = value;
    };
    p._sendEvent = function(type) {
        var event = new createjs.Event(type);
        this.dispatchEvent(event);
    };
    p._cleanUp = function() {
        clearTimeout(this.delayTimeoutId);
        this._handleCleanUp();
        this._paused = false;
        createjs.Sound._playFinished(this);
    };
    p._interrupt = function() {
        this._cleanUp();
        this.playState = createjs.Sound.PLAY_INTERRUPTED;
        this._sendEvent("interrupted");
    };
    p._beginPlaying = function(offset, loop, volume, pan) {
        this.setPosition(offset);
        this.setLoop(loop);
        this.setVolume(volume);
        this.setPan(pan);
        if (this._playbackResource != null && this._position < this._duration) {
            this._paused = false;
            this._handleSoundReady();
            this.playState = createjs.Sound.PLAY_SUCCEEDED;
            this._sendEvent("succeeded");
            return true;
        } else {
            this._playFailed();
            return false;
        }
    };
    p._playFailed = function() {
        this._cleanUp();
        this.playState = createjs.Sound.PLAY_FAILED;
        this._sendEvent("failed");
    };
    p._handleSoundComplete = function(event) {
        this._position = 0;
        if (this._loop != 0) {
            this._loop--;
            this._handleLoop();
            this._sendEvent("loop");
            return;
        }
        this._cleanUp();
        this.playState = createjs.Sound.PLAY_FINISHED;
        this._sendEvent("complete");
    };
    p._handleSoundReady = function() {};
    p._updateVolume = function() {};
    p._updatePan = function() {};
    p._updateDuration = function() {};
    p._setDurationFromSource = function() {};
    p._calculateCurrentPosition = function() {};
    p._updatePosition = function() {};
    p._removeLooping = function() {};
    p._addLooping = function() {};
    p._pause = function() {};
    p._resume = function() {};
    p._handleStop = function() {};
    p._handleCleanUp = function() {};
    p._handleLoop = function() {};
    createjs.AbstractSoundInstance = createjs.promote(AbstractSoundInstance, "EventDispatcher");
    createjs.DefaultSoundInstance = createjs.AbstractSoundInstance;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";
    var AbstractPlugin = function() {
        this._capabilities = null;
        this._loaders = {};
        this._audioSources = {};
        this._soundInstances = {};
        this._loaderClass;
        this._soundInstanceClass;
    };
    var p = AbstractPlugin.prototype;
    AbstractPlugin._capabilities = null;
    AbstractPlugin.isSupported = function() {
        return true;
    };
    p.register = function(loadItem, instances) {
        this._audioSources[loadItem.src] = true;
        this._soundInstances[loadItem.src] = [];
        if (this._loaders[loadItem.src]) {
            return this._loaders[loadItem.src];
        }
        var loader = new this._loaderClass(loadItem);
        loader.on("complete", createjs.proxy(this._handlePreloadComplete, this));
        this._loaders[loadItem.src] = loader;
        return loader;
    };
    p.preload = function(loader) {
        loader.on("error", createjs.proxy(this._handlePreloadError, this));
        loader.load();
    };
    p.isPreloadStarted = function(src) {
        return (this._audioSources[src] != null);
    };
    p.isPreloadComplete = function(src) {
        return (!(this._audioSources[src] == null || this._audioSources[src] == true));
    };
    p.removeSound = function(src) {
        if (!this._soundInstances[src]) {
            return;
        }
        for (var i = this._soundInstances[src].length; i--;) {
            var item = this._soundInstances[src][i];
            item.destroy();
        }
        delete(this._soundInstances[src]);
        delete(this._audioSources[src]);
        if (this._loaders[src]) {
            this._loaders[src].destroy();
        }
        delete(this._loaders[src]);
    };
    p.removeAllSounds = function() {
        for (var key in this._audioSources) {
            this.removeSound(key);
        }
    };
    p.create = function(src, startTime, duration) {
        if (!this.isPreloadStarted(src)) {
            this.preload(this.register(src));
        }
        var si = new this._soundInstanceClass(src, startTime, duration, this._audioSources[src]);
        this._soundInstances[src].push(si);
        return si;
    };
    p.setVolume = function(value) {
        this._volume = value;
        this._updateVolume();
        return true;
    };
    p.getVolume = function() {
        return this._volume;
    };
    p.setMute = function(value) {
        this._updateVolume();
        return true;
    };
    p.toString = function() {
        return "[AbstractPlugin]";
    };
    p._handlePreloadComplete = function(event) {
        var src = event.target.getItem().src;
        this._audioSources[src] = event.result;
        for (var i = 0, l = this._soundInstances[src].length; i < l; i++) {
            var item = this._soundInstances[src][i];
            item.setPlaybackResource(this._audioSources[src]);
        }
    };
    p._handlePreloadError = function(event) {};
    p._updateVolume = function() {};
    createjs.AbstractPlugin = AbstractPlugin;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function Loader(loadItem) {
        this.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.SOUND);
    };
    var p = createjs.extend(Loader, createjs.AbstractLoader);
    Loader.context = null;
    p.toString = function() {
        return "[WebAudioLoader]";
    };
    p._createRequest = function() {
        this._request = new createjs.XHRRequest(this._item, false);
        this._request.setResponseType("arraybuffer");
    };
    p._sendComplete = function(event) {
        Loader.context.decodeAudioData(this._rawResult, createjs.proxy(this._handleAudioDecoded, this), createjs.proxy(this._handleError, this));
    };
    p._handleAudioDecoded = function(decodedAudio) {
        this._result = decodedAudio;
        this.AbstractLoader__sendComplete();
    };
    createjs.WebAudioLoader = createjs.promote(Loader, "AbstractLoader");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function WebAudioSoundInstance(src, startTime, duration, playbackResource) {
        this.AbstractSoundInstance_constructor(src, startTime, duration, playbackResource);
        this.gainNode = s.context.createGain();
        this.panNode = s.context.createPanner();
        this.panNode.panningModel = s._panningModel;
        this.panNode.connect(this.gainNode);
        this.sourceNode = null;
        this._soundCompleteTimeout = null;
        this._sourceNodeNext = null;
        this._playbackStartTime = 0;
        this._endedHandler = createjs.proxy(this._handleSoundComplete, this);
    };
    var p = createjs.extend(WebAudioSoundInstance, createjs.AbstractSoundInstance);
    var s = WebAudioSoundInstance;
    s.context = null;
    s.destinationNode = null;
    s._panningModel = "equalpower";
    p.destroy = function() {
        this.AbstractSoundInstance_destroy();
        this.panNode.disconnect(0);
        this.panNode = null;
        this.gainNode.disconnect(0);
        this.gainNode = null;
    };
    p.toString = function() {
        return "[WebAudioSoundInstance]";
    };
    p._updatePan = function() {
        this.panNode.setPosition(this._pan, 0, -0.5);
    };
    p._removeLooping = function() {
        this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);
    };
    p._addLooping = function() {
        if (this.playState != createjs.Sound.PLAY_SUCCEEDED) {
            return;
        }
        this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);
    };
    p._setDurationFromSource = function() {
        this._duration = this.playbackResource.duration * 1000;
    };
    p._handleCleanUp = function() {
        if (this.sourceNode && this.playState == createjs.Sound.PLAY_SUCCEEDED) {
            this.sourceNode = this._cleanUpAudioNode(this.sourceNode);
            this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);
        }
        if (this.gainNode.numberOfOutputs != 0) {
            this.gainNode.disconnect(0);
        }
        clearTimeout(this._soundCompleteTimeout);
        this._playbackStartTime = 0;
    };
    p._cleanUpAudioNode = function(audioNode) {
        if (audioNode) {
            audioNode.stop(0);
            audioNode.disconnect(0);
            audioNode = null;
        }
        return audioNode;
    };
    p._handleSoundReady = function(event) {
        this.gainNode.connect(s.destinationNode);
        var dur = this._duration * 0.001;
        var pos = this._position * 0.001;
        this.sourceNode = this._createAndPlayAudioNode((s.context.currentTime - dur), pos);
        this._playbackStartTime = this.sourceNode.startTime - pos;
        this._soundCompleteTimeout = setTimeout(this._endedHandler, (dur - pos) * 1000);
        if (this._loop != 0) {
            this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);
        }
    };
    p._createAndPlayAudioNode = function(startTime, offset) {
        var audioNode = s.context.createBufferSource();
        audioNode.buffer = this.playbackResource;
        audioNode.connect(this.panNode);
        var dur = this._duration * 0.001;
        audioNode.startTime = startTime + dur;
        audioNode.start(audioNode.startTime, offset + (this._startTime * 0.001), dur - offset);
        return audioNode;
    };
    p._pause = function() {
        this._position = (s.context.currentTime - this._playbackStartTime) * 1000;
        this.sourceNode = this._cleanUpAudioNode(this.sourceNode);
        this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);
        if (this.gainNode.numberOfOutputs != 0) {
            this.gainNode.disconnect(0);
        }
        clearTimeout(this._soundCompleteTimeout);
    };
    p._resume = function() {
        this._handleSoundReady();
    };
    p._updateVolume = function() {
        var newVolume = this._muted ? 0 : this._volume;
        if (newVolume != this.gainNode.gain.value) {
            this.gainNode.gain.value = newVolume;
        }
    };
    p._calculateCurrentPosition = function() {
        return ((s.context.currentTime - this._playbackStartTime) * 1000);
    };
    p._updatePosition = function() {
        this.sourceNode = this._cleanUpAudioNode(this.sourceNode);
        this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);
        clearTimeout(this._soundCompleteTimeout);
        if (!this._paused) {
            this._handleSoundReady();
        }
    };
    p._handleLoop = function() {
        this._cleanUpAudioNode(this.sourceNode);
        this.sourceNode = this._sourceNodeNext;
        this._playbackStartTime = this.sourceNode.startTime;
        this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);
        this._soundCompleteTimeout = setTimeout(this._endedHandler, this._duration);
    };
    p._updateDuration = function() {
        this._pause();
        this._resume();
    };
    createjs.WebAudioSoundInstance = createjs.promote(WebAudioSoundInstance, "AbstractSoundInstance");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function WebAudioPlugin() {
        this.AbstractPlugin_constructor();
        this._panningModel = s._panningModel;;
        this._volume = 1;
        this.context = s.context;
        this.dynamicsCompressorNode = this.context.createDynamicsCompressor();
        this.dynamicsCompressorNode.connect(this.context.destination);
        this.gainNode = this.context.createGain();
        this.gainNode.connect(this.dynamicsCompressorNode);
        createjs.WebAudioSoundInstance.destinationNode = this.gainNode;
        this._capabilities = s._capabilities;
        this._loaderClass = createjs.WebAudioLoader;
        this._soundInstanceClass = createjs.WebAudioSoundInstance;
        this._addPropsToClasses();
    }
    var p = createjs.extend(WebAudioPlugin, createjs.AbstractPlugin);
    var s = WebAudioPlugin;
    s._capabilities = null;
    s._panningModel = "equalpower";
    s.context = null;
    s.isSupported = function() {
        var isMobilePhoneGap = createjs.BrowserDetect.isIOS || createjs.BrowserDetect.isAndroid || createjs.BrowserDetect.isBlackberry;
        if (location.protocol == "file:" && !isMobilePhoneGap && !this._isFileXHRSupported()) {
            return false;
        }
        s._generateCapabilities();
        if (s.context == null) {
            return false;
        }
        return true;
    };
    s.playEmptySound = function() {
        var source = s.context.createBufferSource();
        source.buffer = s.context.createBuffer(1, 1, 22050);
        source.connect(s.context.destination);
        source.start(0, 0, 0);
    };
    s._isFileXHRSupported = function() {
        var supported = true;
        var xhr = new XMLHttpRequest();
        try {
            xhr.open("GET", "WebAudioPluginTest.fail", false);
        } catch (error) {
            supported = false;
            return supported;
        }
        xhr.onerror = function() {
            supported = false;
        };
        xhr.onload = function() {
            supported = this.status == 404 || (this.status == 200 || (this.status == 0 && this.response != ""));
        };
        try {
            xhr.send();
        } catch (error) {
            supported = false;
        }
        return supported;
    };
    s._generateCapabilities = function() {
        if (s._capabilities != null) {
            return;
        }
        var t = document.createElement("audio");
        if (t.canPlayType == null) {
            return null;
        }
        if (s.context == null) {
            if (window.AudioContext) {
                s.context = new AudioContext();
            } else if (window.webkitAudioContext) {
                s.context = new webkitAudioContext();
            } else {
                return null;
            }
        }
        s._compatibilitySetUp();
        s.playEmptySound();
        s._capabilities = {
            panning: true,
            volume: true,
            tracks: -1
        };
        var supportedExtensions = createjs.Sound.SUPPORTED_EXTENSIONS;
        var extensionMap = createjs.Sound.EXTENSION_MAP;
        for (var i = 0, l = supportedExtensions.length; i < l; i++) {
            var ext = supportedExtensions[i];
            var playType = extensionMap[ext] || ext;
            s._capabilities[ext] = (t.canPlayType("audio/" + ext) != "no" && t.canPlayType("audio/" + ext) != "") || (t.canPlayType("audio/" + playType) != "no" && t.canPlayType("audio/" + playType) != "");
        }
        if (s.context.destination.numberOfChannels < 2) {
            s._capabilities.panning = false;
        }
    };
    s._compatibilitySetUp = function() {
        s._panningModel = "equalpower";
        if (s.context.createGain) {
            return;
        }
        s.context.createGain = s.context.createGainNode;
        var audioNode = s.context.createBufferSource();
        audioNode.__proto__.start = audioNode.__proto__.noteGrainOn;
        audioNode.__proto__.stop = audioNode.__proto__.noteOff;
        s._panningModel = 0;
    };
    p.toString = function() {
        return "[WebAudioPlugin]";
    };
    p._addPropsToClasses = function() {
        var c = this._soundInstanceClass;
        c.context = this.context;
        c.destinationNode = this.gainNode;
        c._panningModel = this._panningModel;
        this._loaderClass.context = this.context;
    };
    p._updateVolume = function() {
        var newVolume = createjs.Sound._masterMute ? 0 : this._volume;
        if (newVolume != this.gainNode.gain.value) {
            this.gainNode.gain.value = newVolume;
        }
    };
    createjs.WebAudioPlugin = createjs.promote(WebAudioPlugin, "AbstractPlugin");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function TagPool(src) {
        this.src = src;
        this.length = 0;
        this.available = 0;
        this.tags = [];
        this.duration = 0;
    };
    var p = TagPool.prototype;
    p.constructor = TagPool;
    var s = TagPool;
    s.tags = {};
    s.get = function(src) {
        var channel = s.tags[src];
        if (channel == null) {
            channel = s.tags[src] = new TagPool(src);
        }
        return channel;
    };
    s.remove = function(src) {
        var channel = s.tags[src];
        if (channel == null) {
            return false;
        }
        channel.removeAll();
        delete(s.tags[src]);
        return true;
    };
    s.getInstance = function(src) {
        var channel = s.tags[src];
        if (channel == null) {
            return null;
        }
        return channel.get();
    };
    s.setInstance = function(src, tag) {
        var channel = s.tags[src];
        if (channel == null) {
            return null;
        }
        return channel.set(tag);
    };
    s.getDuration = function(src) {
        var channel = s.tags[src];
        if (channel == null) {
            return 0;
        }
        return channel.getDuration();
    };
    p.add = function(tag) {
        this.tags.push(tag);
        this.length++;
        this.available++;
    };
    p.removeAll = function() {
        var tag;
        while (this.length--) {
            tag = this.tags[this.length];
            if (tag.parentNode) {
                tag.parentNode.removeChild(tag);
            }
            delete(this.tags[this.length]);
        }
        this.src = null;
        this.tags.length = 0;
    };
    p.get = function() {
        if (this.tags.length == 0) {
            return null;
        }
        this.available = this.tags.length;
        var tag = this.tags.pop();
        if (tag.parentNode == null) {
            document.body.appendChild(tag);
        }
        return tag;
    };
    p.set = function(tag) {
        var index = createjs.indexOf(this.tags, tag);
        if (index == -1) {
            this.tags.push(tag);
        }
        this.available = this.tags.length;
    };
    p.getDuration = function() {
        if (!this.duration) {
            this.duration = this.tags[this.tags.length - 1].duration * 1000;
        }
        return this.duration;
    };
    p.toString = function() {
        return "[HTMLAudioTagPool]";
    };
    createjs.HTMLAudioTagPool = TagPool;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function HTMLAudioSoundInstance(src, startTime, duration, playbackResource) {
        this.AbstractSoundInstance_constructor(src, startTime, duration, playbackResource);
        this._audioSpriteStopTime = null;
        this._delayTimeoutId = null;
        this._endedHandler = createjs.proxy(this._handleSoundComplete, this);
        this._readyHandler = createjs.proxy(this._handleTagReady, this);
        this._stalledHandler = createjs.proxy(this.playFailed, this);
        this._audioSpriteEndHandler = createjs.proxy(this._handleAudioSpriteLoop, this);
        this._loopHandler = createjs.proxy(this._handleSoundComplete, this);
        if (duration) {
            this._audioSpriteStopTime = (startTime + duration) * 0.001;
        } else {
            this._duration = createjs.HTMLAudioTagPool.getDuration(this.src);
        }
    }
    var p = createjs.extend(HTMLAudioSoundInstance, createjs.AbstractSoundInstance);
    p.setMasterVolume = function(value) {
        this._updateVolume();
    };
    p.setMasterMute = function(isMuted) {
        this._updateVolume();
    };
    p.toString = function() {
        return "[HTMLAudioSoundInstance]";
    };
    p._removeLooping = function() {
        if (this._playbackResource == null) {
            return;
        }
        this._playbackResource.loop = false;
        this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
    };
    p._addLooping = function() {
        if (this._playbackResource == null || this._audioSpriteStopTime) {
            return;
        }
        this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
        this._playbackResource.loop = true;
    };
    p._handleCleanUp = function() {
        var tag = this._playbackResource;
        if (tag != null) {
            tag.pause();
            tag.loop = false;
            tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);
            tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);
            tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);
            tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
            tag.removeEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);
            try {
                tag.currentTime = this._startTime;
            } catch (e) {}
            createjs.HTMLAudioTagPool.setInstance(this.src, tag);
            this._playbackResource = null;
        }
    };
    p._beginPlaying = function(offset, loop, volume, pan) {
        this._playbackResource = createjs.HTMLAudioTagPool.getInstance(this.src);
        return this.AbstractSoundInstance__beginPlaying(offset, loop, volume, pan);
    };
    p._handleSoundReady = function(event) {
        if (this._playbackResource.readyState !== 4) {
            var tag = this._playbackResource;
            tag.addEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);
            tag.addEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);
            tag.preload = "auto";
            tag.load();
            return;
        }
        this._updateVolume();
        this._playbackResource.currentTime = (this._startTime + this._position) * 0.001;
        if (this._audioSpriteStopTime) {
            this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);
        } else {
            this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);
            if (this._loop != 0) {
                this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
                this._playbackResource.loop = true;
            }
        }
        this._playbackResource.play();
    };
    p._handleTagReady = function(event) {
        this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);
        this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);
        this._handleSoundReady();
    };
    p._pause = function() {
        this._playbackResource.pause();
    };
    p._resume = function() {
        this._playbackResource.play();
    };
    p._updateVolume = function() {
        if (this._playbackResource != null) {
            var newVolume = (this._muted || createjs.Sound._masterMute) ? 0 : this._volume * createjs.Sound._masterVolume;
            if (newVolume != this._playbackResource.volume) {
                this._playbackResource.volume = newVolume;
            }
        }
    };
    p._calculateCurrentPosition = function() {
        return (this._playbackResource.currentTime * 1000) - this._startTime;
    };
    p._updatePosition = function() {
        this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
        this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._handleSetPositionSeek, false);
        try {
            this._playbackResource.currentTime = (this._position + this._startTime) * 0.001;
        } catch (error) {
            this._handleSetPositionSeek(null);
        }
    };
    p._handleSetPositionSeek = function(event) {
        if (this._playbackResource == null) {
            return;
        }
        this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._handleSetPositionSeek, false);
        this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
    };
    p._handleAudioSpriteLoop = function(event) {
        if (this._playbackResource.currentTime <= this._audioSpriteStopTime) {
            return;
        }
        this._playbackResource.pause();
        if (this._loop == 0) {
            this._handleSoundComplete(null);
        } else {
            this._position = 0;
            this._loop--;
            this._playbackResource.currentTime = this._startTime * 0.001;
            if (!this._paused) {
                this._playbackResource.play();
            }
            this._sendEvent("loop");
        }
    };
    p._handleLoop = function(event) {
        if (this._loop == 0) {
            this._playbackResource.loop = false;
            this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
        }
    };
    p._updateDuration = function() {
        this._audioSpriteStopTime = (startTime + duration) * 0.001;
        if (this.playState == createjs.Sound.PLAY_SUCCEEDED) {
            this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);
            this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);
        }
    };
    createjs.HTMLAudioSoundInstance = createjs.promote(HTMLAudioSoundInstance, "AbstractSoundInstance");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function HTMLAudioPlugin() {
        this.AbstractPlugin_constructor();
        this.defaultNumChannels = 2;
        this._capabilities = s._capabilities;
        this._loaderClass = createjs.SoundLoader;
        this._soundInstanceClass = createjs.HTMLAudioSoundInstance;
    }
    var p = createjs.extend(HTMLAudioPlugin, createjs.AbstractPlugin);
    var s = HTMLAudioPlugin;
    s.MAX_INSTANCES = 30;
    s._AUDIO_READY = "canplaythrough";
    s._AUDIO_ENDED = "ended";
    s._AUDIO_SEEKED = "seeked";
    s._AUDIO_STALLED = "stalled";
    s._TIME_UPDATE = "timeupdate";
    s._capabilities = null;
    s.enableIOS = false;
    s.isSupported = function() {
        s._generateCapabilities();
        if (s._capabilities == null) {
            return false;
        }
        return true;
    };
    s._generateCapabilities = function() {
        if (s._capabilities != null) {
            return;
        }
        var t = document.createElement("audio");
        if (t.canPlayType == null) {
            return null;
        }
        s._capabilities = {
            panning: true,
            volume: true,
            tracks: -1
        };
        var supportedExtensions = createjs.Sound.SUPPORTED_EXTENSIONS;
        var extensionMap = createjs.Sound.EXTENSION_MAP;
        for (var i = 0, l = supportedExtensions.length; i < l; i++) {
            var ext = supportedExtensions[i];
            var playType = extensionMap[ext] || ext;
            s._capabilities[ext] = (t.canPlayType("audio/" + ext) != "no" && t.canPlayType("audio/" + ext) != "") || (t.canPlayType("audio/" + playType) != "no" && t.canPlayType("audio/" + playType) != "");
        }
    };
    p.register = function(loadItem, instances) {
        var channel = createjs.HTMLAudioTagPool.get(loadItem.src);
        var tag = null;
        for (var i = 0; i < instances; i++) {
            tag = this._createTag(loadItem.src);
            channel.add(tag);
        }
        var loader = this.AbstractPlugin_register(loadItem, instances);
        loader.setTag(tag);
        return loader;
    };
    p.removeSound = function(src) {
        this.AbstractPlugin_removeSound(src);
        createjs.HTMLAudioTagPool.remove(src);
    };
    p.create = function(src, startTime, duration) {
        var si = this.AbstractPlugin_create(src, startTime, duration);
        si.setPlaybackResource(null);
        return si;
    };
    p.toString = function() {
        return "[HTMLAudioPlugin]";
    };
    p.setVolume = p.getVolume = p.setMute = null;
    p._createTag = function(src) {
        var tag = document.createElement("audio");
        tag.autoplay = false;
        tag.preload = "none";
        tag.src = src;
        return tag;
    };
    createjs.HTMLAudioPlugin = createjs.promote(HTMLAudioPlugin, "AbstractPlugin");
}());
GodStep.Preloader = function(soul) {
    this.preloadState = 0;
    GodStep.Preloader.textures = [];
    this.startS = soul.startS;
    this.soul = soul;
    this.isAudioTag = soul.AUDIOTAG;
    this.isOnlyOneView = true;
    GodStep.Frame.call(this, 'Preloader', soul.W, soul.H);
    PIXI.EventTarget.call(this);
};
extend(GodStep.Preloader, GodStep.Frame);
GodStep.ASSETS_LOADED = 'assets loaded';
GodStep.SOUNDS_LOADED = 'sounds loaded';
pro.loadAll = function(pathImages, pngs, jpgs, pathSounds, sounds, assets) {
    this.textures = [];
    this.pathImages = pathImages;
    var i, img;
    this.images = pngs;
    this.assets = assets;
    this.exts = [];
    for (i = 0; i < this.images.length; i++) {
        this.exts.push('.png');
    }
    for (i = 0; i < jpgs.length; i++) {
        this.images.push(jpgs[i]);
        this.exts.push('.jpg');
    }
    this.imagesCount = this.images.length;
    if (this.images.length > 0) {
        img = GodStep.Image.fromImage(this.pathImages + this.images[0] + this.exts[0]);
        img.p = this;
        img.texName = this.images[0];
        this.textures[img.texName] = img.texture;
    }
    this.initSounds(pathSounds, sounds);
    this.soundsCount = sounds.length;
    if (this.images.length == 0) {
        this.isImagesComplete = true;
        this.loadSounds();
    }
};
pro.trace = function(v) {
    trace(v);
};
pro.initSounds = function(soundPath, arr) {
    this.trace('init sounds');
    GodStep.Game.instance.sound = {};
    var sounds = [];
    var isLoop = false;
    for (var i = 0; i < arr.length; i++) {
        var name = arr[i];
        isLoop = false;
        if (name.length > 4) {
            if (name.substr(0, 4) == 'loop') {
                isLoop = true;
                name = name.substr(5, name.length - 5);
            }
        }
        sounds.push({
            src: name,
            id: name,
            loop: isLoop
        });
    }
    this.soundPath = soundPath;
    GodStep.Game.instance.sound.needLoaded = this.needLoaded = this.sounds = sounds;
};
pro.loadSound = function(url, vol, loop) {
    var audio = new Audio();
    if (loop) {
        audio.addEventListener('ended', function() {
            audio.currentTime = 0;
            audio.play();
        }, false);
    }
    this.sounds.push(audio);
    audio.src = url;
    audio.preload = "auto";
    audio.volume = vol;
    audio.preloader = this;
    audio.onloadeddata = this.launchApp;
    audio.load();
    return audio;
};
pro.launchApp = function(launch) {
    var preloader = this.preloader;
    preloader.audio_preload++;
    if (preloader.audio_preload == preloader.needLoaded.length || launch == 1) {
        preloader.startSounds();
    } else {
        preloader.loadSound(GodPath + preloader.soundPath + preloader.needLoaded[preloader.audio_preload].src + "." + preloader.support.audio, 1, preloader.needLoaded[preloader.audio_preload].loop);
    }
};
pro.startSounds = function() {
    this.loadAssets();
};
pro.loadSounds = function() {
    if (this.isAudioTag) {
        this.support = {};
        this.audio_preload = 0;
        GodStep.Game.instance.sound.sounds = this.sounds = [];
        GodStep.Game.instance.sound.AVAILABLE = true;
        var a = document.createElement('audio');
        var ogg = !!(a.canPlayType && a.canPlayType('audio/ogg; codecs="vorbis"').replace(/no/, ''));
        var mp3 = !!(a.canPlayType && a.canPlayType('audio/mpeg;').replace(/no/, ''));
        if (ogg) {
            trace('ogg');
            this.support.audio = 'ogg';
        } else
        if (mp3) {
            trace('mp3');
            this.support.audio = 'mp3';
        } else {
            trace('no sound supported');
            this.support.audio = 'no';
            GodStep.Game.instance.sound.AVAILABLE = false;
            this.startSounds();
            return 0;
        }
        this.loadSound(GodPath + this.soundPath + this.needLoaded[0].src + "." + this.support.audio, 1, this.needLoaded[0].loop);
    } else {
        this.trace('loadSounds');
        var sound = GodStep.Game.instance.sound = {
            preloader: this
        };
        sound.AVAILABLE = true;
        if (window['createjs']) {
            if (createjs.BrowserDetect.isIOS || createjs.BrowserDetect.isAndroid || createjs.BrowserDetect.isBlackberry) {
                this.ISMOBILE = true;
            }
        } else {
            sound.AVAILABLE = false;
            GodStep.Game.instance.sound = {};
            this.loadAssets();
            return;
        }
        if (sound.AVAILABLE) {}
        if (!this.soul.isNativeAndroid) {
            if (!createjs.Sound.initializeDefaultPlugins()) {
                sound.AVAILABLE = false;
                this.loadAssets();
                return;
            }
            if (sound.AVAILABLE) {
                for (var i = 0; i < this.sounds.length; i++) {
                    this.sounds[i].src += '.ogg';
                }
                createjs.Sound.alternateExtensions = ["mp3"];
                createjs.Sound.addEventListener("fileload", this.h_loadedSound);
                sound.countLoaded = this.sounds.length;
                createjs.Sound.addEventListener("fileload", createjs.proxy(this.h_loadedSound, this));
                createjs.Sound.registerSounds(this.sounds, GodPath + this.soundPath);
            } else {
                GodStep.Game.instance.sound = {};
                this.loadAssets();
            }
        } else {
            sound.AVAILABLE = false;
            GodStep.Game.instance.sound = {};
            this.loadAssets();
        }
    }
};
pro.update = function() {
    if (!this.isImagesComplete) {
        var img;
        if (this.images) {
            for (var im in this.images) {
                var tex = this.textures[this.images[im]];
                if (tex) {
                    if (tex.baseTexture.hasLoaded) {
                        this.exts.splice(this.images.indexOf(this.images[im]), 1);
                        this.images.splice(this.images.indexOf(this.images[im]), 1);
                        if (this.images.length > 0) {
                            img = GodStep.Image.fromImage(this.pathImages + this.images[0] + this.exts[0]);
                            img.p = this;
                            img.texName = this.images[0];
                            this.textures[img.texName] = img.texture;
                        }
                        if (this.images.length > 0) {
                            for (var i = 0; i < 10; i++) {
                                if (this.images[i]) {
                                    img = GodStep.Image.fromImage(this.pathImages + this.images[i] + this.exts[i]);
                                    img.p = this;
                                    img.texName = this.images[i];
                                    this.textures[img.texName] = img.texture;
                                }
                            }
                        }
                    }
                }
            }
            if (this.images.length == 0) {
                this.isImagesComplete = true;
                GodStep.textures = this.textures;
                this.loadSounds();
            }
        }
    }
};
pro.loadAssets = function() {
    this.trace('loading assets');
    if (this.assets) {
        var assetsToLoader;
        if (window['GodAssetsPath'] != undefined) {
            assetsToLoader = [window['GodAssetsPath'] + this.assets[0]];
        } else {
            assetsToLoader = [this.pathImages + this.assets[0]];
        }
        var loader;
        if (this.fontLoaderClass) {
            loader = new this.fontLoaderClass(assetsToLoader);
            dispatch(this, GodStep.ASSETS_LOADED);
        } else {
            loader = new PIXI.AssetLoader(assetsToLoader);
            loader.onComplete = this.h_loadedAssets;
            loader.preloader = this;
            loader.load();
        }
    } else {
        dispatch(this, GodStep.ASSETS_LOADED);
    }
};
pro.h_loadedSound = function(e) {
    var sound = GodStep.Game.instance.sound;
    this.trace('sound loaded ' + sound.countLoaded);
    sound.countLoaded--;
    if (sound.countLoaded == 0) {
        sound.preloader.loadAssets();
    }
};
pro.h_loadedAssets = function(e) {
    this.preloader.trace('sound game');
    dispatch(this.preloader, GodStep.ASSETS_LOADED);
};
GodStep.Text = function(t, size, font, align, color) {
    this.font = font || 'Arial';
    this.size = size || 15;
    this.align = (align || "center");
    PIXI.Text.call(this, t, {
        font: this.size + "px " + this.font,
        align: this.align,
        fill: (color) ? ('#' + color.toString(16)) : '#000000'
    });
};
extend(GodStep.Text, PIXI.Text);
pro.place = function(x, y) {
    this.x = x;
    this.y = y;
};
pro.centerX = function(w, y) {
    this.y = y;
    this.x = w / 2 - this.width / 2;
};
pro.setColor = function(color) {
    this.style.fill = '#' + color.toString(16);
};
pro.setFont = function(font) {
    this.font = font;
    this.style.font = this.size + 'px ' + this.font;
    this.updateText();
};
pro.setSize = function(size) {
    this.size = size;
    this.style.font = this.size + 'px ' + this.font;
    this.updateText();
};
GodStep.FPS = function(soul, color) {
    GodStep.Frame.call(this, 'FPS', soul.W, soul.H);
    this.addChild(this.text = new GodStep.Text('0', 30, 'Arial', 'left', color || 0x000000));
    this.startTime = Date.now();
    this.soul = soul;
    this.prevTime = this.startTime;
    this.msMin = Infinity;
    this.msMax = 0;
    this.fpsMin = Infinity;
    this.fpsMax = 0;
    this.frames = 0;
    this.lastValue = 0;
};
extend(GodStep.FPS, GodStep.Frame);
pro.addString = function(v) {
    this.plusString = v;
};
pro.end = function() {
    var time = Date.now();
    var ms = time - this.startTime;
    this.msMin = Math.min(this.msMin, ms);
    this.msMax = Math.max(this.msMax, ms);
    if (time > this.prevTime + 100) {
        var fps = Math.round((this.frames * 1000) / (time - this.prevTime));
        this.lastValue += (fps - this.lastValue) * .3;
        this.fpsMin = Math.min(this.fpsMin, this.lastValue);
        this.fpsMax = Math.max(this.fpsMax, this.lastValue);
        this.text.setText(Math.round(this.lastValue) + " " + this.plusString);
        this.prevTime = time;
        this.frames = 0;
    }
    this.frames++;
    this.y = 0;
};
pro.begin = function() {
    this.startTime = Date.now();
};
GodStep.LocalStorage = function() {
    GodStep.LocalStorage.instance = this;
    try {
        if ('localStorage' in window && window['localStorage'] !== null) {
            this.storage = window['localStorage'];
            window.addEventListener("storage", this.h_storage, false);
            this.isAvailable = true;
        }
    } catch (e) {
        this.isAvailable = false;
    }
};
extend(GodStep.LocalStorage, Object);
pro.getData = function(slot) {
    if (!this.isAvailable) {
        return null;
    }
    var data = this.storage.getItem(slot || "data");
    if (data != null) return JSON.parse(data);
    else {
        trace('no data');
        return null;
    }
};
pro.setData = function(data, slot) {
    if (!this.isAvailable) return;
    var d = JSON.stringify(data);
    trace('local storage [' + (slot || 'data') + ']');
    trace(d);
    try {
        this.storage.setItem(slot || "data", d);
    } catch (e) {
        trace('LOCAL STORAGE ERROR');
    }
};
GodStep.Clear = function(slot) {
    GodStep.LocalStorage.instance.setData(null, slot);
};
GodStep.SaveLocal = function(data, slot) {
    GodStep.LocalStorage.instance.setData(data, slot);
};
GodStep.LoadText = function(text) {
    return JSON.parse(text);
};
GodStep.LoadLocal = function(slot) {
    return GodStep.LocalStorage.instance.getData(slot);
};
pro.h_storage = function(e) {
    trace('storage' + e);
};
Games.Img = function(name, scale, px, py, anchor) {
    GodStep.Image.call(this, GodStep.textures[name]);
    this.Scale = scale;
    if (anchor == 0.5) {
        this.anchor = new PIXI.Point(.5, .5);
    } else {
        if (anchor) {
            this.anchor = anchor;
        }
    }
    this.place(px, py);
};
extend(Games.Img, GodStep.Image);
pro.setTextureByName = function(name) {
    this.setTexture(GodStep.textures[name]);
};
Games.ImgButton = function(img, parent, scaleS, px, py) {
    var tex = GodStep.textures[img];
    var startS = scaleS;
    GodStep.Frame.call(this, null, tex.width * startS, tex.height * startS);
    GodStep.IOverOut.call(this, this.W, this.H);
    GodStep.IDownUp.call(this, this.W, this.H);
    this.addChild(this.img = new GodStep.Image(tex));
    this.img.Scale = startS;
    this.img.anchor = new PIXI.Point(0.5, 0.5);
    this.setHitArea(-this.W / 2, -this.H / 2, this.W, this.H);
    this.isCheched = false;
    this.downScale = .9;
    this.place(px, py);
    addEvent(this, GodStep.FRAME_DOWN, this.h_mouse);
    addEvent(this, GodStep.FRAME_OUT, this.h_mouse);
    addEvent(this, GodStep.FRAME_OVER, this.h_mouse);
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
};
extend(Games.ImgButton, GodStep.Frame);
Games.ImgButton.CLICK = 'clickImg';
pro.h_mouse = function(e) {
    var t = e.content.t;
    switch (e.type) {
        case GodStep.FRAME_DOWN:
            if (!this.isCheched) {
                this.Scale = this.downScale;
            }
            this.isClicked = true;
            break;
        case GodStep.FRAME_UP:
            if (this.isClicked) {
                dispatch(t, Games.ImgButton.CLICK);
            }
            this.isClicked = false;
            break;
        case GodStep.FRAME_OUT:
            this.Scale = 1;
            break;
        case GodStep.FRAME_OVER:
            if (this.isDown) {
                this.Scale = this.downScale;
            }
            break;
    }
};
Games.Cell = function(xi, yi, w, h) {
    this.xi = xi;
    this.yi = yi;
    this.guests = [];
    GodStep.Frame.call(this, 'Cell[' + xi + ", " + yi + ']', w, h);
    GodStep.IDownUp.call(this, w, h);
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
    addEvent(this, GodStep.FRAME_DOWN, this.h_mouse);
};
Games.CELL_UP = 'cellup';
Games.CELL_DOWN = 'celldown';
Games.CELL_CLICK = 'cellclick';
extend(Games.Cell, GodStep.Frame);
pro.h_mouse = function(e) {
    var t = e.target;
    switch (e.type) {
        case GodStep.FRAME_UP:
            dispatch(t, Games.CELL_UP);
            break;
        case GodStep.FRAME_DOWN:
            dispatch(t, Games.CELL_DOWN);
            break;
    }
};
GodStep.Color = function(r, g, b) {
    this.r = r || 0;
    this.g = g || 0;
    this.b = b || 0;
    this.calcHex();
};
extend(GodStep.Color, Object);
pro.add = function(a) {
    with(this) {
        r += a;
        g += a;
        b += a;
        r = Math.max(0, Math.min(r, 255));
        g = Math.max(0, Math.min(g, 255));
        b = Math.max(0, Math.min(b, 255));
    }
    return this;
};
pro.grayscale = function() {
    var gr = (this.r + this.g + this.b) / 3;
    this.r = gr;
    this.g = gr;
    this.b = gr;
    return this;
};
pro.calcHex = function() {
    var h;
    with(this) {
        h = ((r << 16) + (g << 8) + b);
    }
    this.hex = h;
    return h;
};
pro.clone = function(c) {
    return new GodStep.Color(c.r, c.g, c.b);
};
pro.mix = function(c, percent) {
    var ip = 1 - percent;
    this.r = parseInt(c.r * percent + this.r * ip);
    this.g = parseInt(c.g * percent + this.g * ip);
    this.b = parseInt(c.b * percent + this.b * ip);
};
GodStep.Color.getData = function() {
    return this.calcHex().toString(16);
};
GodStep.Color.fromHEX = function(hex) {
    return new GodStep.Color((hex >> 16) & 255, (hex >> 8) & 255, hex & 255);
};
GodStep.Color.random = function() {
    return new GodStep.Color(parseInt(Math.random() * 255), parseInt(Math.random() * 255), parseInt(Math.random() * 255))
};
Games.CellField = function(xc, yc, w, h, cellClass, startS) {
    GodStep.Frame.call(this, 'CellField', w, h);
    GodStep.IDownUp.call(this, w, h);
    this.startS = startS;
    this.cellCountX = xc;
    this.cellCountY = yc;
    this.cellClass = cellClass;
    this.addChild(this.cellContainer = new PIXI.DisplayObjectContainer());
    this.addChild(this.objectContainer = new PIXI.DisplayObjectContainer());
    this.initField();
};
extend(Games.CellField, GodStep.Frame);
pro.initField = function(countX, countY, cW, cH) {
    var row;
    this.cells = [];
    this.cellsXY = [];
    var cellW = this.cellW = cW || this.W / this.cellCountX;
    var cellH = this.cellH = cH || this.H / this.cellCountY;
    this.cellCountX = countX || this.cellCountX;
    this.cellCountY = countY || this.cellCountY;
    var maxW = 0,
        maxH = 0;
    for (var i = 0; i < this.cellCountY; i++) {
        this.cellsXY.push(row = []);
        for (var j = 0; j < this.cellCountX; j++) {
            if (this.cellClass) {
                var cell = new this.cellClass(j, i, cellW, cellH, this.startS);
                this.addCell(cell, cellW, cellH);
                maxW = Math.max(cell.x, maxW);
                maxH = Math.max(cell.y, maxH);
                addEvent(cell, Games.CELL_UP, this.h_cells);
                addEvent(cell, Games.CELL_DOWN, this.h_cells);
            }
        }
    }
};
pro.addCell = function(cell, cellW, cellH) {
    this.cells.push(cell);
    this.cellsXY[cell.yi][cell.xi] = cell;
    this.addFrame(cell, this.cellContainer);
    cell.x = cell.xi * cellW;
    cell.y = cell.yi * cellH;
};
pro.getCell = function(xi, yi) {
    return this.cells[xi + yi * this.cellCountX];
};
pro.h_cells = function(e) {
    var t = e.target;
    var p = t.parent.parent;
    switch (e.type) {
        case Games.CELL_DOWN:
            dispatch(p, Games.CELL_DOWN, t);
            break;
        case Games.CELL_UP:
            dispatch(p, Games.CELL_UP, t);
            break;
    }
};
Games.TextButton = function(text, size, color, parent, startS, px, py) {
    this.startS = startS;
    GodStep.Frame.call(this, null, 0, 0);
    this.color = color;
    this.addChild(this.back = new PIXI.Graphics());
    this.addChild(this.text = new GodStep.Text(text, size * startS * 2, 'Arial', 'left', 0xffffff));
    this.text.x = -this.text.width / 2;
    this.text.y = -this.text.height / 2;
    this.W = this.text.width * 1.5;
    this.H = this.text.height * 1.5;
    GodStep.IOverOut.call(this, this.W, this.H);
    GodStep.IDownUp.call(this, this.W, this.H);
    this.setHitArea(-this.W / 2, -this.H / 2, this.W, this.H);
    this.redraw();
    this.place(px, py);
    addEvent(this, GodStep.FRAME_DOWN, this.h_mouse);
    addEvent(this, GodStep.FRAME_OUT, this.h_mouse);
    addEvent(this, GodStep.FRAME_OVER, this.h_mouse);
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
};
extend(Games.TextButton, GodStep.Frame);
pro.destroy = function() {
    this.removeChild(this.back);
    this.removeChild(this.text);
    return this;
};
pro.redraw = function() {
    var g = this.back;
    g.clear();
    g.beginFill(this.color, 1);
    g.drawRect(-this.W / 2, -this.H / 2, this.W, this.H);
    g.endFill();
};
pro.h_mouse = function(e) {
    var t = e.content.t;
    switch (e.type) {
        case GodStep.FRAME_DOWN:
            this.Scale = .9;
            this.isClicked = true;
            break;
        case GodStep.FRAME_UP:
            if (this.isClicked) {
                dispatch(t, Games.ImgButton.CLICK);
            }
            this.isClicked = false;
            break;
        case GodStep.FRAME_OUT:
            this.Scale = 1;
            break;
        case GodStep.FRAME_OVER:
            if (this.isDown) {
                this.Scale = .9;
            }
            break;
    }
};
GodStep.Keyboard = function() {
    if (!GodStep.Keyboard.instance) {
        GodStep.Keyboard.instance = this;
        PIXI.EventTarget.call(this);
        document.addEventListener('keydown', this.h_keydown);
        document.addEventListener('keyup', this.h_keyup);
        this.keys = [];
        GodStep.KEY_CONSOLE = 192;
        GodStep.KEY_1 = 49;
        GodStep.KEY_2 = 50;
        GodStep.KEY_3 = 51;
        GodStep.KEY_4 = 52;
        GodStep.KEY_SHIFT = 16;
        GodStep.KEY_CTRL = 17;
        GodStep.KEY_ALT = 18;
        GodStep.KEY_F3 = 114;
        GodStep.KEY_W = 87;
        GodStep.KEY_A = 65;
        GodStep.KEY_S = 83;
        GodStep.KEY_D = 68;
        GodStep.KEY_LEFT = 37;
        GodStep.KEY_RIGHT = 39;
        GodStep.KEY_TOP = 38;
        GodStep.KEY_BOT = 40;
    }
};
pro = GodStep.Keyboard.prototype = Object.create(Object.prototype);
pro.h_keyup = function(e) {
    var inst = GodStep.Keyboard.instance;
    inst.keys[e.keyCode] = 0;
    GodStep.dispatch(inst, GodStep.KEYUP, e.keyCode);
};
pro.h_keydown = function(e) {
    var inst = GodStep.Keyboard.instance;
    if (!inst.keys[e.keyCode]) {
        inst.keys[e.keyCode] = 1;
        dispatch(inst, GodStep.KEYPRESS, e.keyCode);
    } else {
        inst.keys[e.keyCode]++;
        GodStep.dispatch(inst, GodStep.KEYDOWN, e.keyCode);
    }
};
GodStep.IsKeyPressed = function(key) {
    return GodStep.Keyboard.instance.keys[key];
};
Games.ImgButton = function(img, parent, scaleS, px, py) {
    var tex = GodStep.textures[img];
    var startS = scaleS;
    GodStep.Frame.call(this, null, tex.width * startS, tex.height * startS);
    GodStep.IOverOut.call(this, this.W, this.H);
    GodStep.IDownUp.call(this, this.W, this.H);
    this.addChild(this.img = new GodStep.Image(tex));
    this.img.Scale = startS;
    this.img.anchor = new PIXI.Point(0.5, 0.5);
    this.setHitArea(-this.W / 2, -this.H / 2, this.W, this.H);
    this.isCheched = false;
    this.downScale = .9;
    this.place(px, py);
    addEvent(this, GodStep.FRAME_DOWN, this.h_mouse);
    addEvent(this, GodStep.FRAME_OUT, this.h_mouse);
    addEvent(this, GodStep.FRAME_OVER, this.h_mouse);
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
};
extend(Games.ImgButton, GodStep.Frame);
Games.ImgButton.CLICK = 'clickImg';
pro.h_mouse = function(e) {
    var t = e.content.t;
    switch (e.type) {
        case GodStep.FRAME_DOWN:
            if (!this.isCheched) {
                this.Scale = this.downScale;
            }
            this.isClicked = true;
            break;
        case GodStep.FRAME_UP:
            if (this.isClicked) {
                dispatch(t, Games.ImgButton.CLICK);
            }
            this.isClicked = false;
            break;
        case GodStep.FRAME_OUT:
            this.Scale = 1;
            break;
        case GodStep.FRAME_OVER:
            if (this.isDown) {
                this.Scale = this.downScale;
            }
            break;
    }
};
Games.Transmission = function(soul, speed, color) {
    this.soul = soul;
    this.color = color || GodStep.COLOR_STAGE;
    GodStep.Frame.call(this, 'Transmission', soul.SW, soul.SH);
    this.startS = this.soul.startS;
    this.create();
    this.timerCache = -1;
    this.speed = speed || 0.1;
    this.cacheAsBitmap = true;
    this.visible = false;
    this.graphics.scale.y = this.graphics.oS = this.soul.SH / this.graphics.height;
};
extend(Games.Transmission, GodStep.Frame);
pro.create = function() {
    this.createGraphics();
    this.rect(this.W, this.H, this.color, 1, 0, 0);
};
pro.start = function(screenArr, outScreen) {
    if (!this.isStarted) {
        this.screens = screenArr;
        this.outScreen = outScreen;
        this.isStarted = true;
        this.isGoesUp = true;
        this.alpha = 0;
        this.visible = true;
    }
};
pro.update = function() {
    if (this.timerCache-- == 0) {
        this.timerCache = -1;
        var vis = this.visible;
        var a = this.alpha;
        this.cacheAsBitmap = false;
        this.visible = true;
        this.alpha = 1;
        this.cacheAsBitmap = true;
        this.visible = vis;
        this.alpha = a;
    }
    if (this.isStarted) {
        if (this.isGoesUp) {
            this.alpha += this.speed;
            if (this.alpha > 1) {
                this.alpha = 1;
                this.isGoesUp = false;
                if (this.outScreen.isOnlyOneView) {
                    this.outScreen.destrukt();
                }
                this.outScreen.visible = false;
                for (var s in this.screens) {
                    this.screens[s].init();
                }
            }
        } else {
            this.alpha -= this.speed;
            if (this.alpha <= 0) {
                this.alpha = 0;
                this.visible = false;
                this.isStarted = false;
            }
        }
    }
};
pro.reskin = function(c) {
    this.cacheAsBitmap = false;
    var vis = this.visible;
    this.visible = true;
    var a = this.alpha;
    this.alpha = 1;
    this.graphics.clear();
    this.rect(this.W, this.H, c, 1, 0, 0);
    this.cacheAsBitmap = true;
    this.visible = vis;
    this.alpha = a;
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.scale.x = this.scale.y = value;
        this.cacheAsBitmap = false;
        this.timerCache = 25;
        this.graphics.y = (this.FULLRESIZE) ? 0 : -(this.soul.OH - this.soul.H) * .5 / value;
        this.graphics.scale.y = this.graphics.oS * this.soul.OH / this.soul.H;
        this.graphics.scale.x = this.graphics.oS * (this.soul.FULLRESIZE ? (this.soul.OW / this.soul.W) : 1);
    }
});
var HTU = HTU || {};
HTU.Background = function(soul) {
    this.soul = soul;
    var s = this.startS = this.soul.startS;
    GodStep.Frame.call(this, 'Background', soul.SW, soul.SH);
    this.addChild(this.ts = new PIXI.TilingSprite(GodStep.textures['sky'], soul.SW, soul.SH));
    this.ts.tileScale.x = this.W / this.ts.texture.width;
    this.ts.tileScale.y = this.H / this.ts.texture.height;
    this.addChild(this.hills = new Games.Img('backgound_bottom', s * 2, this.W * .5, 0, new PIXI.Point(.5, 1)));
    this.addChild(this.hillsBlur = new Games.Img('backgound_bottom_blur', s * 2, this.W * .5, 0, new PIXI.Point(.5, 1)));
    this.addChild(this.rainbow = new Games.Img('rainbow_2', s * 2, this.W * .5, 0, new PIXI.Point(.5, 0)));
    this.addChild(this.rainbowBlur = new Games.Img('rainbow_blur', s * 2, this.W * .5, 0, new PIXI.Point(.5, 0)));
    this.addChild(this.substrate = new Games.Img('substrate_interface', s * 2, this.W * .5, this.H * .5, new PIXI.Point(.5, 0)));
    this.addChild(this.substrate1 = new Games.Img('substrate_interface_top', s * 2, this.W * .5, this.H * .0, new PIXI.Point(.5, 0)));
    this.visible = false;
    this.hills.y = this.hillsBlur.y = this.soul.OH;
    this.cacheAsBitmap = true;
};
extend(HTU.Background, GodStep.Frame);
pro.update = function() {
    if (this.visible) {
        if (this.timerCache-- == 0) {
            this.timerCache = -1;
            this.cacheAsBitmap = true;
        }
    }
};
pro.init = function() {
    this.visible = true;
};
pro.setState = function(v) {
    this.hills.visible = this.hillsBlur.visible = this.rainbow.visible = this.rainbowBlur.visible = this.substrate.visible = this.substrate1.visible = true;
    switch (v) {
        case 1:
            this.hillsBlur.visible = this.rainbowBlur.visible = this.substrate.visible = this.substrate1.visible = false;
            break;
        case 0:
            break;
    }
    this.cacheAsBitmap = false;
    this.timerCache = 33;
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.scale.x = this.scale.y = value;
        this.cacheAsBitmap = false;
        this.timerCache = 30;
        if (this.soul.H < this.soul.OH) {
            this.ts.y = -this.y / value;
        } else {
            this.ts.y = 0;
        }
        this.substrate.y = this.substrate1.y = this.rainbow.y = this.rainbowBlur.y = -(this.soul.OH - this.soul.H) * .5 / value;
        this.hills.y = this.hillsBlur.y = this.soul.OH / value - (this.soul.OH - this.soul.H) * .5 / value;
        this.ts.tileScale.y = this.soul.OH / this.ts.texture.height / value;
        this.ts.height = this.soul.OH / value;
        this.substrate.scale.y = this.soul.OH / this.substrate.texture.height / value * 1.2;
        this.substrate.y += (this.soul.H) * .22 / value;
    }
});
HTU.StartMenu = function(soul) {
    this.soul = soul;
    this.firstStart = true;
    GodStep.Frame.call(this, 'StartMenu', soul.SW, soul.SH);
    GodStep.IDownUp.call(this, soul.SW, soul.SH);
    var s = this.startS = soul.startS;
    this.addChild(this.logo = new Games.Img('logo', s * 2, this.W * .5, this.H * .272, .5));
    this.addChild(this.b_play = new HTU.Button('button_01', s, 18, 4, 5, this.W * .5, this.H * .67, .5));
    this.addChild(this.b_more = new HTU.Button('button_03', s, 8, 4, 2, this.W * .26, this.H * .84, .5));
    this.addChild(this.b_settings = new HTU.Button('button_04', s, 8, 4, 2, this.W * .74, this.H * .84, .5));
    addEvent(this.b_more, GodStep.FRAME_DOWN, this.h_button);
    addEvent(this.b_settings, GodStep.FRAME_DOWN, this.h_button);
    addEvent(this.b_play, GodStep.FRAME_DOWN, this.h_button);
    this.visible = false;
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
};
extend(HTU.StartMenu, GodStep.Frame);
pro.update = function() {
    if (this.visible) {
        if (this.timerCache-- == 0) {
            this.timerCache = -1;
        }
        if (this.b_settings.isPushed) {
            this.b_settings.play();
            if (this.b_settings.currentFrame == 7) {
                this.soul.screenTo([this.soul.settings], this);
                this.b_settings.isPushed = false;
                this.b_settings.setToFrame(0);
            }
        }
        if (this.b_more.isPushed) {
            this.b_more.play();
            if (this.b_more.currentFrame == 7) {
                this.b_more.isPushed = false;
                this.b_more.setToFrame(0);
            }
        }
        this.b_play.play();
        if (this.b_play.isPushed) {
            if (this.b_play.currentFrame == 1) {
                this.soul.screenTo([this.soul.gameplay], this);
                this.b_play.isPushed = false;
            }
        } else {
            if (this.b_play.currentFrame == 9) {
                this.b_play.currentFrame = -1;
            }
        }
    }
};
pro.init = function() {
    this.visible = true;
    this.soul.background.setState(1);
};
pro.h_mouse = function(e) {
    if (e.content.target) {
        var t = e.content.target;
        if (HTU.MUSIC && t.firstStart) {
            t.firstStart = false;
            createjs.Sound.stop();
            GodStep.playSound('1', null, HTU.MUSIC);
        }
    }
};
pro.h_button = function(e) {
    var t = e.target;
    var p = t.parent;
    var s = p.soul;
    switch (e.type) {
        case GodStep.FRAME_DOWN:
            switch (t) {
                case p.b_settings:
                    GodStep.playSound('button', 0, HTU.SOUND);
                    t.isPushed = true;
                    t.setToFrame(0);
                    break;
                case p.b_more:
                    GodStep.playSound('button', 0, HTU.SOUND);
                    t.isPushed = true;
                    t.setToFrame(0);
                    break;
                case p.b_play:
                    GodStep.playSound('button', 0, HTU.SOUND);
                    t.isPushed = true;
                    t.setToFrame(11);
                    break;
            }
            break;
    }
};
pro.getBounds = function() {
    return new PIXI.Rectangle(0, -this.y, this.W, this.soul.OH / this.scale.x);
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.cacheAsBitmap = false;
        this.scale.x = this.scale.y = value;
        this.timerCache = 30;
    }
});
HTU.Tutorial = function(soul) {
    this.soul = soul;
    this.isNotSlided = true;
    GodStep.Frame.call(this, 'Tutorial', soul.SW, soul.SH);
    GodStep.IDownUp.call(this, this.W, this.H);
    var s = this.startS = soul.startS;
    this.timerCache = -1;
    this.addChild(this.slide1 = new Games.Img('slide1', s * 2, this.W * .5, this.H * .5, new PIXI.Point(0.5, .65)));
    this.addChild(this.slide2 = new Games.Img('slide2', s * 2, this.W * .5, this.H * .5, new PIXI.Point(0.5, .65)));
    this.addChild(this.b_continue = new HTU.Button('button_01', s, 18, 4, 5, this.W * .5, this.H * .83, .5));
    this.slide1vis = true;
    this.slide2.alpha = 0;
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
    addEvent(this.b_continue, GodStep.FRAME_DOWN, this.h_button);
    this.visible = false;
};
extend(HTU.Tutorial, GodStep.Frame);
pro.init = function() {
    this.visible = true;
    this.soul.background.setState(0);
};
pro.update = function() {
    if (this.visible) {
        if (this.slide1vis) {
            this.slide1.alpha += (1 - this.slide1.alpha) * .1;
            this.slide2.alpha += (0 - this.slide2.alpha) * .15;
            this.slide1.x += (this.W * .5 - this.slide1.x) * .051;
            this.slide2.x += (this.W * .35 - this.slide2.x) * .1;
        } else {
            this.slide2.alpha += (1 - this.slide2.alpha) * .1;
            this.slide1.alpha += (0 - this.slide1.alpha) * .15;
            this.slide2.x += (this.W * .5 - this.slide2.x) * .051;
            this.slide1.x += (this.W * .35 - this.slide1.x) * .1;
        }
        this.b_continue.play();
        if (this.b_continue.isPushed) {
            if (this.b_continue.currentFrame == 1) {
                this.b_continue.isPushed = false;
                this.soul.screenTo([this.soul.startmenu], this);
            }
        } else {
            if (this.b_continue.currentFrame == 9) {
                this.b_continue.currentFrame = -1;
            }
        }
        if (this.timerCache-- == 0) {
            this.timerCache = -1;
        }
    }
};
pro.h_button = function(e) {
    var t = e.target;
    var p = t.parent;
    var s = p.soul;
    switch (e.type) {
        case GodStep.FRAME_DOWN:
            switch (t) {
                case p.b_continue:
                    if (t.parent.isNotSlided) {
                        t.parent.isNotSlided = false;
                        GodStep.playSound('slide', 0, HTU.SOUND);
                        GodStep.playSound('button', 0, HTU.SOUND);
                        if (t.parent.slide1vis) {
                            t.parent.slide2.alpha = 0;
                            t.parent.slide2.x = t.parent.W * .65;
                            t.parent.slide1vis = false;
                        } else {
                            t.parent.slide1.alpha = 0;
                            t.parent.slide1.x = t.parent.W * .65;
                            t.parent.slide1vis = true;
                        }
                        return;
                    }
                    GodStep.playSound('button', 0, HTU.SOUND);
                    t.isPushed = true;
                    t.setToFrame(11);
                    break;
            }
            break;
    }
};
pro.h_mouse = function(e) {
    if (e.content.target) {
        if (e.content.target.soul) {
            var t = e.content.target;
            var p = e.content.getLocalPosition(t.parent);
            if (p.y < t.H * .7) {
                GodStep.playSound('slide', 0, HTU.SOUND);
                if (t.slide1vis) {
                    t.slide2.alpha = 0;
                    t.slide2.x = t.W * .65;
                    t.slide1vis = false;
                    t.isNotSlided = false;
                } else {
                    t.slide1.alpha = 0;
                    t.slide1.x = t.W * .65;
                    t.slide1vis = true;
                }
            }
        }
    }
};
pro.getBounds = function() {
    return new PIXI.Rectangle(0, -this.y, this.W, this.soul.OH / this.scale.x);
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.scale.x = this.scale.y = value;
        this.cacheAsBitmap = false;
    }
});
HTU.Splash = function(soul) {
    GodStep.Frame.call(this, 'Splash');
    GodStep.IDownUp.call(this, soul.W, soul.H);
    this.soul = soul;
    this.timer = 70;
    this.visible = false;
    this.addChild(this.back = new Games.Img('splash', soul.startS * 1.605, soul.W / 2, soul.H * .5, 0.5));
};
extend(HTU.Splash, GodStep.Frame);
pro.update = function() {
    if (this.visible) {
        this.timer--;
        if (this.timer == 0) {
            this.soul.screenTo([this.soul.tutorial], this);
        }
    }
};
pro.init = function() {
    this.visible = true;
};
HTU.Settings = function(soul) {
    this.soul = soul;
    GodStep.Frame.call(this, 'Settings', soul.SW, soul.SH);
    GodStep.IDownUp.call(this, this.W, this.H);
    var s = this.startS = soul.startS;
    this.timerCache = -1;
    this.addChild(this.b_back = new HTU.Button('button_06', s, 8, 4, 2, this.W * .15, this.H * .13, .5));
    addEvent(this.b_back, GodStep.FRAME_DOWN, this.h_buttons);
    this.addChild(this.developed = new Games.Img('developed_by_fundemic', s * 1.5, this.W * .5, this.H * .7, .5));
    this.addChild(this.unicorn = new Games.Img('Unicorn_01', s * 1.5, this.W * .8, this.H, new PIXI.Point(.5, 1)));
    this.addChild(this.music = new Games.Img('Music', s * 1.3, this.W * .4, this.H * .35, .5));
    this.addChild(this.sound = new Games.Img('Sound', s * 1.3, this.W * .4, this.H * .5, .5));
    var ss = 1.3;
    this.addChild(this.musicb = new Games.Img('settings_03', s * ss, this.W * .7, this.H * .35, .5));
    this.addChild(this.soundb = new Games.Img('settings_03', s * ss, this.W * .7, this.H * .5, .5));
    this.addFrame(this.b_music_on = new Games.ImgButton('settings_02', this, s * ss, this.W * .7, this.H * .35));
    this.addFrame(this.b_music_off = new Games.ImgButton('settings_01', this, s * ss, this.W * .7, this.H * .35));
    this.addFrame(this.b_sound_on = new Games.ImgButton('settings_02', this, s * ss, this.W * .7, this.H * .5));
    this.addFrame(this.b_sound_off = new Games.ImgButton('settings_01', this, s * ss, this.W * .7, this.H * .5));
    addEvent(this.b_sound_off, Games.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_sound_on, Games.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_music_off, Games.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_music_on, Games.ImgButton.CLICK, this.h_buttons);
    this.b_music_off.visible = this.b_sound_off.visible = false;
    this.visible = false;
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
};
extend(HTU.Settings, GodStep.Frame);
pro.update = function() {
    if (this.visible) {
        if (this.timerCache-- == 0) {
            this.timerCache = -1;
        }
        if (this.b_back.isPushed) {
            this.b_back.play();
            if (this.b_back.currentFrame == 7) {
                this.soul.screenTo([this.soul.startmenu], this);
                this.b_back.isPushed = false;
                this.b_back.setToFrame(0);
            }
        }
    }
};
pro.init = function() {
    this.visible = true;
    this.soul.background.setState(0);
};
pro.h_mouse = function(e) {
    if (e.content.target) {
        if (e.content.target.soul) {
            var t = e.content.target;
            t.b_music_on.isDown = t.b_music_off.isDown = t.b_sound_on.isDown = t.b_sound_off.isDown = false;
            t.b_music_on.Scale = t.b_music_off.Scale = t.b_sound_on.Scale = t.b_sound_off.Scale = 1;
        }
    }
};
pro.getBounds = function() {
    return new PIXI.Rectangle(0, -this.y, this.W, this.soul.OH / this.scale.x);
};
pro.h_buttons = function(e) {
    var t = e.target;
    var p = t.parent;
    switch (e.type) {
        case Games.ImgButton.CLICK:
            switch (t) {
                case p.b_music_on:
                    HTU.MUSIC = false;
                    GodStep.playSound('button', 0, HTU.SOUND);
                    if (createjs) {
                        if (createjs.Sound) createjs.Sound.stop();
                    }
                    p.b_music_on.visible = false;
                    p.b_music_off.visible = true;
                    break;
                case p.b_music_off:
                    HTU.MUSIC = true;
                    GodStep.playSound('button', 0, HTU.SOUND);
                    GodStep.playSound('1', null, HTU.MUSIC);
                    p.b_music_on.visible = true;
                    p.b_music_off.visible = false;
                    break;
                case p.b_sound_on:
                    HTU.SOUND = false;
                    GodStep.playSound('button', 0, HTU.SOUND);
                    p.b_sound_on.visible = false;
                    p.b_sound_off.visible = true;
                    break;
                case p.b_sound_off:
                    HTU.SOUND = true;
                    GodStep.playSound('button', 0, HTU.SOUND);
                    p.b_sound_on.visible = true;
                    p.b_sound_off.visible = false;
                    break;
            }
            break;
        case GodStep.FRAME_DOWN:
            switch (t) {
                case p.b_back:
                    t.isPushed = true;
                    GodStep.playSound('button', 0, HTU.SOUND);
                    t.setToFrame(0);
                    break;
            }
            break;
    }
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.b_back.y = (this.soul.H - this.soul.OH) * .5 / value + this.soul.H * .14 / value;
        this.scale.x = this.scale.y = value;
        this.cacheAsBitmap = false;
        this.timerCache = 36;
        this.unicorn.y = this.soul.OH / value + (this.soul.H - this.soul.OH) * .5 / value;
    }
});
HTU.GamePlay = function(soul) {
    this.soul = soul;
    GodStep.Frame.call(this, 'GamePlay', soul.SW, soul.SH);
    GodStep.IDownUp.call(this, this.W, this.H);
    this.visible = false;
    var s = this.startS = this.soul.startS;
    this.addChild(this.container = new PIXI.DisplayObjectContainer());
    this.container.addChild(this.b_back = new HTU.Button('button_05', s, 8, 4, 2, this.W * .15, this.H * .13, .5));
    this.container.addChild(this.scoreLogo = new Games.Img('score_playfield', s * 1.1, this.W * .4, this.H * .05, .5));
    this.container.addChild(this.bestLogo = new Games.Img('best_playfield', s * 1.1, this.W * .7, this.H * .05, .5));
    this.container.addChild(this.scoreText = new HTU.Text('1234567890_playfield', 89, s * .8, this.W * .49, this.H * .1));
    this.container.addChild(this.bestText = new HTU.Text('1234567890_playfield', 89, s * .8, this.W * .775, this.H * .1));
    this.bestText.setText('0');
    this.scoreText.setText('0');
    this.pointsBest = 0;
    this.addFrame(this.field = new HTU.Field(this));
    this.points = 0;
    this.OW = soul.OW;
    this.OH = soul.OH;
    addEvent(this.b_back, GodStep.FRAME_DOWN, this.h_buttons);
    addEvent(this, GodStep.FRAME_MOVE, this.h_mouse);
    addEvent(this, GodStep.FRAME_DOWN, this.h_mouse);
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
    addEvent(this.field, HTU.FieldCellComplete, this.h_field);
    addEvent(this.field, HTU.FieldNoVariants, this.h_field);
    addEvent(this.field, HTU.FieldUnicornFinded, this.h_field);
};
extend(HTU.GamePlay, GodStep.Frame);
pro.getBounds = function() {
    return new PIXI.Rectangle(0, -this.y, this.W, this.soul.OH / this.scale.x);
};
pro.update = function() {
    if (this.visible) {
        if (this.overTimer-- == 0) {
            this.overTimer = -1;
            this.soul.screenTo([this.soul.gameover], this);
        }
        if (GodStep.IsKeyPressed(GodStep.KEY_W)) {
            this.swipe('top');
        }
        if (GodStep.IsKeyPressed(GodStep.KEY_A)) {
            this.swipe('left');
        }
        if (GodStep.IsKeyPressed(GodStep.KEY_S)) {
            this.swipe('bot');
        }
        if (GodStep.IsKeyPressed(GodStep.KEY_D)) {
            this.swipe('right');
        }
        if (this.isGameStarted) {
            this.field.update();
            if (this.isSwiped) {}
            if (this.b_back.isPushed) {
                this.b_back.play();
                if (this.b_back.currentFrame == 7) {
                    this.soul.screenTo([this.soul.startmenu], this);
                    this.b_back.isPushed = false;
                    this.b_back.setToFrame(0);
                }
            }
        }
    }
};
pro.init = function() {
    this.soul.background.setState(0);
    this.overTimer = -1;
    this.isFail = false;
    this.isOver = false;
    this.isWin = false;
    this.isGameStarted = true;
    this.visible = true;
    this.points = 0;
    this.scoreText.setText('0');
    this.field.init();
};
pro.swipe = function(side) {
    this.isSwiped = true;
    this.downPos = null;
    this.field.swipe(side);
};
pro.h_field = function(e) {
    var g = this.gameplay;
    var data = e.content.data;
    switch (e.type) {
        case HTU.FieldCellComplete:
            g.points += data;
            if (g.points > g.pointsBest) {
                g.pointsBest = g.points;
                g.bestText.setText(g.points + '');
            }
            g.scoreText.setText(g.points + '');
            break;
        case HTU.FieldUnicornFinded:
            g.isWin = true;
            g.overTimer = 300;
            g.isOver = true;
            trace('Win');
            GodStep.playSound('3', 0, HTU.SOUND);
            break;
        case HTU.FieldNoVariants:
            g.isOver = true;
            g.isFail = true;
            g.overTimer = 100;
            trace('No var');
            GodStep.playSound('2', 0, HTU.SOUND);
            break;
    }
};
pro.h_mouse = function(e) {
    var t = e.target;
    switch (e.type) {
        case GodStep.FRAME_MOVE:
            if (t.downPos) {
                var p = e.content.getLocalPosition(t);
                var d = 22;
                if (p.x - t.downPos.x > d) {
                    t.swipe('right');
                } else if (t.downPos.x - p.x > d) {
                    t.swipe('left');
                } else if (t.downPos.y - p.y > d) {
                    t.swipe('top');
                } else if (p.y - t.downPos.y > d) {
                    t.swipe('bot');
                }
            }
            break;
        case GodStep.FRAME_DOWN:
            if (t.isGameStarted && !t.isFail && !t.isWin) {
                t.downPos = e.content.getLocalPosition(t);
            }
            break;
        case GodStep.FRAME_UP:
            t.downPos = null;
            break;
    }
};
pro.h_buttons = function(e) {
    var t = e.target;
    var p = t.parent.parent;
    switch (e.type) {
        case GodStep.FRAME_DOWN:
            switch (t) {
                case p.b_back:
                    t.isPushed = true;
                    GodStep.playSound('button', 0, HTU.SOUND);
                    t.setToFrame(0);
                    break;
            }
            break;
    }
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.scale.x = this.scale.y = value;
        this.container.y = (this.soul.H - this.soul.OH) * .5 / value;
    }
});
HTU.Preloader = function(soul) {
    GodStep.Preloader.call(this, soul);
};
extend(HTU.Preloader, GodStep.Preloader);
pro.load = function() {
    this.addChild(this.back = GodStep.Image.fromImage(HTU.IMAGE_PATH + 'back_fundemic1.jpg', this.h_preload));
    this.addChild(this.loading = GodStep.Image.fromImage(HTU.IMAGE_PATH + 'loading.png', this.h_preload));
    this.addChild(this.logo = GodStep.Image.fromImage(HTU.IMAGE_PATH + 'fundemic_logo.png', this.h_preload));
    var countLoaded = 0;
    if (this.logo.texture.baseTexture.hasLoaded) {
        this.logo.Scale = this.startS;
        this.logo.anchor = new PIXI.Point(0.5, 0.5);
        this.logo.place(this.W / 2, this.H * .3);
        countLoaded++;
    }
    if (this.back.texture.baseTexture.hasLoaded) {
        this.back.Scale = this.startS;
        this.back.anchor = new PIXI.Point(0.5, 0.5);
        this.back.place(this.W / 2, this.H * .5);
        this.back.scale.y = this.soul.OH / this.soul.H * this.startS;
        countLoaded++;
    }
    if (this.loading.texture.baseTexture.hasLoaded) {
        this.loading.Scale = this.startS;
        this.loading.anchor = new PIXI.Point(0.5, 0.5);
        this.loading.place(this.W / 2, this.H * .7);
        var d = parseInt(this.loading.texture.height / 10);
        this.loading.texture.setFrame(new PIXI.Rectangle(0, d * (this.soul.lang.lang - 2), this.loading.texture.width, d));
        if (countLoaded == 2) {
            this.init();
        }
    }
};
pro.init = function() {
    catched(function() {
        var t = HTU.HatchTheUnicorn.instance.assets;
        GodStep.Preloader.prototype.loadAll.call(t, HTU.IMAGE_PATH, ['1234567890_playfield', 'backgound_bottom', 'backgound_bottom_blur', 'best', 'best_playfield', 'button_01', 'button_02', 'button_03', 'button_04', 'button_05', 'button_06', 'developed_by_fundemic', 'game_over', 'icon_01', 'icon_02', 'icon_03', 'icon_04', 'icon_05', 'icon_06', 'icon_07', 'icon_08', 'icon_09', 'icon_10', 'icon_11', 'light', 'logo', 'match_to_find_a_Unicorn', 'Music', 'rainbow', 'rainbow_2', 'rainbow_blur', 'score', 'score_playfield', 'settings_01', 'settings_02', 'settings_03', 'shine', 'sky', 'slide1', 'slide2', 'Sound', 'substrate_01', 'substrate_02', 'substrate_03', 'substrate_04', 'substrate_interface', 'substrate_interface_top', 'Unicorn_01', 'Unicorn_01', 'victory_logo'], [], HTU.SOUND_PATH, ['loop_1', '2', '3', 'match', 'slide', 'button'], null);
    }, 'init');
};
pro.h_preload = function(e) {
    var img = this.image;
    var p = img.parent;
    img.Scale = p.startS;
    img.anchor = new PIXI.Point(0.5, 0.5);
    p.preloadState++;
    switch (img) {
        case p.back:
            p.back.scale.y = p.soul.OH / p.soul.H * p.startS;
            p.back.place(p.W / 2, p.H * .5);
            break;
        case p.logo:
            p.logo.place(p.W / 2, p.H * .3);
            break;
        case p.loading:
            var d = parseInt(p.loading.texture.height / 10);
            p.loading.place(p.W / 2, p.H * .7);
            break;
    }
    if (p.preloadState == 2) {
        p.init();
    }
};
HTU.Transmission = function(soul) {
    this.soul = soul;
    Games.Transmission.call(this, soul, .02);
};
extend(HTU.Transmission, Games.Transmission);
pro.create = function() {
    this.addChild(this.graphics = new Games.Img('rainbow', this.soul.startS, this.W * .5, 0, new PIXI.Point(0.5, .0)));
    this.graphics.scale.x = this.W / this.graphics.texture.width;
};
pro.start = function(screenArr, outScreen) {
    if (!this.isStarted) {
        this.screens = screenArr;
        this.outScreen = outScreen;
        this.isStarted = true;
        this.isGoesUp = true;
        this.graphics.y = -(this.soul.OH - this.soul.H) * .5 - this.soul.OH * 1.3;
        this.visible = true;
    }
};
pro.update = function() {
    if (this.timerCache-- == 0) {
        this.timerCache = -1;
    }
    if (this.isStarted) {
        this.graphics.y += 100 * this.startS;
        if (this.isGoesUp) {
            if (this.graphics.y > -(this.soul.OH - this.soul.H) - this.soul.H * .1) {
                this.alpha = 1;
                this.isGoesUp = false;
                this.outScreen.visible = false;
                if (this.outScreen.isDelete) {
                    this.soul.delFrame(this.outScreen);
                }
                for (var s in this.screens) {
                    this.screens[s].init();
                }
            }
        } else {
            if (this.graphics.y > this.soul.OH * 1) {
                this.visible = false;
                this.isStarted = false;
            }
        }
    }
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.scale.x = value;
        this.cacheAsBitmap = false;
        this.timerCache = 25;
        this.graphics.scale.y = this.soul.OH / this.graphics.texture.height * 1.3;
    }
});
HTU.MovieClip = function(name, scale, framesCount, framesOnLine, framesOnColumn, px, py, anchor) {
    var tex = GodStep.textures[name];
    GodStep.Image.call(this, this.cloneTexture(tex));
    this.fcx = framesOnLine;
    this.fcy = framesOnColumn;
    this.framesCount = framesCount;
    this.Scale = this.startS = scale * 2;
    this.rect = new PIXI.Rectangle(0, 0, this.texture.width / framesOnLine, this.texture.height / framesOnColumn);
    this.texture.setFrame(this.rect);
    this.speed = .5;
    this.framePhase = 0;
    this.currentFrame = 0;
    if (anchor == 0.5) {
        this.anchor = new PIXI.Point(.5, .5);
    } else {
        if (anchor) {
            this.anchor = anchor;
        }
    }
    this.place(px, py);
};
extend(HTU.MovieClip, GodStep.Image);
pro.cloneTexture = function(tex) {
    var rt = new PIXI.RenderTexture(tex.width, tex.height);
    var s = new PIXI.Sprite(tex);
    HTU.HatchTheUnicorn.instance.stage.addChild(s);
    rt.render(s);
    HTU.HatchTheUnicorn.instance.stage.removeChild(s);
    return rt;
};
pro.setToFrame = function(frame) {
    this.currentFrame = frame;
    var fy = parseInt(this.currentFrame / this.fcx);
    var fx = this.currentFrame - fy * this.fcx;
    this.rect.x = fx * this.rect.width;
    this.rect.y = fy * this.rect.height;
    this.texture.setFrame(this.rect);
};
pro.play = function() {
    this.framePhase += this.speed;
    if (this.framePhase > 1) {
        this.framePhase = 0;
        this.currentFrame++;
        if (this.currentFrame == this.framesCount) {
            this.currentFrame = 0;
        }
        this.setToFrame(this.currentFrame);
    }
};
HTU.Field = function(gameplay) {
    this.gameplay = gameplay;
    this.soul = gameplay.soul;
    var s = this.startS = this.gameplay.startS * 1.7;
    GodStep.Frame.call(this, 'Field', this.soul.SW, this.soul.SH);
    PIXI.EventTarget.call(this);
    this.waitTimer = 0;
    this.x = this.W * .12;
    this.y = this.H * .26;
    this.cellW = this.W * .19;
    this.cells = [];
    this.addChild(this.container = new PIXI.DisplayObjectContainer());
    this.addChild(this.shine = new Games.Img('shine', s, 0, 0, .5));
    for (var i = 0; i < 4; i++) {
        var row = [];
        this.cells.push(row);
        for (var j = 0; j < 4; j++) {
            var c = new Games.Img('substrate_0' + parseInt(Math.random() * 4 + 1), s, i * this.cellW, j * this.cellW, null);
            row.push(c);
            this.container.addChild(c);
        }
    }
    this.elements = [];
    this.container.cacheAsBitmap = true;
};
extend(HTU.Field, GodStep.Frame);
HTU.FieldCellComplete = 'FCC';
HTU.FieldNoVariants = 'FNV';
HTU.FieldUnicornFinded = 'FUF';
pro.init = function() {
    this.shine.visible = false;
    this.free = [];
    this.died = [];
    this.winPos = new PIXI.Point();
    while (this.elements.length) {
        while (this.elements[0].length) {
            this.removeChild(this.elements[0][0]);
            this.elements[0].splice(0, 1);
        }
        this.elements.splice(0, 1);
    }
    for (var i = 0; i < 4; i++) {
        var row = [];
        this.elements.push(row);
        for (var j = 0; j < 4; j++) {
            var c = null;
            row.push(c);
            this.free.push({
                x: j,
                y: i,
                empty: true
            });
        }
    }
    this.waitTimer = -1;
    this.generate();
    this.generate();
};
pro.replaceFree = function(cx, cy, ncx, ncy) {
    var isNotFound = true;
    for (var i = 0; i < this.free.length; i++) {
        if (this.free[i].x == cx && this.free[i].y == cy) {
            if (ncx == null || ncy == null) {
                this.free.push({
                    x: cx,
                    y: cy,
                    empty: true
                });
            } else {
                this.free[i].x = ncx;
                this.free[i].y = ncy;
                isNotFound = false;
            }
            return;
        }
    }
    if (isNotFound) {
        this.free.push({
            x: cx,
            y: cy,
            empty: true
        });
    }
};
pro.moveCell = function(cx, cy, dx, dy) {
    var elems = this.elements;
    if (cx > 3 || cx < 0 || cy > 3 || cy < 0) return;
    var cell = elems[cy][cx];
    var nextRow = elems[cy + dy];
    var count = 0;
    if (nextRow) {
        var nextCell = nextRow[cx + dx];
        if (nextCell) {
            if (nextCell.level == cell.level) {
                if (!cell.justUpdate) {
                    nextCell.upgrade();
                    var cost = nextCell.getCost();
                    count += cost;
                    if (cost == 2048) {
                        dispatch(this, HTU.FieldUnicornFinded);
                        this.shine.visible = true;
                        this.shine.scale.x = this.shine.scale.y = 0;
                        this.winPos = nextCell;
                    }
                    cell.justDie = true;
                    this.died.push(cell);
                    cell.gradeCell = nextCell;
                    elems[cy][cx] = null;
                    this.replaceFree(cx, cy, null, null);
                    this.waitTimer = 20;
                }
            }
        } else {
            this.waitTimer = 20;
            if (cx + dx > 3 || cx + dx < 0 || cy + dy > 3 || cy + dy < 0) return count;
            elems[cy + dy][cx + dx] = cell;
            elems[cy][cx] = null;
            this.replaceFree(cx + dx, cy + dy, cx, cy);
            count += this.moveCell(cx + dx, cy + dy, dx, dy);
        }
    }
    return count;
};
pro.swipeRow = function(r, dx) {
    var row = this.elements[r];
    var i;
    var count = 0;
    if (dx > 0) {
        for (i = row.length - 2; i >= 0; i--) {
            if (row[i]) {
                count += this.moveCell(i, r, dx, 0);
            }
        }
    } else {
        for (i = 1; i < row.length; i++) {
            if (row[i]) {
                count += this.moveCell(i, r, dx, 0);
            }
        }
    }
    return count;
};
pro.swipeColumn = function(c, dy) {
    var i, elems = this.elements;
    var count = 0;
    if (dy > 0) {
        for (i = 2; i >= 0; i--) {
            if (elems[i][c]) {
                count += this.moveCell(c, i, 0, dy);
            }
        }
    } else {
        for (i = 1; i < 4; i++) {
            if (elems[i][c]) {
                count += this.moveCell(c, i, 0, dy);
            }
        }
    }
    return count;
};
pro.swipe = function(side) {
    if (this.waitTimer >= 0) return;
    var dx = 0;
    var dy = 0;
    var i;
    var count = 0;
    switch (side) {
        case 'left':
            dx = -1;
            break;
        case 'right':
            dx = +1;
            break;
        case 'top':
            dy = -1;
            break;
        case 'bot':
            dy = 1;
            break;
    }
    for (i = 0; i < 4; i++) {
        if (Math.abs(dy) > 0) {
            count += this.swipeColumn(i, dy);
        } else
        if (Math.abs(dx) > 0) {
            count += this.swipeRow(i, dx);
        }
    }
    if (count > 0) {
        GodStep.playSound('match', 0, HTU.SOUND);
    }
    dispatch(this, HTU.FieldCellComplete, count);
    if (!this.findCombinations()) {
        dispatch(this, HTU.FieldNoVariants, count);
    }
    GodStep.playSound('slide', 0, HTU.SOUND);
};
pro.generate = function() {
    if (this.free.length > 0) {
        var c = Math.min(1, this.free.length);
        for (var i = 0; i < c; i++) {
            var id = parseInt(Math.random() * this.free.length);
            var p = this.free[id];
            var cell = this.elements[p.y][p.x] = new HTU.Cell((Math.random() > .9) ? 1 : 0, this.startS, p.x * (this.cellW) + this.cellW * .05, p.y * (this.cellW) + this.cellW * .05);
            this.addChild(cell);
            this.free.splice(id, 1);
        }
    }
};
pro.findCombinations = function() {
    var left, right, top, bot, elems = this.elements;
    for (var i = 0; i < 4; i++) {
        for (var j = 0; j < 4; j++) {
            left = right = top = bot = null;
            var cell = elems[i][j];
            if (cell) {
                if (elems[i - 1]) left = elems[i - 1][j];
                if (elems[i + 1]) right = elems[i + 1][j];
                top = elems[i][j - 1];
                bot = elems[i][j + 1];
                if (left)
                    if (cell.level == left.level) {
                        return true;
                    }
                if (right)
                    if (cell.level == right.level) {
                        return true;
                    }
                if (top)
                    if (cell.level == top.level) {
                        return true;
                    }
                if (bot)
                    if (cell.level == bot.level) {
                        return true;
                    }
            } else {
                return true;
            }
        }
    }
    return false;
};
pro.update = function() {
    if (this.waitTimer-- == 0) {
        this.waitTimer = -1;
        this.generate();
    }
    if (this.shine.visible) {
        this.shine.scale.x = this.shine.scale.y += (1 - this.shine.scale.x) * .01;
        this.shine.rotation += .01;
        this.shine.x = this.winPos.x;
        this.shine.y = this.winPos.y;
    }
    var cw = this.cellW;
    var w = this.W * .03;
    var p, i, j;
    for (j = 0; j < this.died.length; j++) {
        var died = this.died[j];
        p = new PIXI.Point(died.gradeCell.x, died.gradeCell.y);
        died.x += Math.max(-w, Math.min(w, (p.x - died.x) * .4));
        died.y += Math.max(-w, Math.min(w, (p.y - died.y) * .4));
        died.alpha += (0 - died.alpha) * .1;
        if (died.alpha < 0) {
            this.died.splice(j);
            this.removeChild(died.destroy());
        }
    }
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            var cell = this.elements[i][j];
            p = new PIXI.Point(j * cw, i * cw);
            if (cell) {
                cell.move();
                cell.justUpdate = false;
                cell.x += Math.max(-w, Math.min(w, (p.x + this.cellW / 2 - cell.x) * .4));
                cell.y += Math.max(-w, Math.min(w, (p.y + this.cellW / 2 - cell.y) * .4));
            }
        }
    }
};
HTU.GameOver = function(soul) {
    this.soul = soul;
    GodStep.Frame.call(this, 'GameOver', soul.SW, soul.SH);
    GodStep.IDownUp.call(this, this.W, this.H);
    var s = this.startS = soul.startS;
    this.timerCache = -1;
    this.addChild(this.b_replay = new HTU.Button('button_02', s, 18, 4, 5, this.W * .5, this.H * .83, .5));
    this.addChild(this.b_back = new HTU.Button('button_05', s, 8, 4, 2, this.W * .15, this.H * .13, .5));
    this.addChild(this.gameover = new Games.Img('game_over', s * 1.7, this.W * .5, this.H * .25, .5));
    this.addChild(this.victory = new Games.Img('victory_logo', s * 1.3, this.W * .5, this.H * .23, .5));
    this.addChild(this.bestLogo = new Games.Img('best', s * 1.5, this.W * .3, this.H * .57, .5));
    this.addChild(this.scoreLogo = new Games.Img('score', s * 1.5, this.W * .3, this.H * .44, .5));
    this.addChild(this.bestText = new HTU.Text('1234567890_playfield', 89, s * 1.7, this.W * .85, this.H * .54));
    this.addChild(this.scoreText = new HTU.Text('1234567890_playfield', 89, s * 1.7, this.W * .85, this.H * .41));
    addEvent(this.b_back, GodStep.FRAME_DOWN, this.h_buttons);
    addEvent(this.b_replay, GodStep.FRAME_DOWN, this.h_buttons);
    this.bestText.setText('0');
    this.scoreText.setText('0');
    this.visible = false;
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
};
extend(HTU.GameOver, GodStep.Frame);
pro.update = function() {
    if (this.visible) {
        if (this.timerCache-- == 0) {
            this.timerCache = -1;
        }
        this.b_replay.play();
        if (this.b_replay.isPushed) {
            if (this.b_replay.currentFrame == 1) {
                this.soul.screenTo([this.soul.gameplay], this);
                this.b_replay.isPushed = false;
            }
        } else {
            if (this.b_replay.currentFrame == 9) {
                this.b_replay.currentFrame = -1;
            }
        }
        if (this.b_back.isPushed) {
            this.b_back.play();
            if (this.b_back.currentFrame == 7) {
                this.soul.screenTo([this.soul.startmenu], this);
                this.b_back.isPushed = false;
                this.b_back.setToFrame(0);
            }
        }
    }
};
pro.init = function() {
    this.soul.background.setState(0);
    this.visible = true;
    this.victory.visible = this.soul.gameplay.isWin;
    this.gameover.visible = !this.victory.visible;
    this.bestText.setText(this.soul.gameplay.pointsBest);
    this.scoreText.setText(this.soul.gameplay.points);
};
pro.h_mouse = function(e) {
    if (e.content.target) {
        if (e.content.target.soul) {
            var t = e.content.target;
        }
    }
};
pro.getBounds = function() {
    return new PIXI.Rectangle(0, -this.y, this.W, this.soul.OH / this.scale.x);
};
pro.h_buttons = function(e) {
    var t = e.target;
    var p = t.parent;
    switch (e.type) {
        case GodStep.FRAME_DOWN:
            switch (t) {
                case p.b_replay:
                    t.isPushed = true;
                    GodStep.playSound('button', 0, HTU.SOUND);
                    t.setToFrame(11);
                    break;
                case p.b_back:
                    t.isPushed = true;
                    GodStep.playSound('button', 0, HTU.SOUND);
                    t.setToFrame(0);
                    break;
            }
            break;
    }
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.gameover.y = (this.soul.H - this.soul.OH) * .5 / value + this.soul.H * .3 / value;
        this.b_back.y = (this.soul.H - this.soul.OH) * .5 / value + this.soul.H * .14 / value;
        this.scale.x = this.scale.y = value;
        this.cacheAsBitmap = false;
        this.timerCache = 36;
    }
});
HTU.Text = function(type, w, s, x, y) {
    GodStep.Frame.call(this, 'Text', 0, 0);
    this.textureType = type;
    this.cW = w;
    this.x = x;
    this.y = y;
    this.init(11, s, null);
};
extend(HTU.Text, GodStep.Frame);
pro.init = function(length, S, tint) {
    this.Scale = S;
    this.addChild(this.sprite = new PIXI.Sprite(new PIXI.RenderTexture(length * this.cW, 100)));
    this.addChild(this.letter = new Games.Img(this.textureType, S, 0, 0));
    if (tint) {
        this.tint = tint;
        this.sprite.tint = tint;
    }
    this.sprite.x = -this.sprite.texture.width;
};
pro.setText = function(value) {
    var tex = this.letter.texture;
    var w = this.cW;
    var h = tex.height;
    var s = value.toString();
    this.removeChild(this.sprite);
    this.addChild(this.sprite = new PIXI.Sprite(new PIXI.RenderTexture(this.sprite.texture.width, 100)));
    var ss = .65;
    this.sprite.x = -this.sprite.texture.width;
    this.sprite.texture.clear();
    this.letter.visible = true;
    for (var i = s.length - 1; i >= 0; i--) {
        var cifra = parseInt(s[i]);
        cifra -= 1;
        if (cifra == -1) cifra = 9;
        this.letter.texture.setFrame(new PIXI.Rectangle(cifra * w, 0, w, h));
        var mat = new PIXI.Matrix();
        mat.tx = this.sprite.texture.width - s.length * (w * ss) + i * (w * ss) - w * .4;
        this.sprite.texture.render(this.letter, mat);
    }
    this.letter.visible = false;
};
HTU.Cell = function(type, s, x, y) {
    if (!HTU.Cell.types) {
        HTU.Cell.types = ['icon_01', 'icon_02', 'icon_03', 'icon_04', 'icon_05', 'icon_06', 'icon_07', 'icon_08', 'icon_09', 'icon_10', 'icon_11'];
    }
    GodStep.Frame.call(this, 'Cell', 1, 1);
    this.level = type;
    this.addChild(this.img = new Games.Img(HTU.Cell.types[type], s, 0, 0, .5));
    this.x = x;
    this.y = y;
    this.scale.x = this.scale.y = 0;
    this.liveTime = 100;
    this.livePhase = 0;
    this.liveSpeed = 1;
};
extend(HTU.Cell, GodStep.Frame);
pro.getCost = function() {
    return this.resumm(2, this.level);
};
pro.resumm = function(v, i) {
    if (i == 0) {
        return v;
    } else {
        return this.resumm(v * 2, --i);
    }
};
pro.upgrade = function() {
    if (++this.level < HTU.Cell.types.length) {
        this.justUpdate = true;
        this.img.setTextureByName(HTU.Cell.types[this.level]);
        return true;
    }
    return false
};
pro.move = function() {
    this.liveTime -= 2;
    if (this.liveTime == -2) {
        this.liveTime = 0;
    }
    this.livePhase += .3 * this.liveSpeed;
    this.scale.x = this.scale.y += (1 + Math.sin(this.livePhase) * this.liveTime / 100 * .4 - this.scale.x) * .1;
};
pro.destroy = function() {
    this.removeChild(this.img);
    return this;
};
HTU.Button = function(name, scale, framesCount, framesOnLine, framesOnColumn, px, py, anchor) {
    HTU.MovieClip.call(this, name, scale, framesCount, framesOnLine, framesOnColumn, px, py, anchor);
    GodStep.IDownUp.call(this, this.rect.width, this.rect.height);
    this.hitArea = new PIXI.Rectangle(-this.rect.width / 2, -this.rect.height / 2, this.rect.width, this.rect.height)
};
extend(HTU.Button, HTU.MovieClip);
HTU.HatchTheUnicorn = function(view) {
    GodStep.Game.TRANSPARENT = true;
    HTU.HatchTheUnicorn.instance = this;
    HTU.HatchTheUnicorn.instance.PLAYER = {};
    switch (view) {
        case 'webgl':
            this.WEBGL = true;
            break;
        case 'canvas':
            this.CANVAS = true;
            break;
        case 'auto':
            break;
    }
    HTU.SOUND = HTU.MUSIC = true;
    HTU.VIEW_LOGO = HTU.Omniture || HTU.OmnitureAnalitics;
    catched(function() {
        GodStep.Game.call(HTU.HatchTheUnicorn.instance, 'HatchTheUnicorn', 0x101010, HTU.Preloader, 'htu_settings', 'htu_player', HTU.DEFAULT_SETTINGS, 'auto');
    }, 'init');
    this.MW = 1536;
    this.MH = 1854;
};
extend(HTU.HatchTheUnicorn, GodStep.Game);
HTU.Omniture = false;
HTU.OmnitureAnalitics = false;
HTU.IMAGE_PATH = GodPath  + 'src/img/';//(HTU.ClickJogos) ? 'src/hatchtheunicorn/imgPT/' : 'src/hatchtheunicorn/img/';
HTU.SOUND_PATH = GodPath + 'src/sound/';
HTU.DEFAULT_SETTINGS = '{}';
HTU.reportCorus = function(thisReport) {
    if (HTU.OmnitureAnalitics) {
        var thisGameEvent = (thisReport == 'play' || thisReport == 'replay');
        if (trackFlashEvent) {
            trackFlashEvent("Fundemic:HatchTheUnicorn", thisReport, thisGameEvent);
        }
    }
};
pro.update = function() {
    this.beginFps();
    GodStep.Mejdu.prototype.update.call(this);
    this.endFps();
};
pro.run = function() {
    catched(function() {
        var t = HTU.HatchTheUnicorn.instance;
        if (!t.isRunning) {
            trace('running');
            t.isRunning = true;
            t.keyboard = new GodStep.Keyboard();
            t.addFrame(t.background = new HTU.Background(t));
            t.addFrame(t.settings = new HTU.Settings(t));
            t.addFrame(t.tutorial = new HTU.Tutorial(t));
            t.addFrame(t.startmenu = new HTU.StartMenu(t));
            t.addFrame(t.gameplay = new HTU.GamePlay(t));
            t.addFrame(t.gameover = new HTU.GameOver(t));
            if (HTU.ClickJogos) {
                t.addFrame(t.splash = new HTU.Splash(t));
            }
            t.addFrame(t.transmission = new HTU.Transmission(t));
            t.addFrame(t.fps = new GodStep.FPS(t, 0x22aa00));
            t.fps.addString((t.CANVAS) ? 'C' : 'W');
            t.fps.visible = false;
            t.assets.isDelete = true;
            if (HTU.ClickJogos) {
                t.screenTo([t.splash, t.background], t.assets);
            } else {
                t.screenTo([t.tutorial, t.background], t.assets);
            }
            t.reposition();
            t.loadSettings();
        }
    }, 'RUN');
};
pro.reskin = function(isNight) {
    this.background.reskin(isNight);
    this.settings.reskin(isNight);
    this.startmenu.reskin(isNight);
    this.gameplay.reskin(isNight);
    this.help.reskin(isNight);
    var c = isNight ? TT.NIGHT_COLORS[0] : TT.DAY_COLORS[0];
    this.stage.setBackgroundColor(c);
    this.transmission.reskin(c);
};
pro.saveSettings = function() {
    var instance = HTU.HatchTheUnicorn.instance;
    instance.SETTINGS.skin = (instance.settings.b_night.isNight) ? 2 : 1;
    GodStep.SaveLocal(instance.SETTINGS, instance.SETTINGS_SLOT);
};
pro.loadSettings = function() {
    var instance = HTU.HatchTheUnicorn.instance;
    instance.SETTINGS = GodStep.LoadLocal(instance.SETTINGS_SLOT) || {
        tutorial: null
    };
};

function startHatchTheUnicorn(view) {
    if (!HTU.HatchTheUnicorn.instance) {
        var game = new HTU.HatchTheUnicorn('canvas');
        game.div.style.margin = '0 auto';
        game.div.style['vertical-align'] = 'middle';
        window.onresize = h_resize;
    }
}