//Mejdu FrameWork powered by PIXI
var AG = AG || {};
/*!
 SoundJS
 Visit http://createjs.com/ for documentation, updates and examples.

 Copyright (c) 2010 gskinner.com, inc.

 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software and associated documentation
 files (the "Software"), to deal in the Software without
 restriction, including without limitation the rights to use,
 copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following
 conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
*/
this.createjs = this.createjs || {};
(function() {
    var s = createjs.SoundJS = createjs.SoundJS || {};
    s.version = "NEXT";
    s.buildDate = "Thu, 11 Dec 2014 23:16:15 GMT";
})();
this.createjs = this.createjs || {};
createjs.extend = function(subclass, superclass) {
    "use strict";

    function o() {
        this.constructor = subclass;
    }
    o.prototype = superclass.prototype;
    return (subclass.prototype = new o());
};
this.createjs = this.createjs || {};
createjs.promote = function(subclass, prefix) {
    "use strict";
    var subP = subclass.prototype,
        supP = (Object.getPrototypeOf && Object.getPrototypeOf(subP)) || subP.__proto__;
    if (supP) {
        subP[(prefix += "_") + "constructor"] = supP.constructor;
        for (var n in supP) {
            if (subP.hasOwnProperty(n) && (typeof supP[n] == "function")) {
                subP[prefix + n] = supP[n];
            }
        }
    }
    return subclass;
};
this.createjs = this.createjs || {};
createjs.indexOf = function(array, searchElement) {
    "use strict";
    for (var i = 0, l = array.length; i < l; i++) {
        if (searchElement === array[i]) {
            return i;
        }
    }
    return -1;
};
this.createjs = this.createjs || {};
(function() {
    "use strict";
    createjs.proxy = function(method, scope) {
        var aArgs = Array.prototype.slice.call(arguments, 2);
        return function() {
            return method.apply(scope, Array.prototype.slice.call(arguments, 0).concat(aArgs));
        };
    }
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";
    var t = Object.defineProperty ? true : false;
    var foo = {};
    try {
        Object.defineProperty(foo, "bar", {
            get: function() {
                return this._bar;
            },
            set: function(value) {
                this._bar = value;
            }
        });
    } catch (e) {
        t = false;
    }
    createjs.definePropertySupported = t;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function BrowserDetect() {
        throw "BrowserDetect cannot be instantiated";
    };
    var agent = BrowserDetect.agent = window.navigator.userAgent;
    BrowserDetect.isWindowPhone = (agent.indexOf("IEMobile") > -1) || (agent.indexOf("Windows Phone") > -1);
    BrowserDetect.isFirefox = (agent.indexOf("Firefox") > -1);
    BrowserDetect.isOpera = (window.opera != null);
    BrowserDetect.isChrome = (agent.indexOf("Chrome") > -1);
    BrowserDetect.isIOS = (agent.indexOf("iPod") > -1 || agent.indexOf("iPhone") > -1 || agent.indexOf("iPad") > -1) && !BrowserDetect.isWindowPhone;
    BrowserDetect.isAndroid = (agent.indexOf("Android") > -1) && !BrowserDetect.isWindowPhone;
    BrowserDetect.isBlackberry = (agent.indexOf("Blackberry") > -1);
    createjs.BrowserDetect = BrowserDetect;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function EventDispatcher() {
        this._listeners = null;
        this._captureListeners = null;
    }
    var p = EventDispatcher.prototype;
    EventDispatcher.initialize = function(target) {
        target.addEventListener = p.addEventListener;
        target.on = p.on;
        target.removeEventListener = target.off = p.removeEventListener;
        target.removeAllEventListeners = p.removeAllEventListeners;
        target.hasEventListener = p.hasEventListener;
        target.dispatchEvent = p.dispatchEvent;
        target._dispatchEvent = p._dispatchEvent;
        target.willTrigger = p.willTrigger;
    };
    p.addEventListener = function(type, listener, useCapture) {
        var listeners;
        if (useCapture) {
            listeners = this._captureListeners = this._captureListeners || {};
        } else {
            listeners = this._listeners = this._listeners || {};
        }
        var arr = listeners[type];
        if (arr) {
            this.removeEventListener(type, listener, useCapture);
        }
        arr = listeners[type];
        if (!arr) {
            listeners[type] = [listener];
        } else {
            arr.push(listener);
        }
        return listener;
    };
    p.on = function(type, listener, scope, once, data, useCapture) {
        if (listener.handleEvent) {
            scope = scope || listener;
            listener = listener.handleEvent;
        }
        scope = scope || this;
        return this.addEventListener(type, function(evt) {
            listener.call(scope, evt, data);
            once && evt.remove();
        }, useCapture);
    };
    p.removeEventListener = function(type, listener, useCapture) {
        var listeners = useCapture ? this._captureListeners : this._listeners;
        if (!listeners) {
            return;
        }
        var arr = listeners[type];
        if (!arr) {
            return;
        }
        for (var i = 0, l = arr.length; i < l; i++) {
            if (arr[i] == listener) {
                if (l == 1) {
                    delete(listeners[type]);
                } else {
                    arr.splice(i, 1);
                }
                break;
            }
        }
    };
    p.off = p.removeEventListener;
    p.removeAllEventListeners = function(type) {
        if (!type) {
            this._listeners = this._captureListeners = null;
        } else {
            if (this._listeners) {
                delete(this._listeners[type]);
            }
            if (this._captureListeners) {
                delete(this._captureListeners[type]);
            }
        }
    };
    p.dispatchEvent = function(eventObj) {
        if (typeof eventObj == "string") {
            var listeners = this._listeners;
            if (!listeners || !listeners[eventObj]) {
                return false;
            }
            eventObj = new createjs.Event(eventObj);
        } else if (eventObj.target && eventObj.clone) {
            eventObj = eventObj.clone();
        }
        try {
            eventObj.target = this;
        } catch (e) {}
        if (!eventObj.bubbles || !this.parent) {
            this._dispatchEvent(eventObj, 2);
        } else {
            var top = this,
                list = [top];
            while (top.parent) {
                list.push(top = top.parent);
            }
            var i, l = list.length;
            for (i = l - 1; i >= 0 && !eventObj.propagationStopped; i--) {
                list[i]._dispatchEvent(eventObj, 1 + (i == 0));
            }
            for (i = 1; i < l && !eventObj.propagationStopped; i++) {
                list[i]._dispatchEvent(eventObj, 3);
            }
        }
        return eventObj.defaultPrevented;
    };
    p.hasEventListener = function(type) {
        var listeners = this._listeners,
            captureListeners = this._captureListeners;
        return !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));
    };
    p.willTrigger = function(type) {
        var o = this;
        while (o) {
            if (o.hasEventListener(type)) {
                return true;
            }
            o = o.parent;
        }
        return false;
    };
    p.toString = function() {
        return "[EventDispatcher]";
    };
    p._dispatchEvent = function(eventObj, eventPhase) {
        var l, listeners = (eventPhase == 1) ? this._captureListeners : this._listeners;
        if (eventObj && listeners) {
            var arr = listeners[eventObj.type];
            if (!arr || !(l = arr.length)) {
                return;
            }
            try {
                eventObj.currentTarget = this;
            } catch (e) {}
            try {
                eventObj.eventPhase = eventPhase;
            } catch (e) {}
            eventObj.removed = false;
            arr = arr.slice();
            for (var i = 0; i < l && !eventObj.immediatePropagationStopped; i++) {
                var o = arr[i];
                if (o.handleEvent) {
                    o.handleEvent(eventObj);
                } else {
                    o(eventObj);
                }
                if (eventObj.removed) {
                    this.off(eventObj.type, o, eventPhase == 1);
                    eventObj.removed = false;
                }
            }
        }
    };
    createjs.EventDispatcher = EventDispatcher;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function Event(type, bubbles, cancelable) {
        this.type = type;
        this.target = null;
        this.currentTarget = null;
        this.eventPhase = 0;
        this.bubbles = !!bubbles;
        this.cancelable = !!cancelable;
        this.timeStamp = (new Date()).getTime();
        this.defaultPrevented = false;
        this.propagationStopped = false;
        this.immediatePropagationStopped = false;
        this.removed = false;
    }
    var p = Event.prototype;
    p.preventDefault = function() {
        this.defaultPrevented = this.cancelable && true;
    };
    p.stopPropagation = function() {
        this.propagationStopped = true;
    };
    p.stopImmediatePropagation = function() {
        this.immediatePropagationStopped = this.propagationStopped = true;
    };
    p.remove = function() {
        this.removed = true;
    };
    p.clone = function() {
        return new Event(this.type, this.bubbles, this.cancelable);
    };
    p.set = function(props) {
        for (var n in props) {
            this[n] = props[n];
        }
        return this;
    };
    p.toString = function() {
        return "[Event (type=" + this.type + ")]";
    };
    createjs.Event = Event;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function ErrorEvent(title, message, data) {
        this.Event_constructor("error");
        this.title = title;
        this.message = message;
        this.data = data;
    }
    var p = createjs.extend(ErrorEvent, createjs.Event);
    p.clone = function() {
        return new createjs.ErrorEvent(this.title, this.message, this.data);
    };
    createjs.ErrorEvent = createjs.promote(ErrorEvent, "Event");
}());
this.createjs = this.createjs || {};
(function(scope) {
    "use strict";

    function ProgressEvent(loaded, total) {
        this.Event_constructor("progress");
        this.loaded = loaded;
        this.total = (total == null) ? 1 : total;
        this.progress = (total == 0) ? 0 : this.loaded / this.total;
    };
    var p = createjs.extend(ProgressEvent, createjs.Event);
    p.clone = function() {
        return new createjs.ProgressEvent(this.loaded, this.total);
    };
    createjs.ProgressEvent = createjs.promote(ProgressEvent, "Event");
}(window));
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function LoadItem() {
        this.src = null;
        this.type = null;
        this.id = null;
        this.maintainOrder = false;
        this.callback = null;
        this.data = null;
        this.method = createjs.LoadItem.GET;
        this.values = null;
        this.headers = null;
        this.withCredentials = false;
        this.mimeType = null;
        this.crossOrigin = "Anonymous";
        this.loadTimeout = 8000;
    };
    var p = LoadItem.prototype = {};
    var s = LoadItem;
    s.create = function(value) {
        if (typeof value == "string") {
            var item = new LoadItem();
            item.src = value;
            return item;
        } else if (value instanceof s) {
            return value;
        } else if (value instanceof Object) {
            return value;
        } else {
            throw new Error("Type not recognized.");
        }
    };
    p.set = function(props) {
        for (var n in props) {
            this[n] = props[n];
        }
        return this;
    };
    createjs.LoadItem = s;
}());
(function() {
    var s = {};
    s.ABSOLUTE_PATT = /^(?:\w+:)?\/{2}/i;
    s.RELATIVE_PATT = '';
    s.EXTENSION_PATT = /\/?[^/]+\.(\w{1,5})$/i;
    s.parseURI = function(path) {
        var info = {
            absolute: false,
            relative: false
        };
        if (path == null) {
            return info;
        }
        var queryIndex = path.indexOf("?");
        if (queryIndex > -1) {
            path = path.substr(0, queryIndex);
        }
        var match;
        if (s.ABSOLUTE_PATT.test(path)) {
            info.absolute = true;
        } else if (s.RELATIVE_PATT.test(path)) {
            info.relative = true;
        }
        if (match = path.match(s.EXTENSION_PATT)) {
            info.extension = match[1].toLowerCase();
        }
        return info;
    };
    s.formatQueryString = function(data, query) {
        if (data == null) {
            throw new Error('You must specify data.');
        }
        var params = [];
        for (var n in data) {
            params.push(n + '=' + escape(data[n]));
        }
        if (query) {
            params = params.concat(query);
        }
        return params.join('&');
    };
    s.buildPath = function(src, data) {
        if (data == null) {
            return src;
        }
        var query = [];
        var idx = src.indexOf('?');
        if (idx != -1) {
            var q = src.slice(idx + 1);
            query = query.concat(q.split('&'));
        }
        if (idx != -1) {
            return src.slice(0, idx) + '?' + this._formatQueryString(data, query);
        } else {
            return src + '?' + this._formatQueryString(data, query);
        }
    };
    s.isCrossDomain = function(item) {
        var target = document.createElement("a");
        target.href = item.src;
        var host = document.createElement("a");
        host.href = location.href;
        var crossdomain = (target.hostname != "") && (target.port != host.port || target.protocol != host.protocol || target.hostname != host.hostname);
        return crossdomain;
    };
    s.isLocal = function(item) {
        var target = document.createElement("a");
        target.href = item.src;
        return target.hostname == "" && target.protocol == "file:";
    };
    s.isBinary = function(type) {
        switch (type) {
            case createjs.AbstractLoader.IMAGE:
            case createjs.AbstractLoader.BINARY:
                return true;
            default:
                return false;
        }
    };
    s.isImageTag = function(item) {
        return item instanceof HTMLImageElement;
    };
    s.isAudioTag = function(item) {
        if (window.HTMLAudioElement) {
            return item instanceof HTMLAudioElement;
        } else {
            return false;
        }
    };
    s.isVideoTag = function(item) {
        if (window.HTMLVideoElement) {
            return item instanceof HTMLVideoElement;
        } else {
            false;
        }
    };
    s.isText = function(type) {
        switch (type) {
            case createjs.AbstractLoader.TEXT:
            case createjs.AbstractLoader.JSON:
            case createjs.AbstractLoader.MANIFEST:
            case createjs.AbstractLoader.XML:
            case createjs.AbstractLoader.CSS:
            case createjs.AbstractLoader.SVG:
            case createjs.AbstractLoader.JAVASCRIPT:
                return true;
            default:
                return false;
        }
    };
    s.getTypeByExtension = function(extension) {
        if (extension == null) {
            return createjs.AbstractLoader.TEXT;
        }
        switch (extension.toLowerCase()) {
            case "jpeg":
            case "jpg":
            case "gif":
            case "png":
            case "webp":
            case "bmp":
                return createjs.AbstractLoader.IMAGE;
            case "ogg":
            case "mp3":
            case "webm":
                return createjs.AbstractLoader.SOUND;
            case "mp4":
            case "webm":
            case "ts":
                return createjs.AbstractLoader.VIDEO;
            case "json":
                return createjs.AbstractLoader.JSON;
            case "xml":
                return createjs.AbstractLoader.XML;
            case "css":
                return createjs.AbstractLoader.CSS;
            case "js":
                return createjs.AbstractLoader.JAVASCRIPT;
            case 'svg':
                return createjs.AbstractLoader.SVG;
            default:
                return createjs.AbstractLoader.TEXT;
        }
    };
    createjs.RequestUtils = s;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function AbstractLoader(loadItem, preferXHR, type) {
        this.EventDispatcher_constructor();
        this.loaded = false;
        this.canceled = false;
        this.progress = 0;
        this.type = type;
        this.resultFormatter = null;
        if (loadItem) {
            this._item = createjs.LoadItem.create(loadItem);
        } else {
            this._item = null;
        }
        this._preferXHR = preferXHR;
        this._result = null;
        this._rawResult = null;
        this._loadedItems = null;
        this._tagSrcAttribute = null;
        this._tag = null;
    };
    var p = createjs.extend(AbstractLoader, createjs.EventDispatcher);
    var s = AbstractLoader;
    s.POST = "POST";
    s.GET = "GET";
    s.BINARY = "binary";
    s.CSS = "css";
    s.IMAGE = "image";
    s.JAVASCRIPT = "javascript";
    s.JSON = "json";
    s.JSONP = "jsonp";
    s.MANIFEST = "manifest";
    s.SOUND = "sound";
    s.VIDEO = "video";
    s.SPRITESHEET = "spritesheet";
    s.SVG = "svg";
    s.TEXT = "text";
    s.XML = "xml";
    p.getItem = function() {
        return this._item;
    };
    p.getResult = function(raw) {
        return raw ? this._rawResult : this._result;
    };
    p.getTag = function() {
        return this._tag;
    };
    p.setTag = function(tag) {
        this._tag = tag;
    };
    p.load = function() {
        this._createRequest();
        this._request.on("complete", this, this);
        this._request.on("progress", this, this);
        this._request.on("loadStart", this, this);
        this._request.on("abort", this, this);
        this._request.on("timeout", this, this);
        this._request.on("error", this, this);
        var evt = new createjs.Event("initialize");
        evt.loader = this._request;
        this.dispatchEvent(evt);
        this._request.load();
    };
    p.cancel = function() {
        this.canceled = true;
        this.destroy();
    };
    p.destroy = function() {
        if (this._request) {
            this._request.removeAllEventListeners();
            this._request.destroy();
        }
        this._request = null;
        this._item = null;
        this._rawResult = null;
        this._result = null;
        this._loadItems = null;
        this.removeAllEventListeners();
    };
    p.getLoadedItems = function() {
        return this._loadedItems;
    };
    p._createRequest = function() {
        if (!this._preferXHR) {
            this._request = new createjs.TagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute);
        } else {
            this._request = new createjs.XHRRequest(this._item);
        }
    };
    p._createTag = function(src) {
        return null;
    };
    p._sendLoadStart = function() {
        if (this._isCanceled()) {
            return;
        }
        this.dispatchEvent("loadstart");
    };
    p._sendProgress = function(value) {
        if (this._isCanceled()) {
            return;
        }
        var event = null;
        if (typeof(value) == "number") {
            this.progress = value;
            event = new createjs.ProgressEvent(this.progress);
        } else {
            event = value;
            this.progress = value.loaded / value.total;
            event.progress = this.progress;
            if (isNaN(this.progress) || this.progress == Infinity) {
                this.progress = 0;
            }
        }
        this.hasEventListener("progress") && this.dispatchEvent(event);
    };
    p._sendComplete = function() {
        if (this._isCanceled()) {
            return;
        }
        this.loaded = true;
        var event = new createjs.Event("complete");
        event.rawResult = this._rawResult;
        if (this._result != null) {
            event.result = this._result;
        }
        this.dispatchEvent(event);
    };
    p._sendError = function(event) {
        if (this._isCanceled() || !this.hasEventListener("error")) {
            return;
        }
        if (event == null) {
            event = new createjs.ErrorEvent("PRELOAD_ERROR_EMPTY");
        }
        this.dispatchEvent(event);
    };
    p._isCanceled = function() {
        if (window.createjs == null || this.canceled) {
            return true;
        }
        return false;
    };
    p.resultFormatter = null;
    p.handleEvent = function(event) {
        switch (event.type) {
            case "complete":
                this._rawResult = event.target._response;
                var result = this.resultFormatter && this.resultFormatter(this);
                var _this = this;
                if (result instanceof Function) {
                    result(function(result) {
                        _this._result = result;
                        _this._sendComplete();
                    });
                } else {
                    this._result = result || this._rawResult;
                    this._sendComplete();
                }
                break;
            case "progress":
                this._sendProgress(event);
                break;
            case "error":
                this._sendError(event);
                break;
            case "loadstart":
                this._sendLoadStart();
                break;
            case "abort":
            case "timeout":
                if (!this._isCanceled()) {
                    this.dispatchEvent(event.type);
                }
                break;
        }
    };
    p.buildPath = function(src, data) {
        return createjs.RequestUtils.buildPath(src, data);
    };
    p.toString = function() {
        return "[PreloadJS AbstractLoader]";
    };
    createjs.AbstractLoader = createjs.promote(AbstractLoader, "EventDispatcher");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function AbstractMediaLoader(loadItem, preferXHR, type) {
        this.AbstractLoader_constructor(loadItem, preferXHR, type);
        this.resultFormatter = this._formatResult;
        this._tagSrcAttribute = "src";
    };
    var p = createjs.extend(AbstractMediaLoader, createjs.AbstractLoader);
    p.load = function() {
        if (!this._tag) {
            this._tag = this._createTag(this._item.src);
        }
        this._tag.preload = "auto";
        this._tag.load();
        this.AbstractLoader_load();
    };
    p._createTag = function() {};
    p._createRequest = function() {
        if (!this._preferXHR) {
            this._request = new createjs.MediaTagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute);
        } else {
            this._request = new createjs.XHRRequest(this._item);
        }
    };
    p._formatResult = function(loader) {
        this._tag.removeEventListener && this._tag.removeEventListener("canplaythrough", this._loadedHandler);
        this._tag.onstalled = null;
        if (this._preferXHR) {
            loader.getTag().src = loader.getResult(true);
        }
        return loader.getTag();
    };
    createjs.AbstractMediaLoader = createjs.promote(AbstractMediaLoader, "AbstractLoader");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";
    var AbstractRequest = function(item) {
        this._item = item;
    };
    var p = createjs.extend(AbstractRequest, createjs.EventDispatcher);
    p.load = function() {};
    p.destroy = function() {};
    p.cancel = function() {};
    createjs.AbstractRequest = createjs.promote(AbstractRequest, "EventDispatcher");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function TagRequest(loadItem, tag, srcAttribute) {
        this.AbstractRequest_constructor(loadItem);
        this._tag = tag;
        this._tagSrcAttribute = srcAttribute;
        this._loadedHandler = createjs.proxy(this._handleTagComplete, this);
        this._addedToDOM = false;
        this._startTagVisibility = null;
    };
    var p = createjs.extend(TagRequest, createjs.AbstractRequest);
    p.load = function() {
        if (this._tag.parentNode == null) {
            window.document.body.appendChild(this._tag);
            this._addedToDOM = true;
        }
        this._tag.onload = createjs.proxy(this._handleTagComplete, this);
        this._tag.onreadystatechange = createjs.proxy(this._handleReadyStateChange, this);
        var evt = new createjs.Event("initialize");
        evt.loader = this._tag;
        this.dispatchEvent(evt);
        this._hideTag();
        this._tag[this._tagSrcAttribute] = this._item.src;
    };
    p.destroy = function() {
        this._clean();
        this._tag = null;
        this.AbstractRequest_destroy();
    };
    p._handleReadyStateChange = function() {
        clearTimeout(this._loadTimeout);
        var tag = this._tag;
        if (tag.readyState == "loaded" || tag.readyState == "complete") {
            this._handleTagComplete();
        }
    };
    p._handleTagComplete = function() {
        this._rawResult = this._tag;
        this._result = this.resultFormatter && this.resultFormatter(this) || this._rawResult;
        this._clean();
        this._showTag();
        this.dispatchEvent("complete");
    };
    p._clean = function() {
        this._tag.onload = null;
        this._tag.onreadystatechange = null;
        if (this._addedToDOM && this._tag.parentNode != null) {
            this._tag.parentNode.removeChild(this._tag);
        }
    };
    p._hideTag = function() {
        this._startTagVisibility = this._tag.style.visibility;
        this._tag.style.visibility = "hidden";
    };
    p._showTag = function() {
        this._tag.style.visibility = this._startTagVisibility;
    };
    p._handleStalled = function() {};
    createjs.TagRequest = createjs.promote(TagRequest, "AbstractRequest");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function MediaTagRequest(loadItem, tag, srcAttribute) {
        this.AbstractRequest_constructor(loadItem);
        this._tag = tag;
        this._tagSrcAttribute = srcAttribute;
        this._loadedHandler = createjs.proxy(this._handleTagComplete, this);
    };
    var p = createjs.extend(MediaTagRequest, createjs.TagRequest);
    var s = MediaTagRequest;
    p.load = function() {
        this._tag.onstalled = createjs.proxy(this._handleStalled, this);
        this._tag.onprogress = createjs.proxy(this._handleProgress, this);
        this._tag.addEventListener && this._tag.addEventListener("canplaythrough", this._loadedHandler, false);
        this.TagRequest_load();
    };
    p._handleReadyStateChange = function() {
        clearTimeout(this._loadTimeout);
        var tag = this._tag;
        if (tag.readyState == "loaded" || tag.readyState == "complete") {
            this._handleTagComplete();
        }
    };
    p._handleStalled = function() {};
    p._handleProgress = function(event) {
        if (!event || event.loaded > 0 && event.total == 0) {
            return;
        }
        var newEvent = new createjs.ProgressEvent(event.loaded, event.total);
        this.dispatchEvent(newEvent);
    };
    p._clean = function() {
        this._tag.removeEventListener && this._tag.removeEventListener("canplaythrough", this._loadedHandler);
        this._tag.onstalled = null;
        this._tag.onprogress = null;
        this.TagRequest__clean();
    };
    createjs.MediaTagRequest = createjs.promote(MediaTagRequest, "TagRequest");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function XHRRequest(item) {
        this.AbstractRequest_constructor(item);
        this._request = null;
        this._loadTimeout = null;
        this._xhrLevel = 1;
        this._response = null;
        this._rawResponse = null;
        this._canceled = false;
        this._handleLoadStartProxy = createjs.proxy(this._handleLoadStart, this);
        this._handleProgressProxy = createjs.proxy(this._handleProgress, this);
        this._handleAbortProxy = createjs.proxy(this._handleAbort, this);
        this._handleErrorProxy = createjs.proxy(this._handleError, this);
        this._handleTimeoutProxy = createjs.proxy(this._handleTimeout, this);
        this._handleLoadProxy = createjs.proxy(this._handleLoad, this);
        this._handleReadyStateChangeProxy = createjs.proxy(this._handleReadyStateChange, this);
        if (!this._createXHR(item)) {}
    };
    var p = createjs.extend(XHRRequest, createjs.AbstractRequest);
    XHRRequest.ACTIVEX_VERSIONS = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.5.0", "Msxml2.XMLHTTP.4.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    p.getResult = function(raw) {
        if (raw && this._rawResponse) {
            return this._rawResponse;
        }
        return this._response;
    };
    p.cancel = function() {
        this.canceled = true;
        this._clean();
        this._request.abort();
    };
    p.load = function() {
        if (this._request == null) {
            this._handleError();
            return;
        }
        this._request.addEventListener("loadstart", this._handleLoadStartProxy, false);
        this._request.addEventListener("progress", this._handleProgressProxy, false);
        this._request.addEventListener("abort", this._handleAbortProxy, false);
        this._request.addEventListener("error", this._handleErrorProxy, false);
        this._request.addEventListener("timeout", this._handleTimeoutProxy, false);
        this._request.addEventListener("load", this._handleLoadProxy, false);
        this._request.addEventListener("readystatechange", this._handleReadyStateChangeProxy, false);
        if (this._xhrLevel == 1) {
            this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout);
        }
        try {
            if (!this._item.values || this._item.method == createjs.AbstractLoader.GET) {
                this._request.send();
            } else if (this._item.method == createjs.AbstractLoader.POST) {
                this._request.send(createjs.RequestUtils.formatQueryString(this._item.values));
            }
        } catch (error) {
            this.dispatchEvent(new createjs.ErrorEvent("XHR_SEND", null, error));
        }
    };
    p.setResponseType = function(type) {
        this._request.responseType = type;
    };
    p.getAllResponseHeaders = function() {
        if (this._request.getAllResponseHeaders instanceof Function) {
            return this._request.getAllResponseHeaders();
        } else {
            return null;
        }
    };
    p.getResponseHeader = function(header) {
        if (this._request.getResponseHeader instanceof Function) {
            return this._request.getResponseHeader(header);
        } else {
            return null;
        }
    };
    p._handleProgress = function(event) {
        if (!event || event.loaded > 0 && event.total == 0) {
            return;
        }
        var newEvent = new createjs.ProgressEvent(event.loaded, event.total);
        this.dispatchEvent(newEvent);
    };
    p._handleLoadStart = function(event) {
        clearTimeout(this._loadTimeout);
        this.dispatchEvent("loadstart");
    };
    p._handleAbort = function(event) {
        this._clean();
        this.dispatchEvent(new createjs.ErrorEvent("XHR_ABORTED", null, event));
    };
    p._handleError = function(event) {
        this._clean();
        this.dispatchEvent(new createjs.ErrorEvent(event.message));
    };
    p._handleReadyStateChange = function(event) {
        if (this._request.readyState == 4) {
            this._handleLoad();
        }
    };
    p._handleLoad = function(event) {
        if (this.loaded) {
            return;
        }
        this.loaded = true;
        var error = this._checkError();
        if (error) {
            this._handleError(error);
            return;
        }
        this._response = this._getResponse();
        this._clean();
        this.dispatchEvent(new createjs.Event("complete"));
    };
    p._handleTimeout = function(event) {
        this._clean();
        this.dispatchEvent(new createjs.ErrorEvent("PRELOAD_TIMEOUT", null, event));
    };
    p._checkError = function() {
        var status = parseInt(this._request.status);
        switch (status) {
            case 404:
            case 0:
                return new Error(status);
        }
        return null;
    };
    p._getResponse = function() {
        if (this._response != null) {
            return this._response;
        }
        if (this._request.response != null) {
            return this._request.response;
        }
        try {
            if (this._request.responseText != null) {
                return this._request.responseText;
            }
        } catch (e) {}
        try {
            if (this._request.responseXML != null) {
                return this._request.responseXML;
            }
        } catch (e) {}
        return null;
    };
    p._createXHR = function(item) {
        var crossdomain = createjs.RequestUtils.isCrossDomain(item);
        var headers = {};
        var req = null;
        if (window.XMLHttpRequest) {
            req = new XMLHttpRequest();
            if (crossdomain && req.withCredentials === undefined && window.XDomainRequest) {
                req = new XDomainRequest();
            }
        } else {
            for (var i = 0, l = s.ACTIVEX_VERSIONS.length; i < l; i++) {
                var axVersion = s.ACTIVEX_VERSIONS[i];
                try {
                    req = new ActiveXObject(axVersions);
                    break;
                } catch (e) {}
            }
            if (req == null) {
                return false;
            }
        }
        if (item.mimeType && req.overrideMimeType) {
            req.overrideMimeType(item.mimeType);
        }
        this._xhrLevel = (typeof req.responseType === "string") ? 2 : 1;
        var src = null;
        if (item.method == createjs.AbstractLoader.GET) {
            src = createjs.RequestUtils.buildPath(item.src, item.values);
        } else {
            src = item.src;
        }
        req.open(item.method || createjs.AbstractLoader.GET, src, true);
        if (crossdomain && req instanceof XMLHttpRequest && this._xhrLevel == 1) {
            headers["Origin"] = location.origin;
        }
        if (item.values && item.method == createjs.AbstractLoader.POST) {
            headers["Content-Type"] = "application/x-www-form-urlencoded";
        }
        if (!crossdomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
        }
        if (item.headers) {
            for (var n in item.headers) {
                headers[n] = item.headers[n];
            }
        }
        for (n in headers) {
            req.setRequestHeader(n, headers[n])
        }
        if (req instanceof XMLHttpRequest && item.withCredentials !== undefined) {
            req.withCredentials = item.withCredentials;
        }
        this._request = req;
        return true;
    };
    p._clean = function() {
        clearTimeout(this._loadTimeout);
        this._request.removeEventListener("loadstart", this._handleLoadStartProxy);
        this._request.removeEventListener("progress", this._handleProgressProxy);
        this._request.removeEventListener("abort", this._handleAbortProxy);
        this._request.removeEventListener("error", this._handleErrorProxy);
        this._request.removeEventListener("timeout", this._handleTimeoutProxy);
        this._request.removeEventListener("load", this._handleLoadProxy);
        this._request.removeEventListener("readystatechange", this._handleReadyStateChangeProxy);
    };
    p.toString = function() {
        return "[PreloadJS XHRRequest]";
    };
    createjs.XHRRequest = createjs.promote(XHRRequest, "AbstractRequest");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function SoundLoader(loadItem, preferXHR) {
        this.AbstractMediaLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.SOUND);
        if (createjs.RequestUtils.isAudioTag(loadItem)) {
            this._tag = loadItem;
        } else if (createjs.RequestUtils.isAudioTag(loadItem.src)) {
            this._tag = loadItem;
        } else if (createjs.RequestUtils.isAudioTag(loadItem.tag)) {
            this._tag = createjs.RequestUtils.isAudioTag(loadItem) ? loadItem : loadItem.src;
        }
        if (this._tag != null) {
            this._preferXHR = false;
        }
    };
    var p = createjs.extend(SoundLoader, createjs.AbstractMediaLoader);
    var s = SoundLoader;
    s.canLoadItem = function(item) {
        return item.type == createjs.AbstractLoader.SOUND;
    };
    p._createTag = function(src) {
        var tag = document.createElement("audio");
        tag.autoplay = false;
        tag.preload = "none";
        tag.src = src;
        return tag;
    };
    createjs.SoundLoader = createjs.promote(SoundLoader, "AbstractMediaLoader");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function Sound() {
        throw "Sound cannot be instantiated";
    }
    var s = Sound;
    s.INTERRUPT_ANY = "any";
    s.INTERRUPT_EARLY = "early";
    s.INTERRUPT_LATE = "late";
    s.INTERRUPT_NONE = "none";
    s.PLAY_INITED = "playInited";
    s.PLAY_SUCCEEDED = "playSucceeded";
    s.PLAY_INTERRUPTED = "playInterrupted";
    s.PLAY_FINISHED = "playFinished";
    s.PLAY_FAILED = "playFailed";
    s.SUPPORTED_EXTENSIONS = ["mp3", "ogg", "mpeg", "wav", "m4a", "mp4", "aiff", "wma", "mid"];
    s.EXTENSION_MAP = {
        m4a: "mp4"
    };
    s.FILE_PATTERN = /^(?:(\w+:)\/{2}(\w+(?:\.\w+)*\/?))?([/.]*?(?:[^?]+)?\/)?((?:[^/?]+)\.(\w+))(?:\?(\S+)?)?$/;
    s.defaultInterruptBehavior = s.INTERRUPT_NONE;
    s.alternateExtensions = [];
    s.activePlugin = null;
    s._pluginsRegistered = false;
    s._lastID = 0;
    s._masterVolume = 1;
    s._masterMute = false;
    s._instances = [];
    s._idHash = {};
    s._preloadHash = {};
    s.addEventListener = null;
    s.removeEventListener = null;
    s.removeAllEventListeners = null;
    s.dispatchEvent = null;
    s.hasEventListener = null;
    s._listeners = null;
    createjs.EventDispatcher.initialize(s);
    s.getPreloadHandlers = function() {
        return {
            callback: createjs.proxy(s.initLoad, s),
            types: ["sound"],
            extensions: s.SUPPORTED_EXTENSIONS
        };
    };
    s._handleLoadComplete = function(event) {
        var src = event.target.getItem().src;
        if (!s._preloadHash[src]) {
            return;
        }
        for (var i = 0, l = s._preloadHash[src].length; i < l; i++) {
            var item = s._preloadHash[src][i];
            s._preloadHash[src][i] = true;
            if (!s.hasEventListener("fileload")) {
                continue;
            }
            var event = new createjs.Event("fileload");
            event.src = item.src;
            event.id = item.id;
            event.data = item.data;
            event.sprite = item.sprite;
            s.dispatchEvent(event);
        }
    };
    s._handleLoadError = function(event) {
        var src = event.target.getItem().src;
        if (!s._preloadHash[src]) {
            return;
        }
        for (var i = 0, l = s._preloadHash[src].length; i < l; i++) {
            var item = s._preloadHash[src][i];
            s._preloadHash[src][i] = false;
            if (!s.hasEventListener("fileerror")) {
                continue;
            }
            var event = new createjs.Event("fileerror");
            event.src = item.src;
            event.id = item.id;
            event.data = item.data;
            event.sprite = item.sprite;
            s.dispatchEvent(event);
        }
    };
    s._registerPlugin = function(plugin) {
        if (plugin.isSupported()) {
            s.activePlugin = new plugin();
            return true;
        }
        return false;
    };
    s.registerPlugins = function(plugins) {
        s._pluginsRegistered = true;
        for (var i = 0, l = plugins.length; i < l; i++) {
            if (s._registerPlugin(plugins[i])) {
                return true;
            }
        }
        return false;
    };
    s.initializeDefaultPlugins = function() {
        if (s.activePlugin != null) {
            return true;
        }
        if (s._pluginsRegistered) {
            return false;
        }
        if (s.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin])) {
            return true;
        }
        return false;
    };
    s.isReady = function() {
        return (s.activePlugin != null);
    };
    s.getCapabilities = function() {
        if (s.activePlugin == null) {
            return null;
        }
        return s.activePlugin._capabilities;
    };
    s.getCapability = function(key) {
        if (s.activePlugin == null) {
            return null;
        }
        return s.activePlugin._capabilities[key];
    };
    s.initLoad = function(loadItem) {
        return s._registerSound(loadItem);
    };
    s._registerSound = function(loadItem) {
        if (!s.initializeDefaultPlugins()) {
            return false;
        }
        var details = s._parsePath(loadItem.src);
        if (details == null) {
            return false;
        }
        loadItem.src = details.src;
        loadItem.type = "sound";
        var data = loadItem.data;
        var numChannels = s.activePlugin.defaultNumChannels || null;
        if (data != null) {
            if (!isNaN(data.channels)) {
                numChannels = parseInt(data.channels);
            } else if (!isNaN(data)) {
                numChannels = parseInt(data);
            }
            if (data.audioSprite) {
                var sp;
                for (var i = data.audioSprite.length; i--;) {
                    sp = data.audioSprite[i];
                    s._idHash[sp.id] = {
                        src: loadItem.src,
                        startTime: parseInt(sp.startTime),
                        duration: parseInt(sp.duration)
                    };
                }
            }
        }
        if (loadItem.id != null) {
            s._idHash[loadItem.id] = {
                src: loadItem.src
            }
        };
        var loader = s.activePlugin.register(loadItem, numChannels);
        SoundChannel.create(loadItem.src, numChannels);
        if (data == null || !isNaN(data)) {
            loadItem.data = numChannels || SoundChannel.maxPerChannel();
        } else {
            loadItem.data.channels = numChannels || SoundChannel.maxPerChannel();
        }
        if (loader.type) {
            loadItem.type = loader.type;
        }
        return loader;
    };
    s.registerSound = function(src, id, data, basePath) {
        var loadItem = {
            src: src,
            id: id,
            data: data
        };
        if (src instanceof Object) {
            basePath = id;
            loadItem = src;
        }
        loadItem = createjs.LoadItem.create(loadItem);
        if (basePath != null) {
            loadItem.src = basePath + src;
        }
        var loader = s._registerSound(loadItem);
        if (!loader) {
            return false;
        }
        if (!s._preloadHash[loadItem.src]) {
            s._preloadHash[loadItem.src] = [];
        }
        s._preloadHash[loadItem.src].push(loadItem);
        if (s._preloadHash[loadItem.src].length == 1) {
            loader.on("complete", createjs.proxy(this._handleLoadComplete, this));
            loader.on("error", createjs.proxy(this._handleLoadError, this));
            s.activePlugin.preload(loader);
        } else {
            if (s._preloadHash[loadItem.src][0] == true) {
                return true;
            }
        }
        return loadItem;
    };
    s.registerSounds = function(sounds, basePath) {
        var returnValues = [];
        if (sounds.path) {
            if (!basePath) {
                basePath = sounds.path;
            } else {
                basePath = basePath + sounds.path;
            }
        }
        for (var i = 0, l = sounds.length; i < l; i++) {
            returnValues[i] = createjs.Sound.registerSound(sounds[i].src, sounds[i].id, sounds[i].data, basePath);
        }
        return returnValues;
    };
    s.registerManifest = function(manifest, basePath) {
        try {
            console.log("createjs.Sound.registerManifest is deprecated, please use createjs.Sound.registerSounds.")
        } catch (error) {};
        return this.registerSounds(manifest, basePath);
    };
    s.removeSound = function(src, basePath) {
        if (s.activePlugin == null) {
            return false;
        }
        if (src instanceof Object) {
            src = src.src;
        }
        src = s._getSrcById(src).src;
        if (basePath != null) {
            src = basePath + src;
        }
        var details = s._parsePath(src);
        if (details == null) {
            return false;
        }
        src = details.src;
        for (var prop in s._idHash) {
            if (s._idHash[prop].src == src) {
                delete(s._idHash[prop]);
            }
        }
        SoundChannel.removeSrc(src);
        delete(s._preloadHash[src]);
        s.activePlugin.removeSound(src);
        return true;
    };
    s.removeSounds = function(sounds, basePath) {
        var returnValues = [];
        if (sounds.path) {
            if (!basePath) {
                basePath = sounds.path;
            } else {
                basePath = basePath + sounds.path;
            }
        }
        for (var i = 0, l = sounds.length; i < l; i++) {
            returnValues[i] = createjs.Sound.removeSound(sounds[i].src, basePath);
        }
        return returnValues;
    };
    s.removeManifest = function(manifest, basePath) {
        try {
            console.log("createjs.Sound.removeManifest is deprecated, please use createjs.Sound.removeSounds.");
        } catch (error) {};
        return s.removeSounds(manifest, basePath);
    };
    s.removeAllSounds = function() {
        s._idHash = {};
        s._preloadHash = {};
        SoundChannel.removeAll();
        if (s.activePlugin) {
            s.activePlugin.removeAllSounds();
        }
    };
    s.loadComplete = function(src) {
        if (!s.isReady()) {
            return false;
        }
        var details = s._parsePath(src);
        if (details) {
            src = s._getSrcById(details.src).src;
        } else {
            src = s._getSrcById(src).src;
        }
        return (s._preloadHash[src][0] == true);
    };
    s._parsePath = function(value) {
        if (typeof(value) != "string") {
            value = value.toString();
        }
        var match = value.match(s.FILE_PATTERN);
        if (match == null) {
            return false;
        }
        var name = match[4];
        var ext = match[5];
        var c = s.getCapabilities();
        var i = 0;
        while (!c[ext]) {
            ext = s.alternateExtensions[i++];
            if (i > s.alternateExtensions.length) {
                return null;
            }
        }
        value = value.replace("." + match[5], "." + ext);
        var ret = {
            name: name,
            src: value,
            extension: ext
        };
        return ret;
    };
    s.play = function(src, interrupt, delay, offset, loop, volume, pan, startTime, duration) {
        if (interrupt instanceof Object) {
            delay = interrupt.delay;
            offset = interrupt.offset;
            loop = interrupt.loop;
            volume = interrupt.volume;
            pan = interrupt.pan;
            startTime = interrupt.startTime;
            duration = interrupt.duration;
            interrupt = interrupt.interrupt;
        }
        var instance = s.createInstance(src, startTime, duration);
        var ok = s._playInstance(instance, interrupt, delay, offset, loop, volume, pan);
        if (!ok) {
            instance._playFailed();
        }
        return instance;
    };
    s.createInstance = function(src, startTime, duration) {
        if (!s.initializeDefaultPlugins()) {
            return new createjs.DefaultSoundInstance(src, startTime, duration);
        }
        src = s._getSrcById(src);
        var details = s._parsePath(src.src);
        var instance = null;
        if (details != null && details.src != null) {
            SoundChannel.create(details.src);
            if (startTime == null) {
                startTime = src.startTime;
            }
            instance = s.activePlugin.create(details.src, startTime, duration || src.duration);
        } else {
            instance = new createjs.DefaultSoundInstance(src, startTime, duration);;
        }
        instance.uniqueId = s._lastID++;
        return instance;
    };
    s.setVolume = function(value) {
        if (Number(value) == null) {
            return false;
        }
        value = Math.max(0, Math.min(1, value));
        s._masterVolume = value;
        if (!this.activePlugin || !this.activePlugin.setVolume || !this.activePlugin.setVolume(value)) {
            var instances = this._instances;
            for (var i = 0, l = instances.length; i < l; i++) {
                instances[i].setMasterVolume(value);
            }
        }
    };
    s.getVolume = function() {
        return s._masterVolume;
    };
    s.setMute = function(value) {
        if (value == null) {
            return false;
        }
        this._masterMute = value;
        if (!this.activePlugin || !this.activePlugin.setMute || !this.activePlugin.setMute(value)) {
            var instances = this._instances;
            for (var i = 0, l = instances.length; i < l; i++) {
                instances[i].setMasterMute(value);
            }
        }
        return true;
    };
    s.getMute = function() {
        return this._masterMute;
    };
    s.stop = function() {
        var instances = this._instances;
        for (var i = instances.length; i--;) {
            instances[i].stop();
        }
    };
    s._playInstance = function(instance, interrupt, delay, offset, loop, volume, pan) {
        if (interrupt instanceof Object) {
            delay = interrupt.delay;
            offset = interrupt.offset;
            loop = interrupt.loop;
            volume = interrupt.volume;
            pan = interrupt.pan;
            interrupt = interrupt.interrupt;
        }
        interrupt = interrupt || s.defaultInterruptBehavior;
        if (delay == null) {
            delay = 0;
        }
        if (offset == null) {
            offset = instance.getPosition();
        }
        if (loop == null) {
            loop = instance.loop;
        }
        if (volume == null) {
            volume = instance.volume;
        }
        if (pan == null) {
            pan = instance.pan;
        }
        if (delay == 0) {
            var ok = s._beginPlaying(instance, interrupt, offset, loop, volume, pan);
            if (!ok) {
                return false;
            }
        } else {
            var delayTimeoutId = setTimeout(function() {
                s._beginPlaying(instance, interrupt, offset, loop, volume, pan);
            }, delay);
            instance.delayTimeoutId = delayTimeoutId;
        }
        this._instances.push(instance);
        return true;
    };
    s._beginPlaying = function(instance, interrupt, offset, loop, volume, pan) {
        if (!SoundChannel.add(instance, interrupt)) {
            return false;
        }
        var result = instance._beginPlaying(offset, loop, volume, pan);
        if (!result) {
            var index = createjs.indexOf(this._instances, instance);
            if (index > -1) {
                this._instances.splice(index, 1);
            }
            return false;
        }
        return true;
    };
    s._getSrcById = function(value) {
        return s._idHash[value] || {
            src: value
        };
    };
    s._playFinished = function(instance) {
        SoundChannel.remove(instance);
        var index = createjs.indexOf(this._instances, instance);
        if (index > -1) {
            this._instances.splice(index, 1);
        }
    };
    createjs.Sound = Sound;

    function SoundChannel(src, max) {
        this.init(src, max);
    }
    SoundChannel.channels = {};
    SoundChannel.create = function(src, max) {
        var channel = SoundChannel.get(src);
        if (channel == null) {
            SoundChannel.channels[src] = new SoundChannel(src, max);
            return true;
        }
        return false;
    };
    SoundChannel.removeSrc = function(src) {
        var channel = SoundChannel.get(src);
        if (channel == null) {
            return false;
        }
        channel._removeAll();
        delete(SoundChannel.channels[src]);
        return true;
    };
    SoundChannel.removeAll = function() {
        for (var channel in SoundChannel.channels) {
            SoundChannel.channels[channel]._removeAll();
        }
        SoundChannel.channels = {};
    };
    SoundChannel.add = function(instance, interrupt) {
        var channel = SoundChannel.get(instance.src);
        if (channel == null) {
            return false;
        }
        return channel._add(instance, interrupt);
    };
    SoundChannel.remove = function(instance) {
        var channel = SoundChannel.get(instance.src);
        if (channel == null) {
            return false;
        }
        channel._remove(instance);
        return true;
    };
    SoundChannel.maxPerChannel = function() {
        return p.maxDefault;
    };
    SoundChannel.get = function(src) {
        return SoundChannel.channels[src];
    };
    var p = SoundChannel.prototype;
    p.constructor = SoundChannel;
    p.src = null;
    p.max = null;
    p.maxDefault = 100;
    p.length = 0;
    p.init = function(src, max) {
        this.src = src;
        this.max = max || this.maxDefault;
        if (this.max == -1) {
            this.max = this.maxDefault;
        }
        this._instances = [];
    };
    p._get = function(index) {
        return this._instances[index];
    };
    p._add = function(instance, interrupt) {
        if (!this._getSlot(interrupt, instance)) {
            return false;
        }
        this._instances.push(instance);
        this.length++;
        return true;
    };
    p._remove = function(instance) {
        var index = createjs.indexOf(this._instances, instance);
        if (index == -1) {
            return false;
        }
        this._instances.splice(index, 1);
        this.length--;
        return true;
    };
    p._removeAll = function() {
        for (var i = this.length - 1; i >= 0; i--) {
            this._instances[i].stop();
        }
    };
    p._getSlot = function(interrupt, instance) {
        var target, replacement;
        if (interrupt != Sound.INTERRUPT_NONE) {
            replacement = this._get(0);
            if (replacement == null) {
                return true;
            }
        }
        for (var i = 0, l = this.max; i < l; i++) {
            target = this._get(i);
            if (target == null) {
                return true;
            }
            if (target.playState == Sound.PLAY_FINISHED || target.playState == Sound.PLAY_INTERRUPTED || target.playState == Sound.PLAY_FAILED) {
                replacement = target;
                break;
            }
            if (interrupt == Sound.INTERRUPT_NONE) {
                continue;
            }
            if ((interrupt == Sound.INTERRUPT_EARLY && target.getPosition() < replacement.getPosition()) || (interrupt == Sound.INTERRUPT_LATE && target.getPosition() > replacement.getPosition())) {
                replacement = target;
            }
        }
        if (replacement != null) {
            replacement._interrupt();
            this._remove(replacement);
            return true;
        }
        return false;
    };
    p.toString = function() {
        return "[Sound SoundChannel]";
    };
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";
    var AbstractSoundInstance = function(src, startTime, duration, playbackResource) {
        this.EventDispatcher_constructor();
        this.src = src;
        this.uniqueId = -1;
        this.playState = null;
        this.delayTimeoutId = null;
        this._startTime = Math.max(0, startTime || 0);
        this._volume = 1;
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "volume", {
                get: this.getVolume,
                set: this.setVolume
            });
        }
        this._pan = 0;
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "pan", {
                get: this.getPan,
                set: this.setPan
            });
        }
        this._duration = Math.max(0, duration || 0);
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "duration", {
                get: this.getDuration,
                set: this.setDuration
            });
        }
        this._playbackResource = null;
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "playbackResource", {
                get: this.getPlaybackResource,
                set: this.setPlaybackResource
            });
        }
        if (playbackResource !== false && playbackResource !== true) {
            this.setPlaybackResource(playbackResource);
        }
        this._position = 0;
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "position", {
                get: this.getPosition,
                set: this.setPosition
            });
        }
        this._loop = 0;
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "loop", {
                get: this.getLoop,
                set: this.setLoop
            });
        }
        this._muted = false;
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "muted", {
                get: this.getMuted,
                set: this.setMuted
            });
        }
        this._paused = false;
        if (createjs.definePropertySupported) {
            Object.defineProperty(this, "paused", {
                get: this.getPaused,
                set: this.setPaused
            });
        }
    };
    var p = createjs.extend(AbstractSoundInstance, createjs.EventDispatcher);
    p.play = function(interrupt, delay, offset, loop, volume, pan) {
        if (this.playState == createjs.Sound.PLAY_SUCCEEDED) {
            if (interrupt instanceof Object) {
                offset = interrupt.offset;
                loop = interrupt.loop;
                volume = interrupt.volume;
                pan = interrupt.pan;
            }
            if (offset != null) {
                this.setPosition(offset)
            }
            if (loop != null) {
                this.setLoop(loop);
            }
            if (volume != null) {
                this.setVolume(volume);
            }
            if (pan != null) {
                this.setPan(pan);
            }
            if (this._paused) {
                this.setPaused(false);
            }
            return;
        }
        this._cleanUp();
        createjs.Sound._playInstance(this, interrupt, delay, offset, loop, volume, pan);
        return this;
    };
    p.pause = function() {
        if (this._paused || this.playState != createjs.Sound.PLAY_SUCCEEDED) {
            return false;
        }
        this.setPaused(true);
        return true;
    };
    p.resume = function() {
        if (!this._paused) {
            return false;
        }
        this.setPaused(false);
        return true;
    };
    p.stop = function() {
        this._position = 0;
        this._paused = false;
        this._handleStop();
        this._cleanUp();
        this.playState = createjs.Sound.PLAY_FINISHED;
        return this;
    };
    p.destroy = function() {
        this._cleanUp();
        this.src = null;
        this.playbackResource = null;
        this.removeAllEventListeners();
    };
    p.toString = function() {
        return "[AbstractSoundInstance]";
    };
    p.getPaused = function() {
        return this._paused;
    };
    p.setPaused = function(value) {
        if ((value !== true && value !== false) || this._paused == value) {
            return;
        }
        if (value == true && this.playState != createjs.Sound.PLAY_SUCCEEDED) {
            return;
        }
        this._paused = value;
        if (value) {
            this._pause();
        } else {
            this._resume();
        }
        clearTimeout(this.delayTimeoutId);
        return this;
    };
    p.setVolume = function(value) {
        if (value == this._volume) {
            return this;
        }
        this._volume = Math.max(0, Math.min(1, value));
        if (!this._muted) {
            this._updateVolume();
        }
        return this;
    };
    p.getVolume = function() {
        return this._volume;
    };
    p.setMute = function(value) {
        this.setMuted(value);
    };
    p.getMute = function() {
        return this._muted;
    };
    p.setMuted = function(value) {
        if (value !== true && value !== false) {
            return;
        }
        this._muted = value;
        this._updateVolume();
        return this;
    };
    p.getMuted = function() {
        return this._muted;
    };
    p.setPan = function(value) {
        if (value == this._pan) {
            return this;
        }
        this._pan = Math.max(-1, Math.min(1, value));
        this._updatePan();
        return this;
    };
    p.getPan = function() {
        return this._pan;
    };
    p.getPosition = function() {
        if (!this._paused && this.playState == createjs.Sound.PLAY_SUCCEEDED) {
            return this._calculateCurrentPosition();
        }
        return this._position;
    };
    p.setPosition = function(value) {
        this._position = Math.max(0, value);
        if (this.playState == createjs.Sound.PLAY_SUCCEEDED) {
            this._updatePosition();
        }
        return this;
    };
    p.getDuration = function() {
        return this._duration;
    };
    p.setDuration = function(value) {
        if (value == this._duration) {
            return this;
        }
        this._duration = Math.max(0, value || 0);
        this._updateDuration();
        return this;
    };
    p.setPlaybackResource = function(value) {
        this._playbackResource = value;
        if (this._duration == 0) {
            this._setDurationFromSource();
        }
        return this;
    };
    p.getPlaybackResource = function() {
        return this._playbackResource;
    };
    p.getLoop = function() {
        return this._loop;
    };
    p.setLoop = function(value) {
        if (this._playbackResource != null) {
            if (this._loop != 0 && value == 0) {
                this._removeLooping(value);
            }
            if (this._loop == 0 && value != 0) {
                this._addLooping(value);
            }
        }
        this._loop = value;
    };
    p._sendEvent = function(type) {
        var event = new createjs.Event(type);
        this.dispatchEvent(event);
    };
    p._cleanUp = function() {
        clearTimeout(this.delayTimeoutId);
        this._handleCleanUp();
        this._paused = false;
        createjs.Sound._playFinished(this);
    };
    p._interrupt = function() {
        this._cleanUp();
        this.playState = createjs.Sound.PLAY_INTERRUPTED;
        this._sendEvent("interrupted");
    };
    p._beginPlaying = function(offset, loop, volume, pan) {
        this.setPosition(offset);
        this.setLoop(loop);
        this.setVolume(volume);
        this.setPan(pan);
        if (this._playbackResource != null && this._position < this._duration) {
            this._paused = false;
            this._handleSoundReady();
            this.playState = createjs.Sound.PLAY_SUCCEEDED;
            this._sendEvent("succeeded");
            return true;
        } else {
            this._playFailed();
            return false;
        }
    };
    p._playFailed = function() {
        this._cleanUp();
        this.playState = createjs.Sound.PLAY_FAILED;
        this._sendEvent("failed");
    };
    p._handleSoundComplete = function(event) {
        this._position = 0;
        if (this._loop != 0) {
            this._loop--;
            this._handleLoop();
            this._sendEvent("loop");
            return;
        }
        this._cleanUp();
        this.playState = createjs.Sound.PLAY_FINISHED;
        this._sendEvent("complete");
    };
    p._handleSoundReady = function() {};
    p._updateVolume = function() {};
    p._updatePan = function() {};
    p._updateDuration = function() {};
    p._setDurationFromSource = function() {};
    p._calculateCurrentPosition = function() {};
    p._updatePosition = function() {};
    p._removeLooping = function() {};
    p._addLooping = function() {};
    p._pause = function() {};
    p._resume = function() {};
    p._handleStop = function() {};
    p._handleCleanUp = function() {};
    p._handleLoop = function() {};
    createjs.AbstractSoundInstance = createjs.promote(AbstractSoundInstance, "EventDispatcher");
    createjs.DefaultSoundInstance = createjs.AbstractSoundInstance;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";
    var AbstractPlugin = function() {
        this._capabilities = null;
        this._loaders = {};
        this._audioSources = {};
        this._soundInstances = {};
        this._loaderClass;
        this._soundInstanceClass;
    };
    var p = AbstractPlugin.prototype;
    AbstractPlugin._capabilities = null;
    AbstractPlugin.isSupported = function() {
        return true;
    };
    p.register = function(loadItem, instances) {
        this._audioSources[loadItem.src] = true;
        this._soundInstances[loadItem.src] = [];
        if (this._loaders[loadItem.src]) {
            return this._loaders[loadItem.src];
        }
        var loader = new this._loaderClass(loadItem);
        loader.on("complete", createjs.proxy(this._handlePreloadComplete, this));
        this._loaders[loadItem.src] = loader;
        return loader;
    };
    p.preload = function(loader) {
        loader.on("error", createjs.proxy(this._handlePreloadError, this));
        loader.load();
    };
    p.isPreloadStarted = function(src) {
        return (this._audioSources[src] != null);
    };
    p.isPreloadComplete = function(src) {
        return (!(this._audioSources[src] == null || this._audioSources[src] == true));
    };
    p.removeSound = function(src) {
        if (!this._soundInstances[src]) {
            return;
        }
        for (var i = this._soundInstances[src].length; i--;) {
            var item = this._soundInstances[src][i];
            item.destroy();
        }
        delete(this._soundInstances[src]);
        delete(this._audioSources[src]);
        if (this._loaders[src]) {
            this._loaders[src].destroy();
        }
        delete(this._loaders[src]);
    };
    p.removeAllSounds = function() {
        for (var key in this._audioSources) {
            this.removeSound(key);
        }
    };
    p.create = function(src, startTime, duration) {
        if (!this.isPreloadStarted(src)) {
            this.preload(this.register(src));
        }
        var si = new this._soundInstanceClass(src, startTime, duration, this._audioSources[src]);
        this._soundInstances[src].push(si);
        return si;
    };
    p.setVolume = function(value) {
        this._volume = value;
        this._updateVolume();
        return true;
    };
    p.getVolume = function() {
        return this._volume;
    };
    p.setMute = function(value) {
        this._updateVolume();
        return true;
    };
    p.toString = function() {
        return "[AbstractPlugin]";
    };
    p._handlePreloadComplete = function(event) {
        var src = event.target.getItem().src;
        this._audioSources[src] = event.result;
        for (var i = 0, l = this._soundInstances[src].length; i < l; i++) {
            var item = this._soundInstances[src][i];
            item.setPlaybackResource(this._audioSources[src]);
        }
    };
    p._handlePreloadError = function(event) {};
    p._updateVolume = function() {};
    createjs.AbstractPlugin = AbstractPlugin;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function Loader(loadItem) {
        this.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.SOUND);
    };
    var p = createjs.extend(Loader, createjs.AbstractLoader);
    Loader.context = null;
    p.toString = function() {
        return "[WebAudioLoader]";
    };
    p._createRequest = function() {
        this._request = new createjs.XHRRequest(this._item, false);
        this._request.setResponseType("arraybuffer");
    };
    p._sendComplete = function(event) {
        Loader.context.decodeAudioData(this._rawResult, createjs.proxy(this._handleAudioDecoded, this), createjs.proxy(this._handleError, this));
    };
    p._handleAudioDecoded = function(decodedAudio) {
        this._result = decodedAudio;
        this.AbstractLoader__sendComplete();
    };
    createjs.WebAudioLoader = createjs.promote(Loader, "AbstractLoader");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function WebAudioSoundInstance(src, startTime, duration, playbackResource) {
        this.AbstractSoundInstance_constructor(src, startTime, duration, playbackResource);
        this.gainNode = s.context.createGain();
        this.panNode = s.context.createPanner();
        this.panNode.panningModel = s._panningModel;
        this.panNode.connect(this.gainNode);
        this.sourceNode = null;
        this._soundCompleteTimeout = null;
        this._sourceNodeNext = null;
        this._playbackStartTime = 0;
        this._endedHandler = createjs.proxy(this._handleSoundComplete, this);
    };
    var p = createjs.extend(WebAudioSoundInstance, createjs.AbstractSoundInstance);
    var s = WebAudioSoundInstance;
    s.context = null;
    s.destinationNode = null;
    s._panningModel = "equalpower";
    p.destroy = function() {
        this.AbstractSoundInstance_destroy();
        this.panNode.disconnect(0);
        this.panNode = null;
        this.gainNode.disconnect(0);
        this.gainNode = null;
    };
    p.toString = function() {
        return "[WebAudioSoundInstance]";
    };
    p._updatePan = function() {
        this.panNode.setPosition(this._pan, 0, -0.5);
    };
    p._removeLooping = function() {
        this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);
    };
    p._addLooping = function() {
        if (this.playState != createjs.Sound.PLAY_SUCCEEDED) {
            return;
        }
        this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);
    };
    p._setDurationFromSource = function() {
        this._duration = this.playbackResource.duration * 1000;
    };
    p._handleCleanUp = function() {
        if (this.sourceNode && this.playState == createjs.Sound.PLAY_SUCCEEDED) {
            this.sourceNode = this._cleanUpAudioNode(this.sourceNode);
            this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);
        }
        if (this.gainNode.numberOfOutputs != 0) {
            this.gainNode.disconnect(0);
        }
        clearTimeout(this._soundCompleteTimeout);
        this._playbackStartTime = 0;
    };
    p._cleanUpAudioNode = function(audioNode) {
        if (audioNode) {
            audioNode.stop(0);
            audioNode.disconnect(0);
            audioNode = null;
        }
        return audioNode;
    };
    p._handleSoundReady = function(event) {
        this.gainNode.connect(s.destinationNode);
        var dur = this._duration * 0.001;
        var pos = this._position * 0.001;
        this.sourceNode = this._createAndPlayAudioNode((s.context.currentTime - dur), pos);
        this._playbackStartTime = this.sourceNode.startTime - pos;
        this._soundCompleteTimeout = setTimeout(this._endedHandler, (dur - pos) * 1000);
        if (this._loop != 0) {
            this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);
        }
    };
    p._createAndPlayAudioNode = function(startTime, offset) {
        var audioNode = s.context.createBufferSource();
        audioNode.buffer = this.playbackResource;
        audioNode.connect(this.panNode);
        var dur = this._duration * 0.001;
        audioNode.startTime = startTime + dur;
        audioNode.start(audioNode.startTime, offset + (this._startTime * 0.001), dur - offset);
        return audioNode;
    };
    p._pause = function() {
        this._position = (s.context.currentTime - this._playbackStartTime) * 1000;
        this.sourceNode = this._cleanUpAudioNode(this.sourceNode);
        this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);
        if (this.gainNode.numberOfOutputs != 0) {
            this.gainNode.disconnect(0);
        }
        clearTimeout(this._soundCompleteTimeout);
    };
    p._resume = function() {
        this._handleSoundReady();
    };
    p._updateVolume = function() {
        var newVolume = this._muted ? 0 : this._volume;
        if (newVolume != this.gainNode.gain.value) {
            this.gainNode.gain.value = newVolume;
        }
    };
    p._calculateCurrentPosition = function() {
        return ((s.context.currentTime - this._playbackStartTime) * 1000);
    };
    p._updatePosition = function() {
        this.sourceNode = this._cleanUpAudioNode(this.sourceNode);
        this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);
        clearTimeout(this._soundCompleteTimeout);
        if (!this._paused) {
            this._handleSoundReady();
        }
    };
    p._handleLoop = function() {
        this._cleanUpAudioNode(this.sourceNode);
        this.sourceNode = this._sourceNodeNext;
        this._playbackStartTime = this.sourceNode.startTime;
        this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);
        this._soundCompleteTimeout = setTimeout(this._endedHandler, this._duration);
    };
    p._updateDuration = function() {
        this._pause();
        this._resume();
    };
    createjs.WebAudioSoundInstance = createjs.promote(WebAudioSoundInstance, "AbstractSoundInstance");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function WebAudioPlugin() {
        this.AbstractPlugin_constructor();
        this._panningModel = s._panningModel;;
        this._volume = 1;
        this.context = s.context;
        this.dynamicsCompressorNode = this.context.createDynamicsCompressor();
        this.dynamicsCompressorNode.connect(this.context.destination);
        this.gainNode = this.context.createGain();
        this.gainNode.connect(this.dynamicsCompressorNode);
        createjs.WebAudioSoundInstance.destinationNode = this.gainNode;
        this._capabilities = s._capabilities;
        this._loaderClass = createjs.WebAudioLoader;
        this._soundInstanceClass = createjs.WebAudioSoundInstance;
        this._addPropsToClasses();
    }
    var p = createjs.extend(WebAudioPlugin, createjs.AbstractPlugin);
    var s = WebAudioPlugin;
    s._capabilities = null;
    s._panningModel = "equalpower";
    s.context = null;
    s.isSupported = function() {
        var isMobilePhoneGap = createjs.BrowserDetect.isIOS || createjs.BrowserDetect.isAndroid || createjs.BrowserDetect.isBlackberry;
        if (location.protocol == "file:" && !isMobilePhoneGap && !this._isFileXHRSupported()) {
            return false;
        }
        s._generateCapabilities();
        if (s.context == null) {
            return false;
        }
        return true;
    };
    s.playEmptySound = function() {
        var source = s.context.createBufferSource();
        source.buffer = s.context.createBuffer(1, 1, 22050);
        source.connect(s.context.destination);
        source.start(0, 0, 0);
    };
    s._isFileXHRSupported = function() {
        var supported = true;
        var xhr = new XMLHttpRequest();
        try {
            xhr.open("GET", "WebAudioPluginTest.fail", false);
        } catch (error) {
            supported = false;
            return supported;
        }
        xhr.onerror = function() {
            supported = false;
        };
        xhr.onload = function() {
            supported = this.status == 404 || (this.status == 200 || (this.status == 0 && this.response != ""));
        };
        try {
            xhr.send();
        } catch (error) {
            supported = false;
        }
        return supported;
    };
    s._generateCapabilities = function() {
        if (s._capabilities != null) {
            return;
        }
        var t = document.createElement("audio");
        if (t.canPlayType == null) {
            return null;
        }
        if (s.context == null) {
            if (window.AudioContext) {
                s.context = new AudioContext();
            } else if (window.webkitAudioContext) {
                s.context = new webkitAudioContext();
            } else {
                return null;
            }
        }
        s._compatibilitySetUp();
        s.playEmptySound();
        s._capabilities = {
            panning: true,
            volume: true,
            tracks: -1
        };
        var supportedExtensions = createjs.Sound.SUPPORTED_EXTENSIONS;
        var extensionMap = createjs.Sound.EXTENSION_MAP;
        for (var i = 0, l = supportedExtensions.length; i < l; i++) {
            var ext = supportedExtensions[i];
            var playType = extensionMap[ext] || ext;
            s._capabilities[ext] = (t.canPlayType("audio/" + ext) != "no" && t.canPlayType("audio/" + ext) != "") || (t.canPlayType("audio/" + playType) != "no" && t.canPlayType("audio/" + playType) != "");
        }
        if (s.context.destination.numberOfChannels < 2) {
            s._capabilities.panning = false;
        }
    };
    s._compatibilitySetUp = function() {
        s._panningModel = "equalpower";
        if (s.context.createGain) {
            return;
        }
        s.context.createGain = s.context.createGainNode;
        var audioNode = s.context.createBufferSource();
        audioNode.__proto__.start = audioNode.__proto__.noteGrainOn;
        audioNode.__proto__.stop = audioNode.__proto__.noteOff;
        s._panningModel = 0;
    };
    p.toString = function() {
        return "[WebAudioPlugin]";
    };
    p._addPropsToClasses = function() {
        var c = this._soundInstanceClass;
        c.context = this.context;
        c.destinationNode = this.gainNode;
        c._panningModel = this._panningModel;
        this._loaderClass.context = this.context;
    };
    p._updateVolume = function() {
        var newVolume = createjs.Sound._masterMute ? 0 : this._volume;
        if (newVolume != this.gainNode.gain.value) {
            this.gainNode.gain.value = newVolume;
        }
    };
    createjs.WebAudioPlugin = createjs.promote(WebAudioPlugin, "AbstractPlugin");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function TagPool(src) {
        this.src = src;
        this.length = 0;
        this.available = 0;
        this.tags = [];
        this.duration = 0;
    };
    var p = TagPool.prototype;
    p.constructor = TagPool;
    var s = TagPool;
    s.tags = {};
    s.get = function(src) {
        var channel = s.tags[src];
        if (channel == null) {
            channel = s.tags[src] = new TagPool(src);
        }
        return channel;
    };
    s.remove = function(src) {
        var channel = s.tags[src];
        if (channel == null) {
            return false;
        }
        channel.removeAll();
        delete(s.tags[src]);
        return true;
    };
    s.getInstance = function(src) {
        var channel = s.tags[src];
        if (channel == null) {
            return null;
        }
        return channel.get();
    };
    s.setInstance = function(src, tag) {
        var channel = s.tags[src];
        if (channel == null) {
            return null;
        }
        return channel.set(tag);
    };
    s.getDuration = function(src) {
        var channel = s.tags[src];
        if (channel == null) {
            return 0;
        }
        return channel.getDuration();
    };
    p.add = function(tag) {
        this.tags.push(tag);
        this.length++;
        this.available++;
    };
    p.removeAll = function() {
        var tag;
        while (this.length--) {
            tag = this.tags[this.length];
            if (tag.parentNode) {
                tag.parentNode.removeChild(tag);
            }
            delete(this.tags[this.length]);
        }
        this.src = null;
        this.tags.length = 0;
    };
    p.get = function() {
        if (this.tags.length == 0) {
            return null;
        }
        this.available = this.tags.length;
        var tag = this.tags.pop();
        if (tag.parentNode == null) {
            document.body.appendChild(tag);
        }
        return tag;
    };
    p.set = function(tag) {
        var index = createjs.indexOf(this.tags, tag);
        if (index == -1) {
            this.tags.push(tag);
        }
        this.available = this.tags.length;
    };
    p.getDuration = function() {
        if (!this.duration) {
            this.duration = this.tags[this.tags.length - 1].duration * 1000;
        }
        return this.duration;
    };
    p.toString = function() {
        return "[HTMLAudioTagPool]";
    };
    createjs.HTMLAudioTagPool = TagPool;
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function HTMLAudioSoundInstance(src, startTime, duration, playbackResource) {
        this.AbstractSoundInstance_constructor(src, startTime, duration, playbackResource);
        this._audioSpriteStopTime = null;
        this._delayTimeoutId = null;
        this._endedHandler = createjs.proxy(this._handleSoundComplete, this);
        this._readyHandler = createjs.proxy(this._handleTagReady, this);
        this._stalledHandler = createjs.proxy(this.playFailed, this);
        this._audioSpriteEndHandler = createjs.proxy(this._handleAudioSpriteLoop, this);
        this._loopHandler = createjs.proxy(this._handleSoundComplete, this);
        if (duration) {
            this._audioSpriteStopTime = (startTime + duration) * 0.001;
        } else {
            this._duration = createjs.HTMLAudioTagPool.getDuration(this.src);
        }
    }
    var p = createjs.extend(HTMLAudioSoundInstance, createjs.AbstractSoundInstance);
    p.setMasterVolume = function(value) {
        this._updateVolume();
    };
    p.setMasterMute = function(isMuted) {
        this._updateVolume();
    };
    p.toString = function() {
        return "[HTMLAudioSoundInstance]";
    };
    p._removeLooping = function() {
        if (this._playbackResource == null) {
            return;
        }
        this._playbackResource.loop = false;
        this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
    };
    p._addLooping = function() {
        if (this._playbackResource == null || this._audioSpriteStopTime) {
            return;
        }
        this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
        this._playbackResource.loop = true;
    };
    p._handleCleanUp = function() {
        var tag = this._playbackResource;
        if (tag != null) {
            tag.pause();
            tag.loop = false;
            tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);
            tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);
            tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);
            tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
            tag.removeEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);
            try {
                tag.currentTime = this._startTime;
            } catch (e) {}
            createjs.HTMLAudioTagPool.setInstance(this.src, tag);
            this._playbackResource = null;
        }
    };
    p._beginPlaying = function(offset, loop, volume, pan) {
        this._playbackResource = createjs.HTMLAudioTagPool.getInstance(this.src);
        return this.AbstractSoundInstance__beginPlaying(offset, loop, volume, pan);
    };
    p._handleSoundReady = function(event) {
        if (this._playbackResource.readyState !== 4) {
            var tag = this._playbackResource;
            tag.addEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);
            tag.addEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);
            tag.preload = "auto";
            tag.load();
            return;
        }
        this._updateVolume();
        this._playbackResource.currentTime = (this._startTime + this._position) * 0.001;
        if (this._audioSpriteStopTime) {
            this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);
        } else {
            this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);
            if (this._loop != 0) {
                this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
                this._playbackResource.loop = true;
            }
        }
        this._playbackResource.play();
    };
    p._handleTagReady = function(event) {
        this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);
        this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);
        this._handleSoundReady();
    };
    p._pause = function() {
        this._playbackResource.pause();
    };
    p._resume = function() {
        this._playbackResource.play();
    };
    p._updateVolume = function() {
        if (this._playbackResource != null) {
            var newVolume = (this._muted || createjs.Sound._masterMute) ? 0 : this._volume * createjs.Sound._masterVolume;
            if (newVolume != this._playbackResource.volume) {
                this._playbackResource.volume = newVolume;
            }
        }
    };
    p._calculateCurrentPosition = function() {
        return (this._playbackResource.currentTime * 1000) - this._startTime;
    };
    p._updatePosition = function() {
        this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
        this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._handleSetPositionSeek, false);
        try {
            this._playbackResource.currentTime = (this._position + this._startTime) * 0.001;
        } catch (error) {
            this._handleSetPositionSeek(null);
        }
    };
    p._handleSetPositionSeek = function(event) {
        if (this._playbackResource == null) {
            return;
        }
        this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._handleSetPositionSeek, false);
        this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
    };
    p._handleAudioSpriteLoop = function(event) {
        if (this._playbackResource.currentTime <= this._audioSpriteStopTime) {
            return;
        }
        this._playbackResource.pause();
        if (this._loop == 0) {
            this._handleSoundComplete(null);
        } else {
            this._position = 0;
            this._loop--;
            this._playbackResource.currentTime = this._startTime * 0.001;
            if (!this._paused) {
                this._playbackResource.play();
            }
            this._sendEvent("loop");
        }
    };
    p._handleLoop = function(event) {
        if (this._loop == 0) {
            this._playbackResource.loop = false;
            this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
        }
    };
    p._updateDuration = function() {
        this._audioSpriteStopTime = (startTime + duration) * 0.001;
        if (this.playState == createjs.Sound.PLAY_SUCCEEDED) {
            this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);
            this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);
        }
    };
    createjs.HTMLAudioSoundInstance = createjs.promote(HTMLAudioSoundInstance, "AbstractSoundInstance");
}());
this.createjs = this.createjs || {};
(function() {
    "use strict";

    function HTMLAudioPlugin() {
        this.AbstractPlugin_constructor();
        this.defaultNumChannels = 2;
        this._capabilities = s._capabilities;
        this._loaderClass = createjs.SoundLoader;
        this._soundInstanceClass = createjs.HTMLAudioSoundInstance;
    }
    var p = createjs.extend(HTMLAudioPlugin, createjs.AbstractPlugin);
    var s = HTMLAudioPlugin;
    s.MAX_INSTANCES = 30;
    s._AUDIO_READY = "canplaythrough";
    s._AUDIO_ENDED = "ended";
    s._AUDIO_SEEKED = "seeked";
    s._AUDIO_STALLED = "stalled";
    s._TIME_UPDATE = "timeupdate";
    s._capabilities = null;
    s.enableIOS = false;
    s.isSupported = function() {
        s._generateCapabilities();
        if (s._capabilities == null) {
            return false;
        }
        return true;
    };
    s._generateCapabilities = function() {
        if (s._capabilities != null) {
            return;
        }
        var t = document.createElement("audio");
        if (t.canPlayType == null) {
            return null;
        }
        s._capabilities = {
            panning: true,
            volume: true,
            tracks: -1
        };
        var supportedExtensions = createjs.Sound.SUPPORTED_EXTENSIONS;
        var extensionMap = createjs.Sound.EXTENSION_MAP;
        for (var i = 0, l = supportedExtensions.length; i < l; i++) {
            var ext = supportedExtensions[i];
            var playType = extensionMap[ext] || ext;
            s._capabilities[ext] = (t.canPlayType("audio/" + ext) != "no" && t.canPlayType("audio/" + ext) != "") || (t.canPlayType("audio/" + playType) != "no" && t.canPlayType("audio/" + playType) != "");
        }
    };
    p.register = function(loadItem, instances) {
        var channel = createjs.HTMLAudioTagPool.get(loadItem.src);
        var tag = null;
        for (var i = 0; i < instances; i++) {
            tag = this._createTag(loadItem.src);
            channel.add(tag);
        }
        var loader = this.AbstractPlugin_register(loadItem, instances);
        loader.setTag(tag);
        return loader;
    };
    p.removeSound = function(src) {
        this.AbstractPlugin_removeSound(src);
        createjs.HTMLAudioTagPool.remove(src);
    };
    p.create = function(src, startTime, duration) {
        var si = this.AbstractPlugin_create(src, startTime, duration);
        si.setPlaybackResource(null);
        return si;
    };
    p.toString = function() {
        return "[HTMLAudioPlugin]";
    };
    p.setVolume = p.getVolume = p.setMute = null;
    p._createTag = function(src) {
        var tag = document.createElement("audio");
        tag.autoplay = false;
        tag.preload = "none";
        tag.src = src;
        return tag;
    };
    createjs.HTMLAudioPlugin = createjs.promote(HTMLAudioPlugin, "AbstractPlugin");
}());
GodStep.Preloader = function(soul) {
    this.preloadState = 0;
    GodStep.Preloader.textures = [];
    this.startS = soul.startS;
    this.soul = soul;
    this.isAudioTag = soul.AUDIOTAG;
    this.isOnlyOneView = true;
    GodStep.Frame.call(this, 'Preloader', soul.W, soul.H);
    PIXI.EventTarget.call(this);
};
extend(GodStep.Preloader, GodStep.Frame);
GodStep.ASSETS_LOADED = 'assets loaded';
GodStep.SOUNDS_LOADED = 'sounds loaded';
pro.loadAll = function(pathImages, pngs, jpgs, pathSounds, sounds, assets) {
    this.textures = [];
    this.pathImages = pathImages;
    var i, img;
    this.images = pngs;
    this.assets = assets;
    this.exts = [];
    for (i = 0; i < this.images.length; i++) {
        this.exts.push('.png');
    }
    for (i = 0; i < jpgs.length; i++) {
        this.images.push(jpgs[i]);
        this.exts.push('.jpg');
    }
    this.imagesCount = this.images.length;
    if (this.images.length > 0) {
        img = GodStep.Image.fromImage(this.pathImages + this.images[0] + this.exts[0]);
        img.p = this;
        img.texName = this.images[0];
        this.textures[img.texName] = img.texture;
    }
    this.initSounds(pathSounds, sounds);
    this.soundsCount = sounds.length;
    if (this.images.length == 0) {
        this.isImagesComplete = true;
        this.loadSounds();
    }
};
pro.trace = function(v) {
    trace(v);
};
pro.initSounds = function(soundPath, arr) {
    this.trace('init sounds');
    GodStep.Game.instance.sound = {};
    var sounds = [];
    var isLoop = false;
    for (var i = 0; i < arr.length; i++) {
        var name = arr[i];
        isLoop = false;
        if (name.length > 4) {
            if (name.substr(0, 4) == 'loop') {
                isLoop = true;
                name = name.substr(5, name.length - 5);
            }
        }
        sounds.push({
            src: name,
            id: name,
            loop: isLoop
        });
    }
    this.soundPath = soundPath;
    GodStep.Game.instance.sound.needLoaded = this.needLoaded = this.sounds = sounds;
};
pro.loadSound = function(url, vol, loop) {
    var audio = new Audio();
    if (loop) {
        audio.addEventListener('ended', function() {
            audio.currentTime = 0;
            audio.play();
        }, false);
    }
    this.sounds.push(audio);
    audio.src = url;
    audio.preload = "auto";
    audio.volume = vol;
    audio.preloader = this;
    audio.onloadeddata = this.launchApp;
    audio.load();
    return audio;
};
pro.launchApp = function(launch) {
    var preloader = this.preloader;
    preloader.audio_preload++;
    if (preloader.audio_preload == preloader.needLoaded.length || launch == 1) {
        preloader.startSounds();
    } else {
        preloader.loadSound(GodPath + preloader.soundPath + preloader.needLoaded[preloader.audio_preload].src + "." + preloader.support.audio, 1, preloader.needLoaded[preloader.audio_preload].loop);
    }
};
pro.startSounds = function() {
    this.loadAssets();
};
pro.loadSounds = function() {
    if (this.isAudioTag) {
        this.support = {};
        this.audio_preload = 0;
        GodStep.Game.instance.sound.sounds = this.sounds = [];
        GodStep.Game.instance.sound.AVAILABLE = true;
        var a = document.createElement('audio');
        var ogg = !!(a.canPlayType && a.canPlayType('audio/ogg; codecs="vorbis"').replace(/no/, ''));
        var mp3 = !!(a.canPlayType && a.canPlayType('audio/mpeg;').replace(/no/, ''));
        if (ogg) {
            trace('ogg');
            this.support.audio = 'ogg';
        } else
        if (mp3) {
            trace('mp3');
            this.support.audio = 'mp3';
        } else {
            trace('no sound supported');
            this.support.audio = 'no';
            GodStep.Game.instance.sound.AVAILABLE = false;
            this.startSounds();
            return 0;
        }
        this.loadSound(GodPath + this.soundPath + this.needLoaded[0].src + "." + this.support.audio, 1, this.needLoaded[0].loop);
    } else {
        this.trace('loadSounds');
        var sound = GodStep.Game.instance.sound = {
            preloader: this
        };
        sound.AVAILABLE = true;
        if (window['createjs']) {
            if (createjs.BrowserDetect.isIOS || createjs.BrowserDetect.isAndroid || createjs.BrowserDetect.isBlackberry) {
                this.ISMOBILE = true;
            }
        } else {
            sound.AVAILABLE = false;
            GodStep.Game.instance.sound = {};
            this.loadAssets();
            return;
        }
        if (sound.AVAILABLE) {}
        if (!this.soul.isNativeAndroid) {
            if (!createjs.Sound.initializeDefaultPlugins()) {
                sound.AVAILABLE = false;
                this.loadAssets();
                return;
            }
            if (sound.AVAILABLE) {
                for (var i = 0; i < this.sounds.length; i++) {
                    this.sounds[i].src += '.ogg';
                }
                createjs.Sound.alternateExtensions = ["mp3"];
                createjs.Sound.addEventListener("fileload", this.h_loadedSound);
                sound.countLoaded = this.sounds.length;
                createjs.Sound.addEventListener("fileload", createjs.proxy(this.h_loadedSound, this));
                createjs.Sound.registerSounds(this.sounds, GodPath + this.soundPath);
            } else {
                GodStep.Game.instance.sound = {};
                this.loadAssets();
            }
        } else {
            sound.AVAILABLE = false;
            GodStep.Game.instance.sound = {};
            this.loadAssets();
        }
    }
};
pro.update = function() {
    if (!this.isImagesComplete) {
        var img;
        if (this.images) {
            for (var im in this.images) {
                var tex = this.textures[this.images[im]];
                if (tex) {
                    if (tex.baseTexture.hasLoaded) {
                        this.exts.splice(this.images.indexOf(this.images[im]), 1);
                        this.images.splice(this.images.indexOf(this.images[im]), 1);
                        if (this.images.length > 0) {
                            img = GodStep.Image.fromImage(this.pathImages + this.images[0] + this.exts[0]);
                            img.p = this;
                            img.texName = this.images[0];
                            this.textures[img.texName] = img.texture;
                        }
                        if (this.images.length > 0) {
                            for (var i = 0; i < 10; i++) {
                                if (this.images[i]) {
                                    img = GodStep.Image.fromImage(this.pathImages + this.images[i] + this.exts[i]);
                                    img.p = this;
                                    img.texName = this.images[i];
                                    this.textures[img.texName] = img.texture;
                                }
                            }
                        }
                    }
                }
            }
            if (this.images.length == 0) {
                this.isImagesComplete = true;
                GodStep.textures = this.textures;
                this.loadSounds();
            }
        }
    }
};
pro.loadAssets = function() {
    this.trace('loading assets');
    if (this.assets) {
        var assetsToLoader;
        if (window['GodAssetsPath'] != undefined) {
            assetsToLoader = [window['GodAssetsPath'] + this.assets[0]];
        } else {
            assetsToLoader = [this.pathImages + this.assets[0]];
        }
        var loader;
        if (this.fontLoaderClass) {
            loader = new this.fontLoaderClass(assetsToLoader);
            dispatch(this, GodStep.ASSETS_LOADED);
        } else {
            loader = new PIXI.AssetLoader(assetsToLoader);
            loader.onComplete = this.h_loadedAssets;
            loader.preloader = this;
            loader.load();
        }
    } else {
        dispatch(this, GodStep.ASSETS_LOADED);
    }
};
pro.h_loadedSound = function(e) {
    var sound = GodStep.Game.instance.sound;
    this.trace('sound loaded ' + sound.countLoaded);
    sound.countLoaded--;
    if (sound.countLoaded == 0) {
        sound.preloader.loadAssets();
    }
};
pro.h_loadedAssets = function(e) {
    this.preloader.trace('sound game');
    dispatch(this.preloader, GodStep.ASSETS_LOADED);
};
GodStep.Text = function(t, size, font, align, color) {
    this.font = font || 'Arial';
    this.size = size || 15;
    this.align = (align || "center");
    PIXI.Text.call(this, t, {
        font: this.size + "px " + this.font,
        align: this.align,
        fill: (color) ? ('#' + color.toString(16)) : '#000000'
    });
};
extend(GodStep.Text, PIXI.Text);
pro.place = function(x, y) {
    this.x = x;
    this.y = y;
};
pro.centerX = function(w, y) {
    this.y = y;
    this.x = w / 2 - this.width / 2;
};
pro.setColor = function(color) {
    this.style.fill = '#' + color.toString(16);
};
pro.setFont = function(font) {
    this.font = font;
    this.style.font = this.size + 'px ' + this.font;
    this.updateText();
};
pro.setSize = function(size) {
    this.size = size;
    this.style.font = this.size + 'px ' + this.font;
    this.updateText();
};
GodStep.LocalStorage = function() {
    GodStep.LocalStorage.instance = this;
    try {
        if ('localStorage' in window && window['localStorage'] !== null) {
            this.storage = window['localStorage'];
            window.addEventListener("storage", this.h_storage, false);
            this.isAvailable = true;
        }
    } catch (e) {
        this.isAvailable = false;
    }
};
extend(GodStep.LocalStorage, Object);
pro.getData = function(slot) {
    if (!this.isAvailable) {
        return null;
    }
    var data = this.storage.getItem(slot || "data");
    if (data != null) return JSON.parse(data);
    else {
        trace('no data');
        return null;
    }
};
pro.setData = function(data, slot) {
    if (!this.isAvailable) return;
    var d = JSON.stringify(data);
    trace('local storage [' + (slot || 'data') + ']');
    trace(d);
    try {
        this.storage.setItem(slot || "data", d);
    } catch (e) {
        trace('LOCAL STORAGE ERROR');
    }
};
GodStep.Clear = function(slot) {
    GodStep.LocalStorage.instance.setData(null, slot);
};
GodStep.SaveLocal = function(data, slot) {
    GodStep.LocalStorage.instance.setData(data, slot);
};
GodStep.LoadText = function(text) {
    return JSON.parse(text);
};
GodStep.LoadLocal = function(slot) {
    return GodStep.LocalStorage.instance.getData(slot);
};
pro.h_storage = function(e) {
    trace('storage' + e);
};
GodStep.FPS = function(soul, color) {
    GodStep.Frame.call(this, 'FPS', soul.W, soul.H);
    this.addChild(this.text = new GodStep.Text('0', 30, 'Arial', 'left', color || 0x000000));
    this.startTime = Date.now();
    this.soul = soul;
    this.prevTime = this.startTime;
    this.msMin = Infinity;
    this.msMax = 0;
    this.fpsMin = Infinity;
    this.fpsMax = 0;
    this.frames = 0;
    this.lastValue = 0;
};
extend(GodStep.FPS, GodStep.Frame);
pro.addString = function(v) {
    this.plusString = v;
};
pro.end = function() {
    var time = Date.now();
    var ms = time - this.startTime;
    this.msMin = Math.min(this.msMin, ms);
    this.msMax = Math.max(this.msMax, ms);
    if (time > this.prevTime + 100) {
        var fps = Math.round((this.frames * 1000) / (time - this.prevTime));
        this.lastValue += (fps - this.lastValue) * .3;
        this.fpsMin = Math.min(this.fpsMin, this.lastValue);
        this.fpsMax = Math.max(this.fpsMax, this.lastValue);
        this.text.setText(Math.round(this.lastValue) + " " + this.plusString);
        this.prevTime = time;
        this.frames = 0;
    }
    this.frames++;
    this.y = 0;
};
pro.begin = function() {
    this.startTime = Date.now();
};
AG.AmazingGrabber = function(lang) {
    AG.TUTOR = true;
    AG.SOUND = AG.MUSIC = true;
    GodStep.Game.TRANSPARENT = true;
    if (AG.CLICK_JOGOS) {
        this.lang = new AG.Lang('cj');
    } else
    if (AG.SOFT_GAMES) {
        this.lang = new AG.Lang(lang);
    } else {
        this.lang = new AG.Lang('EN');
    }
    GodStep.Game.call(this, 'AmazingGrabber', 0xff00ff, AG.Assets, 'ag_settings8', 'ag_player3', AG.DEFAULT_SETTINGS, 'auto');
    AG.AmazingGrabber.instance = this;
    this.SHOP_SLOT = 'ag_shop2';
};
extend(AG.AmazingGrabber, GodStep.Game);
AG.CLICK_JOGOS = false;
AG.SOFT_GAMES = false;
AG.SCALE = 2;
AG.IMAGE_PATH = GodPath+'src/img5/';
AG.SOUND_PATH = GodPath+'src/sounds/';
AG.DEFAULT_SETTINGS = '{"s_handSpeed":541,"s_speedGrow":0.22,"s_handWait":0.19,"s_spawnTimeMin":0.5,"s_spawnTimeMax":2,"s_hitCountSafe":6,"s_spawnSafeTimeMin":5,"s_spawnSafeTimeMax":18,"s_spawnSafeLife":12,"s_spawnXTimeMin":20,"s_spawnXTimeMax":50,"s_handSpeedBack":400,"s_cristalGravity":69,"s_speedMultiplier":51,"s_spawnTimeIncreaseMax":190,"s_spawnTimeIncreaseMin":120,"s_prize1Chance":54,"s_prize2Chance":80,"s_prize3Chance":93,"s_prize4Chance":100}';
pro.update = function() {
    this.beginFps();
    GodStep.Mejdu.prototype.update.call(this);
    this.endFps();
};
pro.run = function() {
    if (!this.isRunning) {
        trace(this.W + " " + this.H + " " + this.SW);
        trace('running');
        this.isRunning = true;
        this.delFrame(this.assets);
        this.stage.addChild(this.container = new PIXI.DisplayObjectContainer());
        this.addFrame(this.background = new AG.Background(this));
        this.addFrame(this.startmenu = new AG.StartMenu(this));
        this.addFrame(this.settings = new AG.Settings(this));
        this.addFrame(this.gameplay = new AG.GamePlay(this));
        this.addFrame(this.shop = new AG.Shop(this));
        this.addFrame(this.gameover = new AG.GameOver(this));
        this.addFrame(this.dev = new AG.Dev(this));
        this.addFrame(this.splash = new AG.Splash(this));
        this.addFrame(this.transmission = new AG.Transmission(this));
        if (AG.CLICK_JOGOS) {
            this.screenTo([this.splash], this.assets);
        } else {
            this.screenTo([this.startmenu, this.background], this.assets);
        }
        this.addFrame(this.topSprite = new AG.TopSprite(this));
        this.topSprite.visible = false;
        this.addFrame(this.fps = new GodStep.FPS(this, 0x22aa00));
        this.fps.addString((this.CANVAS) ? 'canvas' : 'webgl');
        this.fps.visible = false;
        this.reposition();
    }
};
AG.GameOver = function(soul) {
    this.soul = soul;
    AG.NEW_RECORD = false;
    GodStep.Frame.call(this, 'GameOver', soul.SW, soul.SH);
    GodStep.IDownUp.call(this, this.W, this.H);
    var S = soul.startS;
    this.startS = soul.startS;
    this.addChild(this.static = new PIXI.DisplayObjectContainer());
    this.static.addChild(this.back = new AG.Back(soul, 'end_3', 0xfccd3a, this));
    this.static.timerCache = 0;
    var by = .85;
    this.static.addChild(this.field_cup = new AG.Img('field_cup', S, this.W * .72, this.H * .19, 0.5));
    this.static.addChild(this.field_coin = new AG.Img('field_coin', S, this.W * .28, this.H * .19, 0.5));
    this.static.addChild(this.b_shadow_lil1 = new AG.Img('b_shadow_lil', S * .55, this.W * .168, this.H * .2, 0.5));
    this.static.addChild(this.b_shadow_lil2 = new AG.Img('b_shadow_lil', S * .55, this.W * .605, this.H * .2, 0.5));
    this.static.addChild(this.coin = new AG.Img('coin', S, this.W * .168, this.H * .175, 0.5));
    this.static.addChild(this.cup = new AG.Img('cup', S, this.W * .605, this.H * .175, 0.5));
    this.addChild(this.maska = this.createGraphics());
    this.addChild(this.b_startmenu = new AG.ImgButton('b_menu', 'b_shadow', 1.1, this, S, this.W * .2, this.H * by));
    this.addChild(this.b_restart = new AG.ImgButton('b_replay', 'b_shadow', 1.1, this, S, this.W * .5, this.H * by));
    this.addChild(this.b_shop = new AG.ImgButton('b_inapp', 'b_shadow', 1.1, this, S, this.W * .8, this.H * by));
    this.static.addChild(this.fieldSlider = new AG.Img('field_slider', S, this.W * .5, this.H * .4, 0.5));
    this.addChild(this.sliderShadow = new AG.Img('slider_shadow', S, this.W * .5, this.H * .42, 0.5));
    this.addChild(this.sliderBack = new AG.Img('slider_1', S, this.W * .5, this.H * .4, 0.5));
    this.addChild(this.slider = new AG.Img('slider_2', S, this.W * .5, this.H * .4, 0.5));
    this.static.addChild(this.fieldRecord = new AG.Img('field_new_record', S, this.W * .73, this.H * .09, .5));
    this.static.addChild(this.textRecord = new AG.Text(AG.S('newrecord'), 77 * S, this.W * .618, this.H * .056, 'right'));
    this.maska.beginFill(0, 1);
    this.maska.drawRect(0, 0, this.slider.width, this.H * .2);
    this.maska.endFill();
    this.slider.mask = this.maska;
    this.maska.x = this.slider.x - this.slider.width / 2;
    this.maska.y = this.slider.y - this.slider.height;
    this.static.addChild(this.roundMoney = new AG.Text('', 110 * S, this.W * .23, this.H * .15, 'right'));
    this.static.addChild(this.bestMoney = new AG.Text('', 110 * S, this.W * .67, this.H * .15, 'right'));
    this.static.addChild(this.totalMoney = new AG.Text('', 130 * S, this.W * .13, this.H * .27, 'right'));
    this.static.addChild(this.till = new AG.Text('', 92 * S, this.W * .13, this.H * .44, 'right', 0xfff04b));
    this.till.alpha = .9;
    this.static.addChild(this.textReward = new AG.Text(AG.S('youunlocked'), 89 * S, this.W * .03, this.H * .5, 'right', 0xff3a5f));
    this.maska.x = -this.slider.width;
    this.static.addChild(this.rewardSprite = new PIXI.DisplayObjectContainer());
    this.rewardSprite.y = this.H * .58;
    this.rewards = [];
    var i;
    for (i = 0; i < 1; i++) {
        var rew = new AG.Img('field_icons_end', S, this.W * .5 + i * this.W * .24, this.W * .11, .5);
        this.rewardSprite.addChild(rew);
        this.rewards.push(rew);
        this.rewardSprite.addChild(this.shadow = new AG.Img('icons_shadow', S, this.W * .5 + i * this.W * .24, this.W * .11, .5));
        this.rewardSprite.addChild(this.icon = new AG.Img('empty', S, this.W * .5 + i * this.W * .24, this.W * .11, .5));
    }
    addEvent(this.b_startmenu, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_restart, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_shop, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
    AG.AmazingGrabber.LEVELS = this.levels = [0, 60, 150, 500, 1000, 2000, 2500, 3600, 3700, 4800, 5000, 6000, 6200, 6700, 7000, 8000, 10000, 12000, 15000, 18000, 25000, 50000, 55000, 60000, 180000, 100000000, 1000000000000];
    this.visible = false;
};
extend(AG.GameOver, GodStep.Frame);
pro.update = function() {
    if (this.visible) {
        if (this.static.timerCache-- == 0) {
            this.static.timerCache = -1;
            this.static.cacheAsBitmap = true;
        } else {
            if (this.static.timerCache < -10) {
                this.static.timerCache = -10;
            }
        }
        if (--this.progressDelayTimer == 0) {
            this.progressDelayTimer = 1;
            if (this.justUnclocked.length > 0) {
                this.maska.x += Math.min(this.W * .009, ((this.slider.x - this.slider.width / 2 + this.W * .01) - this.maska.x) * .2);
                if (this.maska.x > this.slider.x - this.slider.width / 2) {
                    this.static.cacheAsBitmap = false;
                    this.maska.x = this.slider.x - this.slider.width / 2 - this.slider.width;
                    this.icon.cacheAsBitmap = false;
                    this.icon.setImg(this.justUnclocked[0].data[1]);
                    this.rewardSprite.visible = this.textReward.visible = true;
                    this.icon.cacheAsBitmap = true;
                    this.icon.visible = true;
                    this.justUnclocked.splice(0, 1);
                    if (this.justUnclocked.length == 0) {
                        this.static.cacheAsBitmap = true;
                    }
                }
            } else {
                if (this.progressDelayTimer < -10) {
                    this.progressDelayTimer = -10;
                }
                this.maska.x += Math.min(this.W * .004, (this.maska.ox - this.maska.x) * .2);
            }
        }
    }
};
pro.init = function() {
    this.rewardSprite.visible = this.textReward.visible = false;
    this.progressDelayTimer = 5;
    this.static.cacheAsBitmap = false;
    var player = GodStep.LoadLocal(this.soul.PLAYER_SLOT);
    var shop = GodStep.LoadLocal(this.soul.SHOP_SLOT);
    this.fieldRecord.visible = this.textRecord.visible = AG.NEW_RECORD;
    this.totalMoney.setText(AG.S('total') + ': ' + player.totalMoney);
    this.bestMoney.setText('' + player.bestScore);
    this.roundMoney.setText('' + (this.soul.gameplay.roundMoney || 0));
    this.justUnclocked = [];
    var levelID = 0;
    var totalLastID = 0;
    var totalLast = this.soul.gameplay.lastTotalMoney;
    for (var i = 1; i < this.levels.length; i++) {
        if (this.levels[i] < totalLast) {
            totalLastID = i - 1;
        }
        if (this.levels[i] > player.totalScore) {
            levelID = i - 1;
            break;
        }
    }
    trace('level ' + levelID);
    var items = AG.AmazingGrabber.ITEMS;
    var lastItem;
    for (var j = 0; j < items.length; j++) {
        if (items[j].data[5] <= levelID && items[j].data[5] > totalLastID) {
            if (!items[j].isPurchased) {
                lastItem = items[j];
                if (lastItem.isLocked) {
                    lastItem.unlock();
                    this.justUnclocked.push(lastItem);
                }
            }
        }
    }
    if (this.justUnclocked.length > 0) {
        this.icon.cacheAsBitmap = false;
        this.icon.visible = false;
        this.icon.setImg(this.justUnclocked[0].data[1]);
        this.rewardSprite.visible = this.textReward.visible = true;
        this.icon.cacheAsBitmap = true;
    }
    this.till.setText(Math.floor(this.levels[levelID + 1] - player.totalMoney) + AG.S('toclaim'));
    var percent = ((this.levels[levelID + 1] - player.totalMoney) / (this.levels[levelID + 1]));
    this.maska.ox = this.slider.x - this.slider.width / 2 - this.slider.width * percent;
    if (this.maska.ox > this.maska.x) {} else {}
    this.visible = true;
    this.static.cacheAsBitmap = true;
};
AG.AmazingGrabber.getCostByLevel = function(level) {
    return level;
};
pro.h_buttons = function(e) {
    var t = e.content.t;
    var p = t.parent;
    var s = p.soul;
    if (!p.isGameOver) {
        switch (t) {
            case p.b_startmenu:
                GodStep.playSound('button', 0, AG.SOUND);
                s.screenTo([s.startmenu], p);
                break;
            case p.b_shop:
                GodStep.playSound('button', 0, AG.SOUND);
                s.screenTo([s.shop], p);
                break;
            case p.b_restart:
                GodStep.playSound('button', 0, AG.SOUND);
                p.static.cacheAsBitmap = false;
                s.screenTo([s.gameplay], p);
                break;
        }
    }
};
pro.h_mouse = function(e) {
    var t = e.content.target;
    switch (e.type) {
        case GodStep.FRAME_UP:
            if (e.content.target.soul) {
                t.b_startmenu.isDown = t.b_restart.isDown = t.b_shop.isDown = false;
                t.b_shop.Scale = t.b_startmenu.Scale = t.b_restart.Scale = 1;
            }
            break;
    }
};
pro.getBounds = function() {
    return new PIXI.Rectangle(0, -this.y, this.W, this.soul.OH / this.scale.x);
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.static.cacheAsBitmap = false;
        this.static.timerCache = 33;
        this.scale.x = this.scale.y = value;
        this.back.Scale = value;
        this.fieldSlider.scale.x = this.back.top.scale.x;
    }
});
AG.ItemIcon = function(itemDesc, parent, x, y, id) {
    GodStep.Frame.call(this, 'ItemIcon');
    var s = parent.startS;
    this.addChild(this.back = new AG.Img('field_icons', s, 0, 0, .5));
    this.addChild(this.shadow = new AG.Img('icons_shadow', s, 0, 0, .5));
    this.addChild(this.lock = new AG.Img('icons_lock', s, 0, 0, .5));
    this.addChild(this.icon = new AG.Img(itemDesc[1], s, 0, 0, .5));
    this.addChild(this.offBack = new AG.Img('field_icons_off', s, 0, 0, .5));
    this.addChild(this.label = new AG.Text(itemDesc[0] + "\n ", 75 * s, -(this.icon.width - 3) / 2, this.icon.height / 2 - 22 * s, 'center', 0xffffff));
    this.label.x = 0 - this.label.width / 2;
    this.icon.visible = false;
    this.offBack.visible = false;
    this.cacheAsBitmap = true;
    this.x = x;
    this.y = y;
    this.isLocked = true;
    this.data = itemDesc;
    GodStep.IDownUp.call(this, 0, 0);
    this.setHitArea(-this.back.width / 2, -this.back.height / 2, this.back.width, this.back.height);
};
extend(AG.ItemIcon, GodStep.Frame);
pro.getCost = function() {
    var cost = AG.AmazingGrabber.getCostByLevel(this.data[4]);
    return cost;
};
pro.purchase = function() {
    this.isPurchased = true;
};
pro.equip = function() {
    this.cacheAsBitmap = false;
    this.offBack.visible = !this.offBack.visible;
    this.isEquip = !this.offBack.visible;
    this.gameplay.equip(this.data, this.isEquip);
    this.cacheAsBitmap = true;
};
pro.locked = function() {
    this.cacheAsBitmap = false;
    this.isLocked = true;
    this.isPurchased = false;
    this.lock.visible = true;
    this.offBack.visible = false;
    this.icon.visible = false;
    this.cacheAsBitmap = true;
    this.gameplay.equip(this.data, false);
};
pro.unlock = function() {
    if (this.isLocked) {
        this.cacheAsBitmap = false;
        this.isLocked = false;
        this.lock.visible = false;
        this.offBack.visible = true;
        this.icon.visible = true;
        this.cacheAsBitmap = true;
    }
};
AG.Assets = function(soul) {
    GodStep.Preloader.call(this, soul);
    this.createGraphics();
    this.addChild(this.text = new GodStep.Text('', '20', 'Arial', 'left', 0xffffff));
    this.text.y = soul.H * .06;
    this.graphics.alpha = .2;
    this.text.alpha = .2;
    this.fontLoaderClass = AG.FontLoader;
};
extend(AG.Assets, GodStep.Preloader);
pro.trace = function(v) {
    this.text.setText(v);
    this.text.updateText();
    this.text.x = this.soul.W / 2 - this.text.width / 2;
};
pro.update = function() {
    GodStep.Preloader.prototype.update.call(this);
    if (this.visible) {
        var g = this.graphics;
        if (this.images) {
            if (0) {
                var w = this.soul.W;
                var h = this.soul.H;
                var wx = .2,
                    wxl = .6;
                g.clear();
                g.lineStyle(3, 0x555555, 1);
                g.moveTo(w * wx, h * .05);
                g.lineTo(w * (wx + wxl), h * .05);
                g.moveTo(w * wx, h * .1);
                g.lineTo(w * (wx + wxl), h * .1);
                g.lineStyle(3, 0xffffff, 1);
                g.moveTo(w * wx, h * .05);
                g.lineTo(w * wx + w * wxl * (1 - this.images.length / this.imagesCount), h * .05);
                if (GodStep.Game.instance.sound) {
                    g.lineStyle(3, 0xffffff, 1);
                    g.moveTo(w * wx, h * .1);
                    g.lineTo(w * wx + w * wxl * (1 - Math.max(0, GodStep.Game.instance.sound.countLoaded) / this.soundsCount), h * .1);
                }
            }
        }
    }
};
pro.load = function() {
    this.addChild(this.back = GodStep.Image.fromImage(AG.IMAGE_PATH + 'back_fundemic1.jpg', this.h_preload));
    this.addChild(this.logo = GodStep.Image.fromImage(AG.IMAGE_PATH + 'fundemic_logo.png', this.h_preload));
    this.addChild(this.loading = GodStep.Image.fromImage(AG.IMAGE_PATH + ((AG.CLICK_JOGOS) ? 'loading_pt.png' : 'loading.png'), this.h_preload));
    var countLoaded = 0;
    if (this.logo.texture.baseTexture.hasLoaded) {
        this.logo.Scale = this.startS;
        this.logo.anchor = new PIXI.Point(0.5, 0.5);
        this.logo.place(this.W / 2, this.H * .3);
        countLoaded++;
    }
    if (this.back.texture.baseTexture.hasLoaded) {
        this.back.Scale = this.startS;
        this.back.anchor = new PIXI.Point(0.5, 0.5);
        this.back.place(this.W / 2, this.H * .5);
        this.back.scale.y = this.soul.OH / this.soul.H * this.startS;
        countLoaded++;
    }
    if (this.loading.texture.baseTexture.hasLoaded) {
        this.loading.Scale = this.startS;
        this.loading.anchor = new PIXI.Point(0.5, 0.5);
        this.loading.place(this.W / 2, this.H * .7);
        var d = parseInt(this.loading.texture.height / 10);
        this.loading.texture.setFrame(new PIXI.Rectangle(0, d * (this.soul.lang.lang - 2), this.loading.texture.width, d));
        if (countLoaded == 2) {
            this.init();
        }
    }
};
pro.init = function() {
    var images = ['logo_2', 'back_tile', 'menu_3', 'b_inapp', 'field_slider', 'slider_shadow', 'slider_1', 'slider_2', 'b_replay', 'back_end_down', 'back_end_up', 'b_menu', 'inapp_3', 'coin', 'field_choose_on', 'cup', 'end_3', 'field_coin', 'b_shadow_lil', 'field_new_record', 'field_coin', 'character_2', 'field_cup', 'field_icons_end', 'b_options', 'b_play', 'b_shadow', 'b_music', 'b_music_off', 'b_sound_off', 'b_sound', 'back_popup_options', 'b_y_n', 'window_options', 'window_inapp', 'back_popup_inapp', 'flash_1', 'jewel', 'safe_1', 'safe_2', 'field_icons', 'field_icons_off', 'icons_lock', 'icons_shadow', 'x2', 'field_no_money', '1_damage_1', '1_damage_2', '1_damage_3', '1_damage_4', '1_damage_5', 'tail_1', 'tail_2', 'tail_3', 'tail_4', 'fall_1', 'fall_2', 'fall_3', 'fall_4', 'Font1', '2_damage_1', '2_damage_2', '2_damage_3', '2_damage_4', '2_damage_5', '2_damage_6', 'b_back', 'b_ep', 'b_ep_shadow', 'head', 'mouth_1', 'mouth_2', 'mouth_3', 'mouth_4', 'mouth_5_1', 'mouth_5_2', 'mouth_5_3', 'mouth_5_4', 'b_y_n_shadow', 'box_1', 'box_2', 'options_3', 'game_back', 'line', 'arm_1', 'arm_2', 'arm_3', 'eyes_1', 'eyes_2', 'eyes_3', 'eyes_1_1', 'eyes_4', 'eyes_4_1', 'worm_1', 'worm_2', 'worm_3', 'worm_4', 'worm_5', 'worm_6', 'worm_7', 'worm_8', 'worm_grab', 'candy_1', 'candy_2', 'candy_3', 'candy_4', 'candy_5', 'candy_6', 'candy_7', 'candy_8', 'candy_grab', 'bear_1', 'bear_2', 'bear_3', 'bear_4', 'bear_5', 'bear_6', 'bear_grab', 'fish_1', 'fish_2', 'fish_3', 'fish_4', 'fish_5', 'fish_6', 'fish_grab', 'empty', 'tap_1', 'tap_2', 'tap_3', 'splash', 'd_a_1', 'd_a_2', 'd_a_3_1', 'd_a_3_3', 'd_a_4_1', 'd_a_4_2', 'd_a_4_3', 'd_a_5', 'd_a_6', 'd_a_7_1', 'd_a_7_3', 'd_a_8_1', 'd_a_8_2', 'd_a_8_3', 'd_a_9', 'd_a_10', 'd_a_11_1', 'd_a_11_3', 'd_a_12_1', 'd_a_12_2', 'd_a_12_3', 'd_h_1_1', 'd_h_1_2', 'd_h_1_l', 'd_h_1_r', 'd_h_2', 'd_h_3', 'd_h_4_1', 'd_h_4_2', 'd_h_4_3', 'd_h_4_4', 'd_h_4_5', 'd_h_5', 'd_h_6', 'd_h_7', 'd_h_8_1', 'd_h_8_2', 'd_h_8_3', 'd_h_8_3', 'd_h_8_4', 'd_h_8_5_3', 'd_h_8_5_2', 'd_h_9', 'd_h_10', 'd_h_11_1', 'd_h_11_2', 'd_h_11_3', 'd_h_11_4', 'd_h_12', 'd_h_8_5_1'];
    for (var i = 0; i < 12; i++) {
        images.push('i_a_' + (i + 1));
        images.push('i_h_' + (i + 1));
    }
    GodStep.Preloader.prototype.loadAll.call(this, AG.IMAGE_PATH, images, [], AG.SOUND_PATH, ['button', 'catch', 'catch_1', 'catch_2', 'catch_3', 'daimond_fly', 'double_catch', 'theme_1', 'theme_2', 'voice_1', 'voice_2', 'voice_3', 'vault'], ['Font1.fnt']);
};
pro.h_preload = function(e) {
    var img = this.image;
    var p = img.parent;
    img.Scale = p.startS;
    img.anchor = new PIXI.Point(0.5, 0.5);
    p.preloadState++;
    switch (img) {
        case p.back:
            p.back.scale.y = p.soul.OH / p.soul.H * p.startS;
            p.back.place(p.W / 2, p.H * .5);
            break;
        case p.logo:
            p.logo.place(p.W / 2, p.H * .3);
            break;
        case p.loading:
            var d = parseInt(p.loading.texture.height / 10);
            p.loading.texture.setFrame(new PIXI.Rectangle(0, d * (p.soul.lang.lang - 2), p.loading.texture.width, d));
            p.loading.place(p.W / 2, p.H * .7);
            break;
    }
    if (p.preloadState == 2) {
        p.init();
    }
};
AG.ImgButton = function(img, s_img, s_scale, parent, scaleS, px, py, text, textSize, tdx, tdy) {
    var tex = GodStep.textures[img];
    if (tex == undefined || tex == null) trace('TEXTURE NOT FOUND - ' + img);
    var startS = this.startS = scaleS * AG.SCALE;
    GodStep.Frame.call(this, null, tex.width * startS, tex.height * startS);
    GodStep.IOverOut.call(this, this.W, this.H);
    GodStep.IDownUp.call(this, this.W, this.H);
    if (s_img) {
        var shadow = GodStep.textures[s_img];
        this.addChild(this.shadow = new GodStep.Image(shadow));
        this.shadow.Scale = startS * s_scale;
        this.shadow.anchor = new PIXI.Point(0.5, 0.5);
        this.shadow.y = parent.soul.H * .05 * s_scale;
    }
    this.addChild(this.img = new GodStep.Image(tex));
    this.img.Scale = startS;
    if (text) {
        this.addChild(this.label = new AG.Text(text, (textSize || 100) * startS / AG.SCALE, 0, 0, 'center'));
        this.label.x -= this.label.width / 2 + (tdx || 0);
        this.label.y -= this.label.height / 2 + (tdy || 0);
        this.label.tdx = tdx || 0;
        this.label.tdy = tdy || 0;
        this.label.HW = -this.label.width / 2;
        this.label.HH = -this.label.height / 2;
    }
    this.img.anchor = new PIXI.Point(0.5, 0.5);
    this.setHitArea(-this.W / 2, -this.H / 2, this.W, this.H);
    this.place(px, py);
    addEvent(this, GodStep.FRAME_DOWN, this.h_mouse);
    addEvent(this, GodStep.FRAME_OUT, this.h_mouse);
    addEvent(this, GodStep.FRAME_OVER, this.h_mouse);
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
};
extend(AG.ImgButton, GodStep.Frame);
AG.ImgButton.CLICK = 'clickImg';
pro.rescale = function(s) {
    if (this.no_scale) return;
    if (this.label) {
        this.label.scale.y = this.label.scale.x = s;
        this.label.x = (this.label.HW - (this.label.tdx || 0)) * this.label.scale.y;
        this.label.y = (this.label.HH - (this.label.tdy || 0)) * this.label.scale.y;
    }
    this.img.scale.y = this.img.scale.x = s * this.startS;
};
pro.h_mouse = function(e) {
    var t = e.content.t;
    switch (e.type) {
        case GodStep.FRAME_DOWN:
            this.rescale(1.1);
            this.isClicked = true;
            break;
        case GodStep.FRAME_UP:
            if (this.isClicked) {
                dispatch(t, AG.ImgButton.CLICK);
            }
            this.isClicked = false;
            break;
        case GodStep.FRAME_OUT:
            this.rescale(1);
            break;
        case GodStep.FRAME_OVER:
            if (this.isDown) {
                this.rescale(1.1);
            }
            break;
    }
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.scale.x = this.scale.y = value;
        this.rescale(1);
    }
});
AG.TextButton = function(text, size, color, parent, scaleS, px, py) {
    var startS = scaleS;
    GodStep.Frame.call(this, null, 0, 0);
    this.color = color;
    this.addChild(this.back = new PIXI.Graphics());
    this.addChild(this.text = new GodStep.Text(text, size * scaleS * 2, 'Arial', 'left', 0xffffff));
    this.text.x = -this.text.width / 2;
    this.text.y = -this.text.height / 2;
    this.W = this.text.width * 1.5;
    this.H = this.text.height * 1.5;
    GodStep.IOverOut.call(this, this.W, this.H);
    GodStep.IDownUp.call(this, this.W, this.H);
    this.setHitArea(-this.W / 2, -this.H / 2, this.W, this.H);
    this.redraw();
    this.place(px, py);
    addEvent(this, GodStep.FRAME_DOWN, this.h_mouse);
    addEvent(this, GodStep.FRAME_OUT, this.h_mouse);
    addEvent(this, GodStep.FRAME_OVER, this.h_mouse);
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
};
extend(AG.TextButton, GodStep.Frame);
pro.redraw = function() {
    var g = this.back;
    g.clear();
    g.beginFill(this.color, 1);
    g.drawRect(-this.W / 2, -this.H / 2, this.W, this.H);
    g.endFill();
};
pro.h_mouse = function(e) {
    var t = e.content.t;
    switch (e.type) {
        case GodStep.FRAME_DOWN:
            this.Scale = .9;
            this.isClicked = true;
            break;
        case GodStep.FRAME_UP:
            if (this.isClicked) {
                dispatch(t, AG.ImgButton.CLICK);
            }
            this.isClicked = false;
            break;
        case GodStep.FRAME_OUT:
            this.Scale = 1;
            break;
        case GodStep.FRAME_OVER:
            if (this.isDown) {
                this.Scale = .9;
            }
            break;
    }
};
AG.Text = function(text, size, x, y, align, tint) {
    PIXI.BitmapText.call(this, text, {
        font: parseInt(size) + "px Font1",
        align: align || "left"
    });
    this.x = x;
    this.y = y;
    if (tint) this.tint = tint;
    this.updateText();
};
extend(AG.Text, PIXI.BitmapText);
AG.Back = function(soul, name, color, parent) {
    GodStep.Frame.call(this, 'Back');
    this.soul = soul;
    this.pp = parent;
    if (color != null) {
        this.createGraphics();
        this.color = color;
        this.addChild(this.ts = new PIXI.TilingSprite(GodStep.textures['back_tile'], soul.SW, soul.SH));
        this.ts.tileScale.x = soul.startS;
        this.ts.tileScale.y = soul.startS;
        this.ts.tint = color;
        this.ts.alpha = .5;
        this.graphics.clear();
        this.graphics.beginFill(this.color, 1);
        this.graphics.drawRect(0, 0, soul.SW, soul.SH);
        this.graphics.endFill();
    }
    this.addChild(this.top = new AG.Img(name, soul.startS, 0, 0, new PIXI.Point(0, 0)));
    if (color != null) {}
};
extend(AG.Back, GodStep.Frame);
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.cacheAsBitmap = false;
        if (this.soul.H < this.soul.OH) {
            if (this.pp) {
                this.top.y = -this.pp.y / value;
            } else {
                this.top.y = -this.parent.y / value;
            }
            this.top.scale.x = this.soul.startS * AG.SCALE;
            this.top.scale.y = this.soul.OH / this.soul.H * this.soul.startS * AG.SCALE;
        } else {
            this.top.y = 0;
            this.top.scale.y = this.soul.startS * AG.SCALE;
            this.top.scale.x = this.soul.OW / this.soul.W * this.soul.startS * AG.SCALE;
            this.top.scale.x = this.soul.OH / this.soul.H * this.soul.startS * AG.SCALE;
        }
        if (this.ts) {
            this.ts.height = this.soul.OH / this.soul.startS;
            this.graphics.scale.y = this.soul.OH / this.soul.H;
            this.graphics.y = this.ts.y = this.top.y
        }
    }
});
AG.Img = function(name, scale, px, py, anchor) {
    GodStep.Image.call(this, GodStep.textures[name]);
    this.Scale = scale * AG.SCALE;
    if (anchor == 0.5) {
        this.anchor = new PIXI.Point(.5, .5);
    } else {
        if (anchor) {
            this.anchor = anchor;
        }
    }
    this.place(px, py);
};
extend(AG.Img, GodStep.Image);
pro.setImg = function(texNam) {
    this.setTexture(GodStep.textures[texNam]);
};
AG.Background = function(soul) {
    this.soul = soul;
    GodStep.Frame.call(this, 'Background', soul.W, soul.H);
    this.visible = false;
};
extend(AG.Background, GodStep.Frame);
pro.init = function() {
    this.visible = true;
};
AG.Dialog = function(parent, back, popUp, size, size2, size3) {
    GodStep.Frame.call(this, 'Shop', parent.W * .7, parent.W * .4);
    GodStep.IDownUp.call(this, parent.W, parent.H);
    this.x = parent.W * .5;
    this.y = parent.W * .6;
    this.p = parent;
    this.soul = parent.soul;
    this.startS = parent.startS;
    this.setHitArea(-parent.W, -parent.H, parent.W * 2, parent.H * 2);
    this.addChild(this.popUp = new AG.Img(popUp, parent.startS, 0, 0, .5));
    this.addChild(this.back = new AG.Img(back, parent.startS, 0, 0, .5));
    this.addChild(this.b_yes = new AG.ImgButton('b_y_n', 'b_y_n_shadow', 1.0, this, parent.startS, parent.W * .14, parent.H * .1, AG.S('yes'), 150, 0, parent.H * .040));
    this.addChild(this.b_no = new AG.ImgButton('b_y_n', 'b_y_n_shadow', 1.0, this, parent.startS, -parent.W * .14, parent.H * .1, AG.S('no'), 150, 0, parent.H * .040));
    this.b_yes.shadow.y = this.b_no.shadow.y -= parent.H * .02;
    this.soul = parent.soul;
    this.addChild(this.costIcon = new AG.Img('coin', parent.startS * .9, parent.W * .1, -parent.H * .005, .5));
    this.costIcon.visible = false;
    this.addChild(this.title = new AG.Text('', (size3 || 150) * this.startS, 0, parent.H * .05, 'center'));
    this.addChild(this.message = new AG.Text('', (size || size2 || 150) * this.startS, 0, parent.H * .075, 'center'));
    this.addChild(this.messageCost = new AG.Text('', (size || 150) * this.startS, 0, parent.H * .13, 'center'));
    this.title.y = -parent.H * .2;
    this.message.y = -parent.H * .09;
    this.visible = false;
    this.messageCost.alpha = this.message.alpha = .7;
    addEvent(this.b_no, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_yes, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
};
extend(AG.Dialog, GodStep.Frame);
pro.show = function(title, message, callbackYES, callbackNO, cost) {
    this.visible = true;
    this.title.setText(title.replace('\n', ' '));
    this.message.setText(message);
    this.title.updateText();
    this.title.y = -this.p.H * .17 - this.title.height / 2;
    this.message.updateText();
    this.title.x = -this.title.width / 2;
    this.message.x = -this.message.width / 2;
    this.yesCallBack = callbackYES;
    this.noCallBack = callbackNO;
    switch (this.okType) {
        case 'buing':
            this.costIcon.visible = true;
            this.messageCost.setText(cost + "?");
            this.message.y = -this.parent.H * .13;
            this.messageCost.y = this.message.y + this.parent.H * .07;
            this.messageCost.updateText();
            this.messageCost.visible = true;
            this.messageCost.x = -this.messageCost.width / 2 + this.parent.W * .04;
            this.costIcon.x = this.messageCost.x - this.parent.W * .04;
            break;
        default:
            this.messageCost.visible = this.costIcon.visible = false;
            this.message.y = -this.parent.H * .09;
            break;
    }
};
pro.h_buttons = function(e) {
    var t = e.content.t;
    var p = t.parent;
    if (p.visible) {
        switch (t) {
            case p.b_no:
                p.noCallBack(p);
                p.visible = false;
                break;
            case p.b_yes:
                p.yesCallBack(p);
                p.visible = false;
                break;
        }
    }
};
pro.h_mouse = function(e) {
    var t = e.content.target;
    if (t) {
        switch (e.type) {
            case GodStep.FRAME_UP:
                if (t.soul) {
                    t.b_no.isDown = false;
                    t.b_yes.isDown = false;
                    t.b_no.Scale = 1;
                    t.b_yes.Scale = 1;
                }
                break;
        }
    }
};
AG.ProgressBar = function(parent) {
    GodStep.Frame.call(this, 'Shop', parent.W * .5, 50 * parent.startS);
    this.createGraphics();
};
extend(AG.ProgressBar, GodStep.Frame);
pro.drawProgress = function(percent) {
    var g = this.graphics;
    g.clear();
    g.lineStyle(1, 0xffffff, 1);
    g.drawRect(0, 0, this.W, this.H);
    g.beginFill(0xffffff, 1);
    g.drawRect(0, 0, this.W * percent, this.H);
    g.endFill();
};
AG.Settings = function(soul) {
    this.soul = soul;
    GodStep.Frame.call(this, 'Settings', soul.SW, soul.SH);
    GodStep.IDownUp.call(this, this.W, this.H);
    var S = this.startS = soul.startS;
    this.addChild(this.back = new AG.Back(soul, 'options_3', 0x97b949));
    this.back.timerCache = -1;
    this.back.cacheAsBitmap = true;
    this.addFrame(this.b_back = new AG.ImgButton('b_back', 'b_shadow', 1.1, this, S, this.W * .15, this.W * .15));
    var soundDY = .35;
    this.addFrame(this.b_sound_on = new AG.ImgButton('b_sound', 'b_shadow', 1.1, this, S, this.W * .3, this.H * soundDY));
    this.addFrame(this.b_sound_off = new AG.ImgButton('b_sound_off', 'b_shadow', 1.1, this, S, this.W * .3, this.H * soundDY));
    this.addFrame(this.b_music_on = new AG.ImgButton('b_music', 'b_shadow', 1.1, this, S, this.W * .7, this.H * soundDY));
    this.addFrame(this.b_music_off = new AG.ImgButton('b_music_off', 'b_shadow', 1.1, this, S, this.W * .7, this.H * soundDY));
    this.addFrame(this.b_tutorial = new AG.ImgButton('box_1', null, 1.1, this, S, this.W * .25, this.H * .56));
    this.b_tutorial.no_scale = true;
    this.addFrame(this.b_tutorial_marker = new AG.Img('box_2', S, this.W * .25, this.H * .56, .5));
    this.addChild(this.label = new AG.Text(AG.S('options'), 230 * S, this.W * .3, this.H * .05));
    this.addChild(this.label = new AG.Text(AG.S('tutor'), 110 * S, this.W * .31, this.H * .515));
    this.addFrame(this.b_clear = new AG.ImgButton('b_ep', 'b_ep_shadow', .99, this, S, this.W * .5, this.H * .76, AG.S('erase'), 100, 0, this.H * .02));
    this.visible = false;
    this.addFrame(this.dialog = new AG.Dialog(this, 'window_options', 'back_popup_options', 95));
    addEvent(this.b_tutorial, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_sound_off, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_sound_on, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_music_off, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_music_on, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_back, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_clear, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
    this.loadSettings();
};
extend(AG.Settings, GodStep.Frame);
pro.update = function() {
    if (this.visible) {
        if (this.back.timerCache-- == 0) {
            this.back.timerCache = -1;
            this.back.cacheAsBitmap = true;
        } else {
            if (this.back.timerCache < -10) {
                this.back.timerCache = -10;
            }
        }
    }
};
pro.loadSettings = function() {
    this.b_sound_off.visible = false;
    this.b_music_off.visible = false;
    this.b_tutorial_marker.visible = true;
};
pro.init = function() {
    this.visible = true;
};
pro.h_mouse = function(e) {
    if (e.content.target) {
        if (e.content.target.soul) {
            var t = e.content.target;
            t.b_clear.isDown = t.b_back.isDown = false;
            t.b_clear.Scale = t.b_back.Scale = 1;
        }
    }
};
pro.getBounds = function() {
    return new PIXI.Rectangle(0, -this.y, this.W, this.soul.OH / this.scale.x);
};
pro.h_no = function(dialog) {
    GodStep.playSound('button', 0, AG.SOUND);
    dialog.visible = false;
};
pro.h_yes = function(dialog) {
    dialog.visible = false;
    GodStep.playSound('button', 0, AG.SOUND);
    GodStep.Clear(AG.AmazingGrabber.instance.PLAYER_SLOT);
    GodStep.Clear(AG.AmazingGrabber.instance.SHOP_SLOT);
    var items = AG.AmazingGrabber.ITEMS;
    var lastItem;
    for (var j = 0; j < items.length; j++) {
        lastItem = items[j];
        lastItem.locked();
    }
};
pro.h_buttons = function(e) {
    var t = e.content.t;
    var p = t.parent;
    var s = p.soul;
    switch (t) {
        case p.b_tutorial:
            GodStep.playSound('button', 0, AG.SOUND);
            AG.TUTOR = p.b_tutorial_marker.visible = !p.b_tutorial_marker.visible;
            break;
        case p.b_music_on:
            AG.MUSIC = false;
            GodStep.playSound('button', 0, AG.SOUND);
            if (createjs) {
                if (createjs.Sound) createjs.Sound.stop();
            }
            p.b_music_on.visible = false;
            p.b_music_off.visible = true;
            break;
        case p.b_music_off:
            AG.MUSIC = true;
            GodStep.playSound('button', 0, AG.SOUND);
            GodStep.playSound('theme_1');
            p.b_music_on.visible = true;
            p.b_music_off.visible = false;
            break;
        case p.b_sound_on:
            AG.SOUND = false;
            GodStep.playSound('button', 0, AG.SOUND);
            p.b_sound_on.visible = false;
            p.b_sound_off.visible = true;
            break;
        case p.b_sound_off:
            AG.SOUND = true;
            GodStep.playSound('button', 0, AG.SOUND);
            p.b_sound_on.visible = true;
            p.b_sound_off.visible = false;
            break;
        case p.b_clear:
            GodStep.playSound('button', 0, AG.SOUND);
            p.dialog.show(AG.S('warning'), AG.S('doyouwantclear'), p.h_yes, p.h_no);
            break;
        case p.b_back:
            GodStep.playSound('button', 0, AG.SOUND);
            s.screenTo([s.startmenu], p);
            break;
    }
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.scale.x = this.scale.y = value;
        this.back.cacheAsBitmap = false;
        this.back.Scale = value;
        this.back.timerCache = 36;
        this.dialog.popUp.scale.x = this.back.top.scale.x;
        this.dialog.popUp.scale.y = this.back.top.scale.y;
    }
});
AG.StartMenu = function(soul) {
    this.soul = soul;
    this.firstStart = true;
    GodStep.Frame.call(this, 'StartMenu', soul.SW, soul.SH);
    GodStep.IDownUp.call(this, soul.SW, soul.SH);
    var S = this.startS = soul.startS;
    this.addChild(this.cachedContainer = new PIXI.DisplayObjectContainer());
    this.cachedContainer.addChild(this.back = new AG.Back(soul, 'menu_3', 0x64c5f7, this));
    this.addChild(this.b_play = new AG.ImgButton('b_play', 'b_shadow', 1.7, this, S, this.W * .5, this.H * .64));
    this.addChild(this.b_shop = new AG.ImgButton('b_inapp', 'b_shadow', 1.1, this, S, this.W * .25, this.H * .82));
    this.addChild(this.b_options = new AG.ImgButton('b_options', 'b_shadow', 1.1, this, S, this.W * .75, this.H * .82));
    this.addChild(this.b_dev = new AG.TextButton('dev', 33, 0xfa66466, this, S, this.W * .9, this.H * .05));
    this.back.timerCache = 0;
    this.b_dev.visible = false;
    this.cachedContainer.addChild(this.logo = new AG.Img('logo_2', S, this.W * .5, this.H * .28, 0.5));
    addEvent(this.b_dev, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_play, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_options, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_shop, AG.ImgButton.CLICK, this.h_buttons);
    this.cachedContainer.cacheAsBitmap = true;
    this.visible = false;
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
};
extend(AG.StartMenu, GodStep.Frame);
pro.update = function() {
    if (this.visible) {
        if (this.back.timerCache-- == 0) {
            this.back.timerCache = -1;
            this.cachedContainer.cacheAsBitmap = true;
        } else {
            if (this.back.timerCache < -10) {
                this.back.timerCache = -10;
            }
        }
    }
};
pro.init = function() {
    this.visible = true;
};
pro.h_mouse = function(e) {
    if (e.content.target.soul) {
        var t = e.content.target;
        if (AG.MUSIC && t.firstStart) {
            t.firstStart = false;
            createjs.Sound.stop();
        }
        t.b_play.isDown = t.b_options.isDown = t.b_dev.isDown = t.b_shop.isDown = false;
        t.b_shop.Scale = t.b_options.Scale = t.b_dev.Scale = t.b_play.Scale = 1;
    }
};
pro.h_buttons = function(e) {
    var t = e.content.t;
    var p = t.parent;
    var s = p.soul;
    GodStep.playSound('button', 0, AG.SOUND);
    switch (t) {
        case p.b_dev:
            s.screenTo([s.dev], p);
            break;
        case p.b_options:
            s.screenTo([s.settings], p);
            break;
        case p.b_shop:
            s.screenTo([s.shop], p);
            break;
        case p.b_play:
            s.screenTo([s.gameplay], p);
            break;
    }
};
pro.getBounds = function() {
    return new PIXI.Rectangle(0, -this.y, this.W, this.soul.OH / this.scale.x);
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.cachedContainer.cacheAsBitmap = false;
        this.scale.x = this.scale.y = value;
        this.back.Scale = value;
        this.back.timerCache = 30;
    }
});
AG.Shop = function(soul) {
    this.soul = soul;
    GodStep.Frame.call(this, 'Shop', soul.SW, soul.SH);
    GodStep.IDownUp.call(this, this.W, this.H);
    var S = this.startS = soul.startS;
    this.addChild(this.back = new AG.Back(soul, 'inapp_3', 0xf98331));
    this.addChild(this.container = new PIXI.DisplayObjectContainer());
    this.container.addChild(this.field_coin = new AG.Img('field_coin', S, this.W * .78, this.H * .12, 0.5));
    this.container.addChild(this.b_shadow_lil1 = new AG.Img('b_shadow_lil', S * .65, this.W * .668, this.H * .13, 0.5));
    this.container.addChild(this.coin = new AG.Img('coin', S, this.W * .668, this.H * .105, 0.5));
    this.container.addChild(this.totalMoney = new AG.Text('123123', 110 * S, this.W * .73, this.H * .09, 'right'));
    this.addChild(this.maska = new PIXI.Graphics());
    this.container.addChild(this.containerHead = new GodStep.Frame());
    this.container.addChild(this.containerArm = new GodStep.Frame());
    this.container.addChild(this.topContainer = new GodStep.Frame());
    this.addFrame(this.b_back = new AG.ImgButton('b_back', 'b_shadow', 1.1, this, S, this.W * .15, this.W * .15), this.container);
    this.addChild(this.fieldNoMoney = new AG.Img('field_no_money', S, this.W * .5, this.H * .5, .5));
    this.addChild(this.textNoMoney = new AG.Text(AG.S('nocoins'), 155 * S, this.W * .62, this.H * .435, 'left'));
    this.textNoMoney.x = (this.W - this.textNoMoney.width) / 2;
    this.fieldNoMoney.visible = this.textNoMoney.visible = false;
    this.fieldNoMoney.timer = 0;
    var i, item, rowI = 0,
        w = this.W / 4,
        h = this.H * .25,
        maxH = 1;
    AG.AmazingGrabber.DEFAULT_SLOTS = [];
    AG.AmazingGrabber.CURRENT_ARM_SLOTS = [
        ['arm1'],
        ['arm2'],
        ['arm3'],
        ['arm4']
    ];
    AG.AmazingGrabber.CURRENT_HEAD_SLOTS = [
        ['head1'],
        ['head2'],
        ['head3'],
        ['head4'],
        ['head5'],
        ['head6'],
        ['head7'],
        ['head8']
    ];
    var itemsArm = AG.AmazingGrabber.SHOP_ARM_SLOTS = [
        [AG.S('smile'), 'i_a_1', 'arm1', ['d_a_1'], 150],
        [AG.S('Arm Hair'), 'i_a_2', 'arm2', ['d_a_2'], 1000],
        [AG.S('yoga'), 'i_a_3', 'arm3', ['d_a_3_1', 'd_a_3_3'], 2500],
        [AG.S('sticky'), 'i_a_4', 'arm4', ['d_a_4_1', 'd_a_4_2', 'd_a_4_3'], 3700],
        [AG.S('slimy'), 'i_a_5', 'arm1', ['d_a_5'], 5000],
        [AG.S('hair'), 'i_a_6', 'arm2', ['d_a_6'], 6200],
        [AG.S('spike'), 'i_a_7', 'arm3', ['d_a_7_1', 'd_a_7_3'], 7000],
        [AG.S('garden'), 'i_a_8', 'arm4', ['d_a_8_1', 'd_a_8_2', 'd_a_8_3'], 10000],
        [AG.S('tailored'), 'i_a_9', 'arm1', ['d_a_9'], 15000],
        [AG.S('critter'), 'i_a_10', 'arm2', ['d_a_10'], 25000],
        [AG.S('lux'), 'i_a_11', 'arm3', ['d_a_11_1', 'd_a_11_3'], 55000],
        [AG.S('glove'), 'i_a_12', 'arm4', ['d_a_12_1', 'd_a_12_2', 'd_a_12_3'], 180000]
    ];
    var itemsHead = AG.AmazingGrabber.SHOP_HEAD_SLOTS = [
        [AG.S('shifty'), 'i_h_1', 'head1', ['d_h_1_1', 'd_h_1_2', 'd_h_1_l', 'd_h_1_r'], 60],
        [AG.S('gents'), 'i_h_2', 'head2', ['d_h_2'], 500],
        [AG.S('Hachimaki'), 'i_h_3', 'head3', ['d_h_3'], 2000],
        [AG.S('Chow Chow'), 'i_h_4', 'head4', ['d_h_4_1', 'd_h_4_2', 'd_h_4_3', 'd_h_4_4', 'mouth_5_1', 'mouth_5_1', 'd_h_4_5', 'mouth_5_1'], 3600],
        [AG.S('hip'), 'i_h_5', 'head5', ['d_h_5'], 4800],
        [AG.S('clown'), 'i_h_6', 'head6', ['d_h_6'], 6000],
        [AG.S('brows'), 'i_h_7', 'head7', ['d_h_7'], 6700],
        [AG.S('vamp'), 'i_h_8', 'head4', ['d_h_8_1', 'd_h_8_2', 'd_h_8_3', 'd_h_8_4', 'd_h_8_5_1', 'd_h_8_5_2', 'd_h_8_5_3', 'd_h_8_5_2'], 8000],
        [AG.S('coolshades'), 'i_h_9', 'head5', ['d_h_9'], 12000],
        [AG.S('Tall Hat'), 'i_h_10', 'head3', ['d_h_10'], 18000],
        [AG.S('longe'), 'i_h_11', 'head8', ['d_h_11_1', 'd_h_11_2', 'd_h_11_3', 'd_h_11_4'], 50000],
        [AG.S('gold'), 'i_h_12', 'head3', ['d_h_12'], 60000]
    ];
    for (i = 0; i < itemsArm.length; i++) {
        itemsHead[i][5] = 2 * (i) + 1;
        itemsArm[i][5] = 2 * (i) + 2;
    }
    this.container.addChild(this.tab_head = new AG.ImgButton('field_choose_on', null, S, this, S, this.W * .3, this.H * .29, AG.S('head'), 150, 0, this.H * .04));
    this.container.addChild(this.tab_arm = new AG.ImgButton('field_choose_on', null, S, this, S, this.W * .7, this.H * .29, AG.S('arm'), 150, 0, this.H * .04));
    this.addFrame(this.dialog = new AG.Dialog(this, 'window_inapp', 'back_popup_inapp', null, 90, 100));
    this.tab_head.no_scale = this.tab_arm.no_scale = true;
    this.tab_head.isSelected = true;
    this.tab_arm.alpha = 0.3;
    this.items = AG.AmazingGrabber.ITEMS = [];
    this.containerArm.mask = this.maska;
    this.containerHead.mask = this.maska;
    for (i = 0; i < itemsArm.length; i++) {
        rowI = parseInt(i / 3);
        item = new AG.ItemIcon(itemsArm[i], this, (i - rowI * 3) * w + w, rowI * h);
        maxH = Math.max(maxH, rowI * h + item.back.height);
        this.containerArm.addChild(item);
        item.data = itemsArm[i];
        addEvent(item, GodStep.FRAME_UP, this.h_items);
        item.gameplay = soul.gameplay;
        this.items.push(item);
    }
    for (i = 0; i < itemsHead.length; i++) {
        rowI = parseInt(i / 3);
        item = new AG.ItemIcon(itemsHead[i], this, (i - rowI * 3) * w + w, rowI * h);
        maxH = Math.max(maxH, rowI * h + item.back.height);
        this.containerHead.addChild(item);
        item.data = itemsHead[i];
        addEvent(item, GodStep.FRAME_UP, this.h_items);
        item.gameplay = soul.gameplay;
        this.items.push(item);
    }
    GodStep.IDownUp.call(this.containerHead, this.W, maxH);
    this.containerHead.setHitArea(0, -h / 3, this.W, maxH + h / 2);
    GodStep.IDownUp.call(this.containerArm, this.W, maxH);
    this.containerArm.setHitArea(0, -h / 3, this.W, maxH + h / 2);
    this.CH = maxH;
    this.currentTab = this.containerHead;
    this.containerArm.visible = false;
    this.containerHead.y = this.containerArm.y = this.CY = this.tab_arm.y + h * .6;
    GodStep.IDownUp.call(this.topContainer, this.W, this.CY - h);
    addEvent(this.b_back, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.tab_arm, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.tab_head, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
    addEvent(this, GodStep.FRAME_DOWN, this.h_mouse);
    addEvent(this, GodStep.FRAME_MOVE, this.h_container);
    addEvent(this.containerHead, GodStep.FRAME_DOWN, this.h_container);
    addEvent(this.containerArm, GodStep.FRAME_DOWN, this.h_container);
    this.visible = false;
};
extend(AG.Shop, GodStep.Frame);
pro.h_items = function(e) {
    var t = e.content.t;
    var p = t.parent.parent.parent;
    var s = p.soul;
    switch (e.type) {
        case GodStep.FRAME_UP:
            if (p.isMoved == false) {
                if (t.isLocked) {} else {
                    GodStep.playSound('button', 0, AG.SOUND);
                    var player = GodStep.LoadLocal(p.soul.PLAYER_SLOT) || {};
                    p.dialog.lastItem = t;
                    if (t.isPurchased) {
                        if (t.isEquip) {
                            t.equip();
                            p.shopData.equip.splice(p.shopData.equip.indexOf(t.data[5]), 1);
                            GodStep.SaveLocal(p.shopData, p.soul.SHOP_SLOT);
                        } else {
                            if (p.dialog.visible == false) {
                                p.dialog.okType = 'equip';
                                p.dialog.show(t.data[0], AG.S('equipthisitem'), p.h_ok, p.h_no);
                            }
                        }
                    } else {
                        if (p.dialog.visible == false) {
                            if (player.totalMoney > t.getCost()) {
                                p.dialog.okType = 'buing';
                                p.dialog.show(t.data[0], AG.S('buythisitem'), p.h_ok, p.h_no, t.data[4]);
                            } else {
                                p.fieldNoMoney.visible = p.textNoMoney.visible = true;
                                p.fieldNoMoney.timer = 100;
                                trace('need ' + p.player.totalMoney + " / " + t.getCost());
                            }
                        }
                    }
                }
            }
            break;
    }
};
pro.update = function() {
    if (this.visible) {
        if (this.fieldNoMoney.timer-- == 0) {
            this.fieldNoMoney.timer = -1;
            this.fieldNoMoney.visible = this.textNoMoney.visible = false;
        } else {
            if (this.fieldNoMoney.timer < -10) {
                this.fieldNoMoney.timer = -10;
            }
        }
    }
};
pro.init = function() {
    this.visible = true;
    this.fieldNoMoney.timer = 0;
    var player = this.player = GodStep.LoadLocal(this.soul.PLAYER_SLOT) || {};
    this.shopData = GodStep.LoadLocal(this.soul.SHOP_SLOT) || {
        items: [],
        equip: []
    };
    if (!this.shopData.items) {
        this.shopData.items = [];
    }
    var levelID = -1;
    if (!player.totalScore) {
        levelID = 0;
        player.totalScore = 0;
    }
    this.levels = AG.AmazingGrabber.LEVELS;
    for (var i = 1; i < this.levels.length; i++) {
        if (this.levels[i] > player.totalScore) {
            levelID = i - 1;
            break;
        }
    }
    if (levelID == -1) {
        levelID = 1000000;
    }
    var k;
    var items = AG.AmazingGrabber.ITEMS;
    var lastItem;
    for (var j = 0; j < items.length; j++) {
        lastItem = items[j];
        if (lastItem.data[5] <= levelID) {
            lastItem.unlock();
        }
        if (!lastItem.isPurchased) {
            for (k = 0; k < this.shopData.items.length; k++) {
                if (this.shopData.items[k] == lastItem.data[5]) {
                    lastItem.purchase();
                }
            }
            for (k = 0; k < this.shopData.equip.length; k++) {
                if (this.shopData.equip[k] == lastItem.data[5]) {
                    lastItem.equip();
                }
            }
        }
    }
    this.totalMoney.setText((player.totalMoney || 0) + '');
};
pro.h_no = function(dialog) {
    GodStep.playSound('button', 0, AG.SOUND);
    dialog.visible = false;
};
pro.h_ok = function(dialog) {
    GodStep.playSound('button', 0, AG.SOUND);
    var shop = dialog.parent,
        i, item;
    switch (dialog.okType) {
        case 'equip':
            var isEquiped = false;
            for (i = 0; i < shop.items.length; i++) {
                item = shop.items[i];
                if (item.isEquip) {
                    var id = dialog.lastItem.data[2];
                    var id2 = id;
                    if (id == 'head1') {
                        id2 = 'head8';
                    }
                    if (id == 'head8') {
                        id2 = 'head1';
                    }
                    if (item.data[2] == id || item.data[2] == id2) {
                        item.equip();
                        isEquiped = true;
                        shop.shopData.equip.push(item.data[5]);
                        GodStep.SaveLocal(shop.shopData, p.soul.SHOP_SLOT);
                    }
                }
            }
            if (!isEquiped) {
                shop.shopData.equip.push(dialog.lastItem.data[5]);
                GodStep.SaveLocal(shop.shopData, shop.soul.SHOP_SLOT);
                dialog.lastItem.equip();
            }
            break;
        case 'buing':
            var p = dialog.parent;
            var player = GodStep.LoadLocal(p.soul.PLAYER_SLOT) || {};
            player.totalMoney -= dialog.lastItem.data[4];
            p.totalMoney.setText((player.totalMoney || 0) + '');
            dialog.lastItem.purchase();
            dialog.lastItem.equip();
            p.shopData.equip.push(dialog.lastItem.data[5]);
            p.shopData.items.push(dialog.lastItem.data[5]);
            GodStep.SaveLocal(player, p.soul.PLAYER_SLOT);
            GodStep.SaveLocal(p.shopData, p.soul.SHOP_SLOT);
            break;
    }
};
pro.h_container = function(e) {
    var t = e.target;
    switch (e.type) {
        case GodStep.FRAME_MOVE:
            if (t.isDown) {
                if (e.content.getLocalPosition) {
                    var p = e.content.getLocalPosition(t);
                    var oh = t.soul.OH / t.scale.x - t.CY;
                    t.isMoved = true;
                    t.containerArm.y = t.containerHead.y = Math.min(t.CY, Math.max(p.y - t.currentTab.downPoint.y + t.y, t.CY + oh - t.CH));
                }
            }
            break;
        case GodStep.FRAME_DOWN:
            break;
    }
};
pro.h_buttons = function(e) {
    var t = e.content.t;
    var p = t.parent.parent;
    var s = p.soul;
    if (!p.isGameOver) {
        switch (t) {
            case p.tab_arm:
                GodStep.playSound('button', 0, AG.SOUND);
                if (p.tab_head.isSelected) {
                    p.currentTab = p.containerArm;
                    p.containerArm.visible = true;
                    p.containerHead.visible = false;
                    p.tab_arm.isSelected = true;
                    p.tab_arm.alpha = 1;
                    p.tab_head.alpha = .3;
                }
                break;
            case p.tab_head:
                GodStep.playSound('button', 0, AG.SOUND);
                if (p.tab_arm.isSelected) {
                    p.currentTab = p.containerHead;
                    p.containerArm.visible = false;
                    p.containerHead.visible = true;
                    p.tab_head.isSelected = true;
                    p.tab_head.alpha = 1;
                    p.tab_arm.alpha = .3;
                }
                break;
            case p.b_back:
                GodStep.playSound('button', 0, AG.SOUND);
                s.screenTo([s.startmenu], p);
                break;
        }
    }
};
pro.h_mouse = function(e) {
    var t = e.content.target;
    if (t) {
        switch (e.type) {
            case GodStep.FRAME_DOWN:
                t.isMoved = false;
                break;
            case GodStep.FRAME_UP:
                if (e.content.target.soul) {
                    t.b_back.isDown = false;
                    t.b_back.Scale = 1;
                }
                break;
        }
    }
};
pro.getBounds = function() {
    return new PIXI.Rectangle(0, -this.y, this.W, this.soul.OH / this.scale.x);
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.scale.x = this.scale.y = value;
        this.back.Scale = value;
        this.container.y = -this.y;
        this.maska.clear();
        this.maska.beginFill(0, 1);
        this.maska.drawRect(0, this.CY - this.H * .1 - this.y, this.W, -this.CY + this.H * .1 + (this.soul.OH) / this.scale.x);
        this.dialog.popUp.scale.x = this.back.top.scale.x;
        this.dialog.popUp.scale.y = this.back.top.scale.y;
    }
});
AG.Face = function(gameplay) {
    this.gameplay = gameplay;
    GodStep.Frame.call(this, 'Face');
    var dy = .35;
    this.isWrongEyes = false;
    var s = gameplay.startS,
        w = gameplay.W,
        h = gameplay.H;
    this.addChild(this.static = new PIXI.DisplayObjectContainer());
    this.static.addChild(this.head = new AG.Img('head', s, w * .5, h * dy, .5));
    this.static.addChild(this.eyesBack1 = new AG.Img('eyes_1', s, w * .5, h * dy, .5));
    this.static.addChild(this.eyesBack2 = new AG.Img('eyes_2', s, w * .5, h * dy, .5));
    this.static.addChild(this.eyesBack3 = new AG.Img('eyes_3', s, w * .5, h * dy, .5));
    this.static.addChild(this.eyesBack4 = new AG.Img('eyes_4', s, w * .5, h * dy, .5));
    this.static.cacheAsBitmap = true;
    this.addChild(this.eyes = new AG.Img('eyes_1_1', s, w * .5, h * dy, .5));
    this.eyes.startPoint = new PIXI.Point(this.eyes.x, this.eyes.y);
    this.addChild(this.eyes2 = new AG.Img('eyes_4_1', s, w * .5, h * dy, .5));
    this.eyes2.startPoint = new PIXI.Point(this.eyes2.x, this.eyes2.y);
    this.addChild(this.slots1 = new PIXI.DisplayObjectContainer());
    this.slots1.y += 15 * s;
    this.slots1.addChild(this.slot4_1 = new AG.Img('mouth_1', s, w * .5, h * dy, .5));
    this.slots1.addChild(this.slot4_2 = new AG.Img('mouth_2', s, w * .5, h * dy, .5));
    this.slots1.addChild(this.slot4_3 = new AG.Img('mouth_3', s, w * .5, h * dy, .5));
    this.slots1.addChild(this.slot4_4 = new AG.Img('mouth_4', s, w * .5, h * dy, .5));
    this.slots1.addChild(this.slot4_5 = new AG.Img('mouth_5_1', s, w * .5, h * dy, .5));
    this.slots1.addChild(this.slot4_6 = new AG.Img('mouth_5_2', s, w * .5, h * dy, .5));
    this.slots1.addChild(this.slot4_7 = new AG.Img('mouth_5_3', s, w * .5, h * dy, .5));
    this.slots1.addChild(this.slot4_8 = new AG.Img('mouth_5_4', s, w * .5, h * dy, .5));
    this.slots1.addChild(this.slot1 = new AG.Img('empty', s, w * .5, h * dy, .5));
    this.slots1.addChild(this.slot2 = new AG.Img('empty', s, w * .5, h * dy, .5));
    this.slots1.addChild(this.slot3 = new AG.Img('empty', s, w * .5, h * dy, .5));
    this.slots1.addChild(this.slot5 = new AG.Img('empty', s, w * .5, h * dy, .5));
    this.slots1.addChild(this.slot6 = new AG.Img('empty', s, w * .5, h * dy, .5));
    this.slots1.addChild(this.slot7 = new AG.Img('empty', s, w * .5, h * dy, .5));
    this.eyesBack4.visible = this.eyesBack3.visible = this.eyesBack2.visible = this.eyes2.visible = false;
    this.setState(1);
    this.eyeDistanceMax = 28 * s;
};
extend(AG.Face, GodStep.Frame);
pro.setState = function(state) {
    this.static.cacheAsBitmap = false;
    this.slots1.cacheAsBitmap = false;
    if (state < 8) {
        var isEyesView = false;
        for (var i = 0; i < 8; i++) {
            if (!this.isWrongEyes) {
                if (this['eyesBack' + (i + 1)]) {
                    if (i == state - 1) {
                        isEyesView = true;
                    }
                    this['eyesBack' + (i + 1)].visible = (i == state - 1);
                }
            }
            this['slot4_' + (i + 1)].visible = (i == state - 1);
        }
        if (!isEyesView) {
            this.eyesBack1.visible = true;
        }
        this.eyes.visible = this.eyesBack1.visible;
        this.eyes2.visible = this.eyesBack4.visible;
    } else {}
    this.static.cacheAsBitmap = true;
    this.slots1.cacheAsBitmap = true;
};
pro.init = function() {
    this.eyes2.visible = this.eyesBack4.visible = false;
    this.eyesBack1.visible = true;
};
pro.equip = function(data, isEquip) {
    switch (data[2]) {
        case 'head1':
            this.eyesBack2.setImg('eyes_2');
            this.eyesBack3.setImg('eyes_3');
            this.eyesBack4.setImg('eyes_4');
            this.eyes2.setImg('eyes_4_1');
            this.eyesBack1.setImg((isEquip) ? data[3][0] : 'eyes_1');
            this.eyes.setImg((isEquip) ? data[3][1] : 'eyes_1_1');
            this.isWrongEyes = isEquip;
            break;
        case 'head2':
            this.slot2.setImg((isEquip) ? data[3][0] : 'empty');
            break;
        case 'head3':
            this.slot3.setImg((isEquip) ? data[3][0] : 'empty');
            break;
        case 'head4':
            this.slot4_1.setImg((isEquip) ? data[3][0] : 'mouth_1');
            this.slot4_2.setImg((isEquip) ? data[3][1] : 'mouth_2');
            this.slot4_3.setImg((isEquip) ? data[3][2] : 'mouth_3');
            this.slot4_4.setImg((isEquip) ? data[3][3] : 'mouth_4');
            this.slot4_5.setImg((isEquip) ? data[3][4] : 'mouth_5_1');
            this.slot4_6.setImg((isEquip) ? data[3][5] : 'mouth_5_2');
            this.slot4_7.setImg((isEquip) ? data[3][6] : 'mouth_5_3');
            this.slot4_8.setImg((isEquip) ? data[3][7] : 'mouth_5_4');
            break;
        case 'head5':
            this.slot5.setImg((isEquip) ? data[3][0] : 'empty');
            break;
        case 'head6':
            this.slot6.setImg((isEquip) ? data[3][0] : 'empty');
            break;
        case 'head7':
            this.slot7.setImg((isEquip) ? data[3][0] : 'empty');
            break;
        case 'head8':
            this.isWrongEyes = false;
            this.eyesBack1.setImg((isEquip) ? data[3][0] : 'eyes_1');
            this.eyesBack2.setImg((isEquip) ? data[3][1] : 'eyes_2');
            this.eyesBack3.setImg((isEquip) ? data[3][2] : 'eyes_3');
            this.eyesBack4.setImg((isEquip) ? data[3][3] : 'eyes_4');
            this.eyes2.setImg((isEquip) ? 'empty' : 'eyes_4_1');
            this.eyes.setImg((isEquip) ? 'empty' : 'eyes_1_1');
            break;
    }
};
pro.eyesTo = function(prize) {
    if (prize) {
        var pp = new PIXI.Point(prize.x, prize.y);
        var pe = new PIXI.Point(this.x + this.eyes.startPoint.x, this.y + this.eyes.startPoint.y);
        var a = Math.atan2(pe.y - pp.y, pe.x - pp.x) + Math.PI / 2;
        this.eyes2.x = this.eyes.x += (this.eyes.startPoint.x - Math.sin(a) * this.eyeDistanceMax - this.eyes.x) * .1;
        this.eyes2.y = this.eyes.y += (this.eyes.startPoint.y + Math.cos(a) * this.eyeDistanceMax - this.eyes.y) * .1;
    }
};
AG.Hand = function(gameplay) {
    this.gameplay = gameplay;
    GodStep.Frame.call(this, 'Hand');
    this.rotation = 0;
    this.startS = gameplay.startS;
    this.collideRaduis = 190;
    this.addChild(this.img1 = new AG.Img('arm_1', gameplay.startS, -gameplay.W * .33, gameplay.H * .09, 0.5));
    this.addChild(this.img2 = new AG.Img('arm_2', gameplay.startS, -gameplay.W * .33, gameplay.H * .09, 0.5));
    this.addChild(this.img3 = new AG.Img('arm_3', gameplay.startS, -gameplay.W * .33, gameplay.H * .09, 0.5));
    this.addChild(this.slots = new PIXI.DisplayObjectContainer());
    this.slots.y += 15 * gameplay.startS;
    this.slots.addChild(this.slot1 = new AG.Img('empty', gameplay.startS, -gameplay.W * .33, gameplay.H * .09, 0.5));
    this.slots.addChild(this.slot2 = new AG.Img('empty', gameplay.startS, -gameplay.W * .33, gameplay.H * .09, 0.5));
    this.slots.addChild(this.slot4_1 = new AG.Img('empty', gameplay.startS, -gameplay.W * .33, gameplay.H * .09, 0.5));
    this.slots.addChild(this.slot4_2 = new AG.Img('empty', gameplay.startS, -gameplay.W * .33, gameplay.H * .09, 0.5));
    this.slots.addChild(this.slot4_3 = new AG.Img('empty', gameplay.startS, -gameplay.W * .33, gameplay.H * .09, 0.5));
    this.slots.addChild(this.slot3_1 = new AG.Img('empty', gameplay.startS, -gameplay.W * .33, gameplay.H * .09, 0.5));
    this.slots.addChild(this.slot3_2 = new AG.Img('empty', gameplay.startS, -gameplay.W * .33, gameplay.H * .09, 0.5));
    this.slot3_2.visible = this.slot4_2.visible = this.slot4_3.visible = false;
    this.img2.visible = this.img3.visible = false;
    this.A = gameplay.startS * 15;
    this.phase = 0;
};
extend(AG.Hand, GodStep.Frame);
pro.equip = function(data, isEquip) {
    switch (data[2]) {
        case 'arm1':
            this.slot1.setImg((isEquip) ? data[3][0] : 'empty');
            break;
        case 'arm2':
            this.slot2.setImg((isEquip) ? data[3][0] : 'empty');
            break;
        case 'arm3':
            this.slot3_1.setImg((isEquip) ? data[3][0] : 'empty');
            this.slot3_2.setImg((isEquip) ? data[3][1] : 'empty');
            break;
        case 'arm4':
            this.slot4_1.setImg((isEquip) ? data[3][0] : 'empty');
            this.slot4_2.setImg((isEquip) ? data[3][1] : 'empty');
            this.slot4_3.setImg((isEquip) ? data[3][2] : 'empty');
            break;
    }
};
pro.setState = function(state) {
    this.state = state;
    switch (state) {
        case 0:
            this.slot4_1.visible = this.slot3_1.visible = this.img1.visible = true;
            this.slot4_2.visible = this.slot4_3.visible = this.slot3_2.visible = this.img2.visible = this.img3.visible = false;
            break;
        case 1:
            this.slot4_2.visible = this.slot3_1.visible = this.img2.visible = true;
            this.slot3_2.visible = this.slot4_1.visible = this.slot4_3.visible = this.img1.visible = this.img3.visible = false;
            break;
        case 2:
            this.slot4_3.visible = this.slot3_2.visible = this.img3.visible = true;
            this.slot3_1.visible = this.slot4_2.visible = this.slot4_1.visible = this.img2.visible = this.img1.visible = false;
            break;
    }
};
pro.collide = function(prize) {
    var distance = GodStep.Point.distance(new PIXI.Point(prize.x, prize.y), new PIXI.Point(this.x, this.y));
    return (distance < (prize.collideRaduis + this.collideRaduis) * this.startS && prize.life < 0);
};
pro.redraw = function() {
    var g = this.graphics;
    var s = this.gameplay.startS;
    g.clear();
    g.beginFill(0xffffff, .1);
    g.drawCircle(0, 0, this.collideRaduis * s);
    g.drawRect(-800 * s, -40 * s, 800 * s, 80 * s);
    g.endFill();
};
AG.Prize = function(gameplay, chance, addSpeed, x, y) {
    GodStep.Frame.call(this, 'Face');
    var s = gameplay.startS;
    this.GW = gameplay.W;
    this.GH = gameplay.H;
    this.sx = this.sy = 0;
    this.x = gameplay.soul.W / gameplay.scale.x * x;
    this.y = gameplay.soul.OH * y - gameplay.y;
    this.collideRaduis = 10;
    this.life = 1;
    this.gravity = gameplay.cristalGravity / 100;
    this.isFall = false;
    if (chance == -2) {
        this.type = 'x2';
    } else
    if (chance == -1) {
        this.type = 'cristal';
        trace('cristal');
    } else
    if (chance < gameplay.prize1Chance) {
        this.type = 'worm';
    } else if (chance < gameplay.prize2Chance) {
        this.type = 'fish';
    } else if (chance < gameplay.prize3Chance) {
        this.type = 'bear';
    } else if (chance < gameplay.prize4Chance) {
        this.type = 'candy';
    }
    this.createGraphics();
    var ss = .76;
    this.gdx = .1;
    switch (this.type) {
        case 'worm':
            this.speed = addSpeed;
            this.price = .5;
            this.collideRaduis = 50 * s;
            this.addChild(this.art = new AG.MovieClip(['worm_1', 'worm_2', 'worm_3', 'worm_4', 'worm_5', 'worm_6', 'worm_7', 'worm_8'], s * ss, 0, 0, 0.5));
            this.art.phase = 1;
            this.art.grab_name = 'worm_grab';
            break;
        case 'fish':
            this.speed = addSpeed;
            this.price = 1;
            this.collideRaduis = 50 * s;
            this.addChild(this.art = new AG.MovieClip(['fish_1', 'fish_2', 'fish_3', 'fish_4', 'fish_5', 'fish_6'], s * ss, 0, 0, 0.5));
            this.art.phase = 1;
            this.art.grab_name = 'fish_grab';
            break;
        case 'candy':
            this.speed = addSpeed;
            this.price = 10;
            this.collideRaduis = 50 * s;
            this.addChild(this.art = new AG.MovieClip(['candy_1', 'candy_2', 'candy_3', 'candy_4', 'candy_5', 'candy_6', 'candy_7', 'candy_8'], s * ss, 0, 0, 0.5));
            this.art.phase = 1;
            this.art.grab_name = 'candy_grab';
            break;
        case 'bear':
            this.speed = addSpeed;
            this.price = 5;
            this.collideRaduis = 50 * s;
            this.addChild(this.art = new AG.MovieClip(['bear_1', 'bear_2', 'bear_3', 'bear_4', 'bear_5', 'bear_6'], s * ss, 0, 0, 0.5));
            this.art.phase = 1;
            this.art.grab_name = 'bear_grab';
            break;
        case 'cristal':
            this.speed = -addSpeed;
            this.speedX = -addSpeed / 3;
            this.price = 50;
            this.life = 77;
            this.collideRaduis = 50 * s;
            this.gdx = .075;
            this.addChild(this.art2 = new AG.MovieClip(['tail_1', 'tail_2', 'tail_3', 'tail_4'], s * ss, 0, 0, new PIXI.Point(0.3, 0.0)));
            this.addChild(this.art = new AG.MovieClip(['jewel'], s * ss, 0, 0, 0.5));
            this.art2.phase = 1;
            this.art.phase = 1;
            this.art2.sScale = this.art2.scale.x;
            this.art.grab_name = 'jewel';
            break;
        case 'x2':
            this.collideRaduis = 40 * s;
            this.startSpeed = this.speed = -addSpeed * 1.7;
            this.speedX = -addSpeed * Math.random() + addSpeed / 2;
            this.price = 'x2';
            this.life = 20;
            this.addChild(this.art = new AG.MovieClip(['x2'], s * ss, 0, 0, 0.5));
            break;
    }
};
extend(AG.Prize, GodStep.Frame);
pro.getGrab = function() {
    if (this.art) {
        var img = new AG.Img(this.art.grab_name, this.art.startS / AG.SCALE, 0, 0, .5);
        img.x = this.x;
        img.y = this.y;
        return img;
    } else {
        return null;
    }
};
pro.destroy = function() {
    this.removeChild(this.graphics);
    if (this.art2) {
        this.removeChild(this.art2);
    }
    if (this.art) {
        this.removeChild(this.art);
    }
    return this;
};
pro.fade = function() {
    this.alpha += (0 - this.alpha) * .1;
};
pro.move = function(delta) {
    this.life--;
    if (this.art2) {
        this.art2.phase -= AG.FRAME_RATE * 10;
        if (this.art2.phase < 0) {
            this.art2.phase = 1;
            this.art2.nextFrame();
        }
        this.art2.scale.y = Math.max(this.art2.sScale * .9, Math.abs(this.speed * .9));
        this.art2.rotation = Math.atan2(this.sy, this.sx) + Math.PI / 2;
    }
    if (this.art) {
        this.art.phase -= AG.FRAME_RATE * 10;
        if (this.art.phase < 0) {
            this.art.phase = 1;
            this.art.nextFrame();
        }
    }
    var s = this.speed * delta;
    if (this.type == 'cristal') {
        this.sy = this.speed * delta;
        this.sx = this.speedX * delta;
        this.speed += this.gravity;
        this.x -= Math.abs(this.sx) * this.GW;
        this.y += this.sy * this.GH;
    } else
    if (this.type == 'x2') {
        this.sy = this.speed * delta;
        this.sx = this.speedX * delta;
        this.speed += this.gravity;
        if (this.y > this.GH * .93) {
            this.speed = this.startSpeed;
        }
        if (this.x > this.GW * .975 || this.x < this.GW * .025) {
            this.speedX = -this.speedX;
            this.sx = this.speedX * delta;
        }
        this.x += this.sx * this.GW;
        this.y += this.sy * this.GH;
    } else {
        if (!this.isFall) {
            this.speed += 0.005;
            this.y += s * this.GH;
        }
    }
};
AG.MovieClip = function(frames, scale, px, py, anchor) {
    var tex = GodStep.textures[frames[0]];
    GodStep.Image.call(this, tex);
    this.Scale = this.startS = scale * AG.SCALE;
    this.currentFrame = 0;
    this.frames = frames;
    if (anchor == 0.5) {
        this.anchor = new PIXI.Point(.5, .5);
    } else {
        if (anchor) {
            this.anchor = anchor;
        }
    }
    this.place(px, py);
};
extend(AG.MovieClip, GodStep.Image);
pro.setToFrame = function(frame) {
    this.currentFrame = frame;
    this.setTexture(GodStep.textures[this.frames[frame]]);
};
pro.nextFrame = function() {
    this.currentFrame++;
    if (this.currentFrame == this.frames.length) {
        this.currentFrame = 0;
    }
    this.setTexture(GodStep.textures[this.frames[this.currentFrame]]);
};
AG.Tutor = function(soul, x, y) {
    AG.MovieClip.call(this, ['tap_1', 'tap_2', 'tap_3', 'tap_2', 'tap_3', 'tap_2', 'tap_3', 'tap_2', 'tap_1'], soul.startS * .5, x, y, .5);
    pro.phase = 0;
    this.tutor = false;
};
extend(AG.Tutor, AG.MovieClip);
pro.nextFrame = function() {
    pro.phase++;
    if (pro.phase > 4) {
        pro.phase = 0;
        AG.MovieClip.prototype.nextFrame.call(this);
    }
};
AG.Safe = function(gameplay) {
    GodStep.Frame.call(this, 'Face');
    this.gameplay = gameplay;
    this.damages = [];
    this.addChild(this.art = new AG.MovieClip(['safe_1', 'safe_2'], gameplay.startS, 0, 0, 0));
    this.artX = this.art.x = -this.art.width;
    this.damageCursor = 0;
    this.addChild(this.damage2 = new AG.MovieClip(['2_damage_1', '2_damage_2', '2_damage_3', '2_damage_4', '2_damage_5', '2_damage_6'], gameplay.startS, 0, 0, 0));
    for (var i = 0; i < 3; i++) {
        var damage;
        this.addChild(damage = new AG.MovieClip(['1_damage_1', '1_damage_2', '1_damage_3', '1_damage_4', '1_damage_5'], gameplay.startS, 0, 0, 0));
        this.damages.push(damage);
        damage.visible = false;
        damage.phase = 0;
        damage.x = this.art.x;
    }
    this.damage2.x = this.art.x;
    this.visible = true;
    this.damage2.visible = false;
    this.art.visible = false;
    this.fadeTimer = 25
};
extend(AG.Safe, GodStep.Frame);
pro.update = function() {
    if (this.isLife == false) {
        this.fadeTimer--;
        if (this.fadeTimer == 0) {
            this.visible = false;
        }
    }
    if (this.art.visible || this.damage2.visible) {
        var damage, l = this.damages.length;
        for (var i = 0; i < l; i++) {
            damage = this.damages[i];
            if (damage.visible) {
                damage.phase -= AG.FRAME_RATE * 15;
                if (damage.phase < 0) {
                    damage.phase = 1;
                    damage.nextFrame();
                    if (damage.currentFrame == 0) damage.visible = false;
                }
            }
        }
        this.art.x += (this.artX - this.art.x) * .2;
        if (this.damage2.visible) {
            this.damage2.phase -= AG.FRAME_RATE * 15;
            if (this.damage2.phase < 0) {
                this.damage2.phase = 1;
                this.damage2.nextFrame();
                if (this.damage2.currentFrame == 2) {
                    this.art.visible = false;
                }
                if (this.damage2.currentFrame == 0) this.damage2.visible = false;
            }
        }
    }
};
pro.stop = function() {
    this.fadeTimer = 25;
    this.artX = this.art.width / 2;
    this.isLife = false;
    trace('safe stoped');
};
pro.init = function() {
    this.fadeTimer = 25;
    this.alpha = 1;
    this.art.setToFrame(0);
    this.art.x = this.art.width / 2;
    this.visible = true;
    this.artX = this.art.x = -this.art.width;
    this.isLife = true;
    this.damage2.phase = 0;
    this.damageCursor = 0;
    for (var i = 0; i < this.damages.length; i++) {
        this.damages[i].phase = 0;
        this.damages[i].visible = false;
    }
    this.damage2.visible = false;
    this.art.visible = true;
    this.hits = this.gameplay.hitCountSafe;
};
pro.damage = function() {
    if (this.isLife && this.artX - this.art.x < 5) {
        this.hits--;
        trace('safe DAMAGE  ' + this.hits);
        this.damages[this.damageCursor].visible = true;
        this.damages[this.damageCursor].phase = 0;
        this.damages[this.damageCursor].setToFrame(0);
        this.damageCursor++;
        if (this.damageCursor == this.damages.length) this.damageCursor = 0;
        if (this.hits == 1) {
            this.art.setToFrame(1);
        }
        GodStep.playSound('vault', 0, AG.SOUND);
        if (this.hits == 0) {
            this.fadeTimer = 25;
            trace('safe killed');
            this.isLife = false;
            for (var i = 0; i < this.damages.length; i++) {
                this.damages[i].visible = false;
            }
            this.damage2.setToFrame(0);
            this.damage2.visible = true;
            this.damage2.phase = 0;
            GodStep.playSound('daimond_fly', 0, AG.SOUND);
            return true;
        }
    }
    return false;
};
AG.TopSprite = function(soul) {
    this.soul = soul;
    GodStep.Frame.call(this, 'TOP', soul.SW, soul.SH);
    var g = this.createGraphics();
    g.beginFill(0, 1);
    g.drawRect(-this.W * 1.5, 0, this.W * 1.5, this.H);
    g.drawRect(this.W, 0, this.W, this.H);
    g.endFill();
    this.cacheAsBitmap = true;
};
extend(AG.TopSprite, GodStep.Frame);
AG.GamePlay = function(soul) {
    this.soul = soul;
    GodStep.Frame.call(this, 'GamePlay', soul.SW, soul.SH);
    GodStep.IDownUp.call(this, this.W, this.H);
    this.visible = false;
    this.OW = soul.OW;
    this.OH = soul.OH;
    this.prizes = [];
    var S = this.startS = soul.startS;
    this.addChild(this.staticBack = new PIXI.DisplayObjectContainer());
    this.staticBack.addChild(this.back = new AG.Back(soul, 'game_back', null, this));
    this.staticBack.addChild(this.back2 = new AG.Back(soul, 'character_2', null, this));
    this.staticBack.cacheAsBitmap = true;
    this.staticBack.timerCache = 0;
    this.addFrame(this.face = new AG.Face(this));
    this.addChild(this.line = new AG.Img('line', soul.startS * .9, this.W * .5, this.H * .7, 0.5));
    this.addFrame(this.flash = new AG.Img('flash_1', soul.startS * .8, 0, 0, 0.5));
    this.flash.visible = false;
    this.flash.sScale = this.flash.scale.x;
    this.flash.fScale = this.flash.scale.x * 1.3;
    this.addChild(this.grabSprite = new PIXI.DisplayObjectContainer());
    this.addChild(this.prizeContainer = new PIXI.DisplayObjectContainer());
    this.addFrame(this.hand = new AG.Hand(this));
    this.addChild(this.handMask = new PIXI.Graphics());
    this.hand.mask = this.handMask;
    this.addChild(this.fallFlash = new AG.MovieClip(['fall_1', 'fall_2', 'fall_3', 'fall_4'], S * .8, 0, 0, new PIXI.Point(0.5, 1)));
    this.addFrame(this.safe = new AG.Safe(this));
    this.addChild(this.staticBack2 = new PIXI.DisplayObjectContainer());
    this.safe.mask = this.handMask;
    this.staticBack2.addChild(this.top1 = new AG.Back(soul, 'back_end_down', null, this));
    this.staticBack2.addChild(this.top2 = new AG.Back(soul, 'back_end_up', null, this));
    this.staticBack2.cacheAsBitmap = true;
    this.addChild(this.moneyText = new AG.Text('', 160 * S, this.W * .15, this.W * .15, 'right'));
    this.addChild(this.addText = new AG.Text('', 190 * S, this.W * .5, this.W * .5, 'right'));
    this.addChild(this.tutor = new AG.Tutor(soul, this.W * .7, this.H * .75));
    this.moneyText.x = this.W / 2 - this.moneyText.width / 2;
    this.moneyText.y = this.H * .2;
    addEvent(this, GodStep.FRAME_DOWN, this.h_mouse);
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
};
extend(AG.GamePlay, GodStep.Frame);
AG.FRAME_RATE = 1 / 60;
AG.START_HAND = [0.1, .81];
AG.END_HAND = [.82, .67];
pro.getBounds = function() {
    return new PIXI.Rectangle(0, -this.y, this.W, this.soul.OH / this.scale.x);
};
pro.equip = function(data, isEquip) {
    var type = data[2].substr(0, 3);
    switch (type) {
        case 'arm':
            this.hand.equip(data, isEquip);
            break;
        case 'hea':
            this.face.equip(data, isEquip);
            break;
    }
};
pro.update = function() {
    var frameRATE = AG.FRAME_RATE;
    if (this.tutor.visible) {
        this.tutor.nextFrame();
    }
    if (this.staticBack.timerCache-- == 0) {
        this.staticBack.timerCache = -1;
        this.staticBack.cacheAsBitmap = true;
        this.staticBack2.cacheAsBitmap = true;
    } else {
        if (this.staticBack.timerCache < -10) {
            this.staticBack.timerCache = -10;
        }
    }
    if (this.isGameStarted) {
        if (this.isRoundStarted) {
            this.addText.alpha += (0 - this.addText.alpha) * .05;
            this.addText.y -= .5;
            this.line.alpha += (0 - this.line.alpha) * .005;
            this.safe.update();
            this.generateTimer += frameRATE;
            this.spawnXTimer -= frameRATE;
            this.face.eyesTo(this.prizes[0]);
            if (this.handWaitTimer > 0) {
                this.handWaitTimer -= frameRATE;
            } else {
                if (this.isHandGo) {
                    this.handPhase += frameRATE * this.handSpeed;
                    if (this.handPhase > 1) {
                        this.isHandGo = false;
                        this.isHandBack = true;
                        if (this.safe.isLife) {
                            if (this.safe.damage()) {
                                trace('safe destroyed' + " " + this.safe.x + " " + this.safe.y);
                                this.generatePrize('cristal', this.safe.x, this.safe.y);
                                this.safeSpawnTimer = this.spawnSafeTimeMin + Math.random() * (this.spawnSafeTimeMax - this.spawnSafeTimeMin);
                            }
                        }
                    }
                }
                if (!this.isFail) {
                    if (this.isHandBack) {
                        if (this.hand.state != 0) {
                            this.removeGrabbed();
                            this.hand.setState(0);
                            this.face.setState(parseInt(Math.random() * 4 + 5));
                        }
                        this.handPhase -= frameRATE * this.handSpeedBack;
                        if (this.handPhase < 0) {
                            this.isHandBack = false;
                            this.handPhase = 0;
                        }
                    }
                }
            }
            if (!this.safe.visible && !this.isFail) {
                this.safeSpawnTimer -= frameRATE;
                if (this.safeSpawnTimer < 0) {
                    this.safe.init();
                    this.safeLifeTimer = this.safeLife;
                }
            } else {
                if (this.safe.isLife) {
                    this.safeLifeTimer -= frameRATE;
                    if (this.safeLifeTimer < 0) {
                        this.safe.stop();
                        this.safeSpawnTimer = this.spawnSafeTimeMin + Math.random() * (this.spawnSafeTimeMax - this.spawnSafeTimeMin);
                    }
                }
            }
            if (this.generateTimer > this.nextPrizeTime) {
                this.generatePrize();
            }
            var dy = this.H * .05;
            for (var i = 0; i < this.prizes.length; i++) {
                var prize = this.prizes[i];
                prize.move(frameRATE);
                if (!this.isFail) {
                    if (this.grabbed) {
                        this.grabbed.y = this.grabbed.startY + this.hand.deltaY;
                    }
                    if (this.hand.collide(prize)) {
                        this.hand.setState(1);
                        this.removeGrabbed();
                        this.destroyPrize(i);
                        i--;
                        this.isHandGo = false;
                        this.isHandBack = true;
                        if (prize.price == 'x2') {
                            this.roundMoney *= 2;
                            this.addText.setText('x2');
                            GodStep.playSound('double_catch', 0, AG.SOUND);
                        } else {
                            if (prize.type == 'cristal') {
                                trace('cristal catch');
                                GodStep.playSound('catch', 0, AG.SOUND);
                            } else {
                                if (Math.random() > .66) {
                                    GodStep.playSound('catch_1', 0, AG.SOUND);
                                } else if (Math.random() > .33) {
                                    GodStep.playSound('catch_2', 0, AG.SOUND);
                                } else {
                                    GodStep.playSound('catch_3', 0, AG.SOUND);
                                }
                            }
                            this.roundMoney += prize.price;
                            this.addText.setText('+ ' + prize.price);
                            this.addText.updateText();
                            this.addText.alpha = 1;
                            this.addText.x = prize.x + this.W * .03;
                            this.addText.y = this.W * .67;
                            if (Math.random() > .66) {
                                if (this.voiceID == 0) {
                                    this.voiceID++;
                                    GodStep.playSound('voice_1', 0, AG.SOUND);
                                } else if (this.voiceID == 1) {
                                    this.voiceID++;
                                    GodStep.playSound('voice_2', 0, AG.SOUND);
                                } else {
                                    this.voiceID = 0;
                                    GodStep.playSound('voice_3', 0, AG.SOUND);
                                }
                            }
                            if (this.roundMoney < this.bestScore) {
                                this.face.setState(2);
                            } else {
                                this.face.setState(3);
                            }
                        }
                        this.moneyText.setText('' + this.roundMoney);
                        this.moneyText.updateText();
                        this.moneyText.x = this.W * .5 - this.moneyText.width / 2;
                        this.moneyText.y = this.H * .85;
                        this.handWaitTimer = this.handWait;
                        var grabbed = prize.getGrab();
                        if (grabbed) {
                            this.grabbed = grabbed;
                            this.flash.alpha = 1;
                            this.flash.visible = true;
                            this.grabSprite.addChild(this.grabbed);
                            this.flash.x = grabbed.x = grabbed.startX = this.hand.x;
                            this.flash.y = grabbed.y = grabbed.startY = this.hand.y - this.H * prize.gdx;
                            this.flash.x -= this.H * .01;
                            this.flash.scale.x = this.flash.scale.y = this.flash.sScale;
                        }
                    }
                    if (prize.y * this.scale.x > this.soul.OH - this.y - dy) {
                        if (prize.type != 'cristal' && prize.type != 'x2') {
                            this.over(prize);
                            this.fallPrize = prize;
                            prize.isFall = true;
                            this.fallFlash.x = prize.x;
                            this.fallFlash.visible = true;
                        }
                        if (prize.y * this.scale.x > this.soul.OH * 2) {
                            this.destroyPrize(i);
                        }
                    }
                } else {
                    prize.fade();
                }
            }
            if (this.flash.visible) {
                this.flash.alpha += (0 - this.flash.alpha) * .07;
                this.flash.scale.x = this.flash.scale.y += (this.flash.fScale - this.flash.scale.x) * .06;
            }
            if (!this.isFail) {
                if (this.grabbed == null) {
                    this.hand.x = (AG.START_HAND[0] + (AG.END_HAND[0] - AG.START_HAND[0]) * this.handPhase) * this.W;
                    this.hand.y = this.hand.lastY = (AG.START_HAND[1] + (AG.END_HAND[1] - AG.START_HAND[1]) * this.handPhase) * this.H;
                }
            } else {
                this.overTimer--;
                this.fallFlash.phase -= AG.FRAME_RATE * 15;
                this.fallPrize.alpha = 1;
                this.staticBack2.alpha += (1 - this.staticBack2.alpha) * .02;
                if (this.fallFlash.phase < 0) {
                    this.fallFlash.phase = 1;
                    this.fallFlash.nextFrame();
                }
                if (this.overTimer < 0) {
                    this.isRoundStarted = false;
                    if (AG.MUSIC) {}
                    this.soul.screenTo([this.soul.gameover], this);
                    AG.AmazingGrabber.player = {
                        totalMoney: this.totalMoney,
                        totalScore: this.totalScore,
                        bestScore: this.bestScore
                    };
                    GodStep.SaveLocal(AG.AmazingGrabber.player, this.soul.PLAYER_SLOT);
                }
            }
        }
        this.hand.deltaY = Math.sin(this.hand.phase) * this.hand.A;
        this.hand.y = this.hand.lastY + this.hand.deltaY;
        this.hand.phase += 0.1;
    }
};
pro.removeGrabbed = function() {
    if (this.grabbed) {
        this.flash.visible = false;
        this.grabSprite.removeChild(this.grabbed);
        this.grabbed = null;
    }
};
pro.init = function() {
    this.line.visible = this.tutor.visible = AG.TUTOR;
    this.xCounter = 0;
    this.fallFlash.phase = 0;
    this.fallFlash.visible = false;
    this.staticBack2.visible = false;
    this.isFirstHand = true;
    this.voiceID = 0;
    this.staticBack2.alpha = 0;
    this.line.alpha = 1;
    AG.NEW_RECORD = false;
    while (this.prizes.length) {
        this.destroyPrize(0);
    }
    this.hand.setState(0);
    this.face.init();
    this.face.setState(1);
    this.removeGrabbed();
    var player = GodStep.LoadLocal(this.soul.PLAYER_SLOT);
    if (player) {
        this.bestScore = player.bestScore;
        this.totalScore = player.totalScore;
        this.totalMoney = player.totalMoney;
    } else {
        this.bestScore = 0;
        this.totalScore = 0;
        this.totalMoney = 0;
    }
    this.lastTotalMoney = this.totalScore;
    var settings = GodStep.LoadLocal(this.soul.SETTINGS_SLOT);
    if (settings) {
        this.handSpeed = settings.s_handSpeed / 100;
        this.handSpeedBack = settings.s_handSpeedBack / 100;
        this.speedGrow = settings.s_speedGrow / 100;
        this.handWait = settings.s_handWait;
        this.spawnTimeMin = settings.s_spawnTimeMin;
        this.spawnTimeMax = settings.s_spawnTimeMax;
        this.hitCountSafe = settings.s_hitCountSafe;
        this.spawnSafeTimeMin = settings.s_spawnSafeTimeMin;
        this.spawnSafeTimeMax = settings.s_spawnSafeTimeMax;
        this.safeLife = settings.s_spawnSafeLife;
        this.spawnXTimeMin = settings.s_spawnXTimeMin;
        this.spawnXTimeMax = settings.s_spawnXTimeMax;
        this.speedMultiplier = settings.s_speedMultiplier / 100;
        this.cristalGravity = settings.s_cristalGravity / 100;
        this.prize1Chance = settings.s_prize1Chance || 50;
        this.prize2Chance = settings.s_prize2Chance || 50;
        this.prize3Chance = settings.s_prize3Chance || 50;
        this.prize4Chance = settings.s_prize4Chance || 50;
        this.spawnTimeIncreaseMax = settings.s_spawnTimeIncreaseMax / 10000 || .02;
        this.spawnTimeIncreaseMin = settings.s_spawnTimeIncreaseMax / 10000 || .02;
    } else {
        trace('default settings');
        this.handSpeed = 1;
        this.handSpeedBack = 1;
        this.speedGrow = .3;
        this.handWait = 1;
        this.spawnTimeMin = .8;
        this.spawnTimeMax = 1;
        this.hitCountSafe = 3;
        this.spawnSafeTimeMin = 1;
        this.spawnSafeTimeMax = 10;
        this.spawnXTimeMin = 2;
        this.spawnXTimeMax = 10;
        this.spawnTimeIncreaseMin = 2;
        this.spawnTimeIncreaseMax = 2;
        this.prize1Chance = 50;
        this.prize2Chance = 50;
        this.prize3Chance = 50;
        this.prize4Chance = 50;
        this.safeLife = 6;
        this.cristalGravity = .27;
        this.speedMultiplier = 1;
    }
    this.isFail = false;
    this.isGameStarted = true;
    this.isRoundStarted = false;
    this.prizeCount = 0;
    this.visible = true;
    this.handPhase = 0;
    this.isHandGo = false;
    this.roundMoney = 0;
    this.generateTimer = 0;
    this.nextPrizeTime = 1;
    this.isHandBack = false;
    this.safe.visible = false;
    this.spawnXTimer = this.spawnXTimeMin + Math.random() * (this.spawnXTimeMax - this.spawnXTimeMin);
    this.safe.x = this.W;
    this.safe.y = this.H * (AG.END_HAND[1] - 0.2);
    this.hand.x = this.W * AG.START_HAND[0];
    this.hand.y = this.hand.lastY = this.H * AG.START_HAND[1];
    this.moneyText.setText('');
    this.safeSpawnTimer = this.spawnSafeTimeMin + Math.random() * (this.spawnSafeTimeMax - this.spawnSafeTimeMin);
    this.safeLifeTimer = 0;
};
pro.over = function() {
    this.isFail = true;
    this.staticBack2.visible = true;
    this.top1.alpha = this.top2.alpha = 0;
    this.face.setState(4);
    this.hand.setState(2);
    this.removeGrabbed();
    this.safe.stop();
    if (this.soul.AUDIOTAG) {
        GodStep.muteSound('theme_1', 0);
    } else {
        if (createjs.Sound) createjs.Sound.stop();
    }
    if (AG.SOUND) {
        GodStep.playSound('theme_2', 0, AG.MUSIC);
    }
    this.overTimer = 120;
    this.totalMoney += this.roundMoney;
    this.totalScore = Math.max(this.totalScore, this.totalMoney);
    if (this.bestScore < this.roundMoney) {
        AG.NEW_RECORD = true;
    }
    this.bestScore = Math.max(this.bestScore, this.roundMoney);
};
pro.destroyPrize = function(i) {
    this.delFrame(this.prizes[i].destroy());
    this.prizes.splice(i, 1);
};
pro.generatePrize = function(typeInstance, x, y) {
    if (this.isFail) return;
    var chance = Math.random() * 100;
    var specialSpeed = null;
    var instance = typeInstance;
    this.xCounter++;
    var min = Math.max(.25, this.spawnTimeMin - this.prizeCount * this.spawnTimeIncreaseMin);
    var max = Math.max(.25, this.spawnTimeMax - this.prizeCount * this.spawnTimeIncreaseMax);
    if (this.spawnXTimer < 0) {
        this.xCounter = 0;
        instance = 'x2';
        this.spawnXTimer = this.spawnXTimeMin + Math.random() * (this.spawnXTimeMax - this.spawnXTimeMin);
    }
    if (instance == 'cristal') {
        chance = -1;
        specialSpeed = this.speedMultiplier;
    }
    if (instance == 'x2') {
        chance = -2;
        specialSpeed = this.speedMultiplier;
        this.generateTimer = 0;
        this.nextPrizeTime = min + Math.random() * (max - min);
    } else {
        this.generateTimer = 0;
        this.nextPrizeTime = min + Math.random() * (max - min);
    }
    var prize = new AG.Prize(this, chance, specialSpeed || (this.speedGrow * this.prizeCount), .1 + Math.random() * .725, -.05);
    if (instance == 'cristal') {
        prize.mask = this.handMask;
    }
    if (x != null) {
        prize.x = x;
        prize.y = y;
    }
    if (instance == 'x2') {
        prize.x = this.W * (Math.random() * .4 + .3);
        prize.y = this.H * .93;
    }
    this.prizes.push(prize);
    this.addFrame(prize, this.prizeContainer);
    this.prizeCount++;
};
pro.h_mouse = function(e) {
    var t = e.content.target;
    switch (e.type) {
        case GodStep.FRAME_DOWN:
            if (t.isGameStarted && !t.isFail) {
                if (t.tutor.visible) {
                    t.tutor.visible = false;
                }
                t.isRoundStarted = true;
                if (t.isFirstHand) {
                    if (AG.MUSIC) {
                        t.isFirstHand = false;
                        if (this.soul.AUDIOTAG) {
                            GodStep.muteSound('theme_1', 1, AG.MUSIC);
                        } else {
                            createjs.Sound.stop();
                        }
                        GodStep.playSound('theme_1', 1, AG.MUSIC);
                    }
                }
                t.isHandGo = true;
                t.isHandBack = false;
                t.handWaitTimer = 0;
                this.removeGrabbed();
                t.hand.setState(0);
                t.face.setState(parseInt(Math.random() * 4 + 5));
            }
            break;
        case GodStep.FRAME_UP:
            break;
    }
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.scale.x = this.scale.y = value;
        this.fallFlash.y = this.OH;
        this.back.Scale = value;
        this.handMask.y = (this.OH - this.H) / 2 / value;
        this.back2.Scale = value;
        this.top1.Scale = value;
        this.top2.Scale = value;
        this.handMask.clear();
        this.handMask.beginFill(0, 1);
        this.handMask.drawRect(0, 0, this.W, this.OH);
        this.handMask.endFill();
        this.staticBack.timerCache = 30;
        this.staticBack2.cacheAsBitmap = false;
        this.staticBack.cacheAsBitmap = false;
    }
});
GodStep.Slider = function(w, h, s, type, min, max, val, n) {
    GodStep.Frame.call(this, 'Slider');
    GodStep.IOverOut.call(this);
    GodStep.IDownUp.call(this);
    this.CW = 20;
    this.min = min || 0;
    this.max = max || 1;
    this.delta = this.max - this.min;
    this.W = w;
    this.H = h * s;
    this.type = type;
    this.isFloat = (type > 0 && type < 1);
    this.back = this.createGraphics('back');
    this.cursor = this.createGraphics('cursor');
    this.label = this.addFrame(new GodStep.Text(n || '', h * s, 'Arial', 'left', 0xffffff));
    this.valueText = this.addFrame(new GodStep.Text(val || '', h * s, 'Arial', 'left', 0xffffff));
    this.valueText.y = this.label.y = -this.H;
    GodStep.IDownUp.call(this.cursor);
    GodStep.addEvent(this, GodStep.FRAME_OUT, this.h_back);
    GodStep.addEvent(this, GodStep.FRAME_OVER, this.h_back);
    GodStep.addEvent(this, GodStep.FRAME_UP, this.h_cursor);
    GodStep.addEvent(this, GodStep.FRAME_MOVE, this.h_move);
    GodStep.addEvent(this.cursor, GodStep.FRAME_DOWN, this.h_cursor);
    this.setHitArea(0, 0, this.W, this.H);
    this.setHitArea(0, 0, this.CW, this.H, this.cursor);
    this.redrawBack();
    this.redraw();
    this.Value = val;
};
extend(GodStep.Slider, GodStep.Frame);
pro.redrawBack = function() {
    if (!this.cursor.IsDown) {
        this.back.clear();
        this.rect(this.W, this.H, (this.IsOver) ? 0xff4444 : 0xffaaaa, .8, 0, 0, this.back);
    }
};
pro.redraw = function() {
    this.cursor.clear();
    this.rect(this.CW, this.H, (this.cursor.IsDown) ? 0x00ff00 : 0xffffff, .8, 0, 0, this.cursor);
};
pro.h_back = function(e) {
    e.target.redrawBack();
};
pro.h_move = function(e) {
    var t = e.content.t;
    var power;
    var dv;
    if (e.content.getLocalPosition) {
        var point = e.content.getLocalPosition(t);
        if (t.cursor.IsDown) {
            power = 1;
            t.cursor.position.x = Math.max(0, Math.min(point.x - t.cursor.downPoint.x, t.W - t.CW));
            dv = (t.cursor.position.x / (t.W - t.CW)) * (t.delta) + t.min - t.lastValue;
            trace(power);
            t.value = t.lastValue + dv * power;
            GodStep.dispatch(t, GodStep.FRAME_CHANGED);
            if (t.type == 'int') {
                t.value = parseInt(t.value);
            } else {
                if (t.isFloat) {
                    t.value = parseInt(t.value / t.type) * t.type;
                } else {
                    t.value = parseInt(t.value / t.type) * t.type;
                }
            }
            t.valueText.setText(t.value);
            t.valueText.updateText();
            t.valueText.x = t.W - t.valueText.width;
            t.updateCursor();
        }
    }
};
pro.h_cursor = function(e) {
    if (e.content.t instanceof GodStep.Slider) {
        e.content.t.cursor.IsDown = false;
        e.content.t.redraw();
        e.content.t.lastValue = e.content.t.value;
    } else {
        e.content.t.parent.redraw();
        e.content.t.lastValue = e.content.t.value;
    }
};
pro.updateCursor = function() {
    this.cursor.x = ((this.value - this.min) / (this.delta)) * (this.W - this.CW);
};
Object.defineProperty(GodStep.Slider.prototype, 'IsDown', {
    set: function(value) {
        this.cursor.IsDown = false;
        this.redraw();
        this.redrawBack();
    }
});
Object.defineProperty(GodStep.Slider.prototype, 'Value', {
    get: function() {
        return this.value;
    },
    set: function(value) {
        this.value = value;
        if (this.type == 'int') {
            this.value = parseInt(this.value);
        } else {
            if (this.isFloat) {
                this.value = parseInt(this.value / this.type) * this.type;
            } else {
                this.value = parseInt(this.value / this.type) * this.type;
            }
        }
        this.lastValue = this.value;
        this.valueText.setText(this.value);
        this.valueText.updateText();
        this.valueText.x = this.W - this.valueText.width;
        this.updateCursor();
    }
});
AG.Dev = function(soul) {
    this.soul = soul;
    GodStep.Frame.call(this, 'Dev', soul.W, soul.H);
    GodStep.IDownUp.call(this, soul.W, soul.H);
    var S = soul.startS * .7;
    this.addFrame(this.b_back = new AG.TextButton('back', 35, 0x562466, this, S, soul.W * .1, soul.H * .05));
    this.addFrame(this.b_default = new AG.TextButton('load build', 35, 0x562466, this, S, soul.W * .5, soul.H * .05));
    this.addFrame(this.b_million = new AG.TextButton('millionier!', 35, 0x562466, this, S, soul.W * .85, soul.H * .05));
    addEvent(this.b_back, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_default, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this.b_million, AG.ImgButton.CLICK, this.h_buttons);
    addEvent(this, GodStep.FRAME_UP, this.h_mouse);
    this.visible = false;
    var sliderW = soul.W * .8;
    var sliderH = 50;
    this.addFrame(this.s_handSpeed = new GodStep.Slider(sliderW, sliderH, S, 'int', 50, 600, 100, 'hand speed forward'));
    this.addFrame(this.s_handSpeedBack = new GodStep.Slider(sliderW, sliderH, S, 'int', 50, 500, 100, 'hand speed back'));
    this.addFrame(this.s_handWait = new GodStep.Slider(sliderW, sliderH, S, .1, 0.1, 1, .3, 'hand wait'));
    this.addFrame(this.s_speedGrow = new GodStep.Slider(sliderW, sliderH, S, .1, .1, 10, 3, 'prize speed grow'));
    this.addFrame(this.s_spawnTimeMin = new GodStep.Slider(sliderW / 2, sliderH, S, .1, .5, 25, .1, 'spawn time min'));
    this.addFrame(this.s_spawnTimeMax = new GodStep.Slider(sliderW / 2, sliderH, S, .1, .5, 25, 1, 'spawn time max'));
    this.addFrame(this.s_hitCountSafe = new GodStep.Slider(sliderW, sliderH, S, 'int', 1, 10, 2, 'safe hit count'));
    this.addFrame(this.s_spawnSafeTimeMin = new GodStep.Slider(sliderW, sliderH, S, 'int', 1, 30, 2, 'safe spawn time min'));
    this.addFrame(this.s_spawnSafeTimeMax = new GodStep.Slider(sliderW, sliderH, S, 'int', 1, 50, 10, 'safe spawn time max'));
    this.addFrame(this.s_spawnSafeLife = new GodStep.Slider(sliderW, sliderH, S, 'int', 1, 200, 10, 'safe life'));
    this.addFrame(this.s_spawnXTimeMin = new GodStep.Slider(sliderW, sliderH, S, 'int', 1, 30, 2, 'X spawn time min'));
    this.addFrame(this.s_spawnXTimeMax = new GodStep.Slider(sliderW, sliderH, S, 'int', 1, 50, 10, 'X spawn time max'));
    this.addFrame(this.s_speedMultiplier = new GodStep.Slider(sliderW, sliderH, S, 'int', 1, 300, 100, 'cristal & multiplier speed'));
    this.addFrame(this.s_cristalGravity = new GodStep.Slider(sliderW, sliderH, S, 'int', 1, 300, 100, 'cristal & multiplier gravity'));
    this.addFrame(this.s_spawnTimeIncreaseMax = new GodStep.Slider(sliderW / 2, sliderH, S, 'int', 1, 200, 2, 'spawn grow max'));
    this.addFrame(this.s_spawnTimeIncreaseMin = new GodStep.Slider(sliderW / 2, sliderH, S, 'int', 1, 200, 2, 'spawn grow min'));
    this.addFrame(this.s_prize1Chance = new GodStep.Slider(sliderW, sliderH, S, 'int', 0, 100, 50, 'chance worm'));
    this.addFrame(this.s_prize2Chance = new GodStep.Slider(sliderW, sliderH, S, 'int', 0, 100, 50, 'chance fish'));
    this.addFrame(this.s_prize3Chance = new GodStep.Slider(sliderW, sliderH, S, 'int', 0, 100, 50, 'chance bear'));
    this.addFrame(this.s_prize4Chance = new GodStep.Slider(sliderW, sliderH, S, 'int', 0, 100, 50, 'chance candy'));
    var sd = 25 * S;
    this.s_prize4Chance.x = this.s_prize1Chance.x = this.s_prize2Chance.x = this.s_prize3Chance.x = this.s_handSpeedBack.x = this.s_speedMultiplier.x = this.s_handWait.x = this.s_hitCountSafe.x = this.s_speedGrow.x = this.s_cristalGravity.x = this.s_spawnXTimeMax.x = this.s_spawnXTimeMin.x = this.s_spawnSafeLife.x = this.s_spawnSafeTimeMin.x = this.s_spawnSafeTimeMax.x = this.s_handSpeed.x = soul.W * .1;
    this.s_handSpeed.y = this.b_back.y + this.b_back.H + sd;
    this.s_handSpeedBack.y = this.s_handSpeed.y + this.s_handSpeed.H * 2 + sd;
    this.s_handWait.y = this.s_handSpeedBack.y + this.s_handSpeedBack.H * 2 + sd;
    this.s_speedGrow.y = this.s_handWait.y + this.s_handWait.H * 2 + sd;
    this.s_hitCountSafe.y = this.s_speedGrow.y + this.s_speedGrow.H * 2 + sd;
    this.s_spawnSafeTimeMin.y = this.s_hitCountSafe.y + this.s_hitCountSafe.H * 2 + sd;
    this.s_spawnSafeTimeMax.y = this.s_spawnSafeTimeMin.y + this.s_spawnSafeTimeMin.H * 2 + sd;
    this.s_spawnSafeLife.y = this.s_spawnSafeTimeMax.y + this.s_spawnSafeTimeMax.H * 2 + sd;
    this.s_spawnXTimeMin.y = this.s_spawnSafeLife.y + this.s_spawnSafeLife.H * 2 + sd;
    this.s_spawnXTimeMax.y = this.s_spawnXTimeMin.y + this.s_spawnXTimeMin.H * 2 + sd;
    this.s_speedMultiplier.y = this.s_spawnXTimeMax.y + this.s_spawnXTimeMax.H * 2 + sd;
    this.s_cristalGravity.y = this.s_speedMultiplier.y + this.s_speedMultiplier.H * 2 + sd;
    this.s_spawnTimeIncreaseMin.y = this.s_spawnTimeIncreaseMax.y = this.s_cristalGravity.y + this.s_cristalGravity.H * 2 + sd;
    this.s_spawnTimeMin.y = this.s_spawnTimeMax.y = this.s_spawnTimeIncreaseMin.y + this.s_spawnTimeIncreaseMin.H * 2 + sd;
    this.s_prize1Chance.y = this.s_spawnTimeMin.y + this.s_spawnTimeMin.H * 2 + sd;
    this.s_prize2Chance.y = this.s_prize1Chance.y + this.s_prize1Chance.H * 2 + sd;
    this.s_prize3Chance.y = this.s_prize2Chance.y + this.s_prize2Chance.H * 2 + sd;
    this.s_prize4Chance.y = this.s_prize3Chance.y + this.s_prize3Chance.H * 2 + sd;
    this.s_spawnTimeMin.x = this.s_spawnTimeIncreaseMin.x = soul.W * .075;
    this.s_spawnTimeMax.x = this.s_spawnTimeIncreaseMax.x = this.s_spawnTimeIncreaseMin.x + this.s_spawnTimeIncreaseMin.width + soul.W * .05;
};
extend(AG.Dev, GodStep.Frame);
pro.update = function() {};
pro.init = function() {
    this.visible = true;
    var data = GodStep.LoadLocal(this.soul.SETTINGS_SLOT);
    if (data != null) {
        this.s_handSpeed.Value = data.s_handSpeed;
        this.s_handWait.Value = data.s_handWait;
        this.s_speedGrow.Value = data.s_speedGrow;
        this.s_spawnTimeMin.Value = data.s_spawnTimeMin;
        this.s_spawnTimeMax.Value = data.s_spawnTimeMax;
        this.s_hitCountSafe.Value = data.s_hitCountSafe;
        this.s_spawnSafeTimeMin.Value = data.s_spawnSafeTimeMin;
        this.s_spawnSafeTimeMax.Value = data.s_spawnSafeTimeMax;
        this.s_spawnSafeLife.Value = data.s_spawnSafeLife;
        this.s_spawnXTimeMin.Value = data.s_spawnXTimeMin || 30;
        this.s_spawnXTimeMax.Value = data.s_spawnXTimeMax || 50;
        this.s_handSpeedBack.Value = data.s_handSpeedBack || 100;
        this.s_cristalGravity.Value = data.s_cristalGravity || 100;
        this.s_speedMultiplier.Value = data.s_speedMultiplier;
        this.s_spawnTimeIncreaseMin.Value = data.s_spawnTimeIncreaseMin || 2;
        this.s_spawnTimeIncreaseMax.Value = data.s_spawnTimeIncreaseMax || 2;
        this.s_prize1Chance.Value = data.s_prize1Chance || 50;
        this.s_prize2Chance.Value = data.s_prize2Chance || 50;
        this.s_prize3Chance.Value = data.s_prize3Chance || 50;
        this.s_prize4Chance.Value = data.s_prize4Chance || 50;
    }
};
pro.h_buttons = function(e) {
    var t = e.content.t;
    var p = t.parent;
    var s = p.soul;
    switch (t) {
        case p.b_default:
            GodStep.SaveLocal(GodStep.LoadText(s.defaultSettings), s.SETTINGS_SLOT);
            p.init();
            break;
        case p.b_million:
            GodStep.SaveLocal({
                totalMoney: 1000000,
                totalScore: 1000000,
                bestScore: 1000000
            }, s.PLAYER_SLOT);
            break;
        case p.b_back:
            var data = {
                s_handSpeed: p.s_handSpeed.value,
                s_speedGrow: p.s_speedGrow.value,
                s_handWait: p.s_handWait.value,
                s_spawnTimeMin: p.s_spawnTimeMin.value,
                s_spawnTimeMax: p.s_spawnTimeMax.value,
                s_hitCountSafe: p.s_hitCountSafe.value,
                s_spawnSafeTimeMin: p.s_spawnSafeTimeMin.value,
                s_spawnSafeTimeMax: p.s_spawnSafeTimeMax.value,
                s_spawnSafeLife: p.s_spawnSafeLife.value,
                s_spawnXTimeMin: p.s_spawnXTimeMin.value,
                s_spawnXTimeMax: p.s_spawnXTimeMax.value,
                s_handSpeedBack: p.s_handSpeedBack.value,
                s_cristalGravity: p.s_cristalGravity.value,
                s_speedMultiplier: p.s_speedMultiplier.value,
                s_spawnTimeIncreaseMax: p.s_spawnTimeIncreaseMax.value,
                s_spawnTimeIncreaseMin: p.s_spawnTimeIncreaseMin.value,
                s_prize1Chance: p.s_prize1Chance.value,
                s_prize2Chance: p.s_prize2Chance.value,
                s_prize3Chance: p.s_prize3Chance.value,
                s_prize4Chance: p.s_prize4Chance.value
            };
            GodStep.SaveLocal(data, s.SETTINGS_SLOT);
            s.screenTo([s.startmenu], p);
            break;
    }
};
pro.h_mouse = function(e) {
    var t = e.content.target;
    switch (e.type) {
        case GodStep.FRAME_UP:
            if (e.content.target.soul) {
                t.b_default.isDown = t.b_back.isDown = false;
                t.b_default.Scale = t.b_back.Scale = 1;
                t.s_handSpeed.IsDown = t.s_spawnTimeMax.IsDown = t.s_spawnTimeMin.IsDown = t.s_speedGrow.IsDown = t.s_hitCountSafe.IsDown = t.s_spawnSafeLife.IsDown = t.s_spawnXTimeMax.IsDown = t.s_spawnXTimeMin.IsDown = t.s_handSpeedBack.IsDown = t.s_spawnSafeTimeMin.IsDown = t.s_speedMultiplier.IsDown = t.s_cristalGravity.IsDown = t.s_spawnTimeIncreaseMax.IsDown = t.s_spawnTimeIncreaseMin.IsDown = t.s_prize1Chance.IsDown = t.s_prize2Chance.IsDown = t.s_prize3Chance.IsDown = t.s_prize4Chance.IsDown = t.s_spawnSafeTimeMax.IsDown = false;
            }
            break;
    }
};
AG.Transmission = function(soul) {
    this.soul = soul;
    GodStep.Frame.call(this, 'Transmission', soul.SW, soul.SH);
    this.addChild(this.back = new AG.Back(soul, 'menu_3', 0xaaaaaa));
    this.cacheAsBitmap = true;
    this.back.timerCache = -1;
};
extend(AG.Transmission, GodStep.Frame);
pro.start = function(screenArr, outScreen) {
    if (!this.isStarted) {
        this.screens = screenArr;
        this.outScreen = outScreen;
        for (var i = 0; i < screenArr.length; i++) {
            screenArr[i].visible = true;
            screenArr[i].visible = false;
        }
        this.isStarted = true;
        this.isGoesUp = true;
        this.alpha = 0;
        this.visible = true;
    }
};
pro.update = function() {
    if (this.back.timerCache-- == 0) {
        this.back.timerCache = -1;
        var vis = this.visible;
        var a = this.alpha;
        this.cacheAsBitmap = false;
        this.alpha = 1;
        this.visible = true;
        this.cacheAsBitmap = true;
        this.visible = vis;
        this.alpha = a;
    } else {
        if (this.back.timerCache < -10) {
            this.back.timerCache = -10;
        }
    }
    if (this.isStarted) {
        if (this.isGoesUp) {
            this.alpha += 0.1;
            if (this.alpha > 1) {
                this.alpha = 1;
                this.isGoesUp = false;
                this.outScreen.visible = false;
                for (var s in this.screens) {
                    this.screens[s].cacheAsBitmap = false;
                    this.screens[s].init();
                }
            }
        } else {
            this.alpha -= 0.1;
            if (this.alpha <= 0) {
                this.alpha = 0;
                for (var ss in this.screens) {
                    this.screens[ss].cacheAsBitmap = false;
                }
                this.visible = false;
                this.isStarted = false;
            }
        }
    }
};
Object.defineProperty(pro, 'Scale', {
    get: function() {
        return this.scale.x;
    },
    set: function(value) {
        this.scale.x = this.scale.y = value;
        this.cacheAsBitmap = false;
        this.back.Scale = value;
        this.back.timerCache = 37;
    }
});
AG.Lang = function(lang) {
    AG.langs = this;
    switch (lang.toUpperCase()) {
        case 'en':
            this.lang = 0;
            break;
        case 'cj':
            this.lang = 1;
            break;
        case 'EN':
            this.lang = 2;
            break;
        case 'DE':
            this.lang = 3;
            break;
        case 'ES':
            this.lang = 4;
            break;
        case 'FR':
            this.lang = 5;
            break;
        case 'IT':
            this.lang = 6;
            break;
        case 'PT':
            this.lang = 7;
            break;
        case 'RU':
            this.lang = 8;
            break;
        case 'TR':
            this.lang = 9;
            break;
        case 'NL':
            this.lang = 10;
            break;
        case 'PL':
            this.lang = 11;
            break;
        default:
            this.lang = 0;
            break;
    }
    var s = this.S = [];
    var newSymbols = 'ÇÕÓçíãóêéäßöüñ¡¿ÈÃŞÜşğĘęąŁłńŃś' + 'абвгдежзиклмнопрстуфхцчшщьыэюяМАГЗИНЛЦУКБХЧДВПСРТО' + 'İЬЖЕàìФШЩЪЫЭЮЯıć';
    s['options'] = ['OPTIONS', 'OPÇÕES', 'OPTIONS', 'Optionen', 'OPCIONES', 'OPTIONS', 'OPZIONI', 'OPÇÕES', 'ОПЦИИ', 'SEÇENEKLER', 'OPTIES', 'OPCJE'];
    s['tutor'] = ['Tutorial on/off', 'Ativar/Desativar Tutorial', 'Tutorial on/off', 'Tutorial an/aus', 'Tutorial sí/no', 'Tutoriel activé / désactivé', 'Tutorial on/off', 'Tutorial ligado/desligado', 'Инструкции вкл/выкл', 'Eğitim açık/kapalı', 'Handleiding aan / uit', 'Instrukcje włącz/wyłącz'];
    s['erase'] = ['ERASE PROGRESS', 'APAGAR PROGRESSO', 'DELETE PROGRESS', 'Fortschritt löschen', 'BORRAR PROGRESO', 'SUPPRIMER LES PROGRÈS', 'ELIMINA AVANZAMENTO', 'APAGAR PROGRESSÃO', 'УДАЛИТЬ ПРОДВИЖЕНИЕ', 'İLERLEMEYİ SİL', 'VOORTGANG WISSEN', 'USUŃ WYNIKI'];
    s['head'] = ['FACE', 'CARA', 'FACE', 'GESICHT', 'CARA', 'VISAGE', 'VOLTO', 'ROSTO', 'ЛИЦО', 'YÜZ', 'GEZICHT', 'TWARZ'];
    s['arm'] = ['ARM', 'BRAÇO', 'ARM', 'ARM', 'BRAZO', 'BRAS', 'BRACCIO', 'BRAÇO', 'РУКА', 'SİLAH', 'ARM', 'RĘKA'];
    s['shifty'] = ['Shifty Eyes', 'Olhos Astutos', 'Shifty Eyes', 'Wackelaugen', 'Mirada\nesquiva', 'Yeux fuyants', 'Occhi\nsfuggenti', 'Olhos\nEsgazeados', 'Бегающие\nглазки', 'Kurnaz Gözler', 'Onbetrouwbare\nogen', 'Rozbiegane\noczy'];
    s['gents'] = ["Gent's\nMoustache", "Bigode de\nCavalheiro", "Gent's\nMoustache", 'Gentleman-\nSchnurrbart', 'Bigote de\ncaballero', 'Moustache de\ngentleman', 'Baffi da\ngentiluomo', 'Bigode à\nCavalheiro', 'Усы\nджентльмена', 'Centilmen\nBıyık', 'Mannensnor', 'Męskie\nwąsy'];
    s['Hachimaki'] = ["Hachimaki", "Bandana", 'Hachimaki', 'Hachimaki', 'Hachimaki', 'Hachimaki\n(bandeau de tête)', 'Hachimaki', 'Hachimaki', 'Хатимаки', 'Hachimaki', 'Hachimaki', 'Opaska\nHachimaki'];
    s['Chow Chow'] = ['Chow Chow', 'Chow Chow', 'Chow Chow', 'Chow-Chow-\nHaare', 'Chow Chow', 'Chow Chow', 'Chow Chow', 'Chow Chow', 'Чау-чау', 'Çov Çov', 'Chow Chow', 'Chow Chow'];
    s['hip'] = ['Hip\nGlasses', 'Óculos', 'Hip\nGlasses', 'Hipster-\nBrille', 'Gafas\nmodernas', 'Lunettes\ntendances', 'Occhiali\nda vista', 'Óculos\nHip', 'Хипстерские\nочки', 'Çerçevel\nGözlük', 'Hippe\nbril', 'Hipsterskie\nokulary'];
    s['clown'] = ['Clown Nose', 'Nariz de\nPalhaço', 'Clown Nose', 'Clown-Nase', 'Nariz d\npayaso', 'Nez de\nclown', 'Naso da\nclown', 'Nariz de\nPalhaço', 'Нос\nклоуна', 'Palyaço\nBurnu', 'Clownsneus', 'Nos\nclowna'];
    s['brows'] = ['Bushy Brows', 'Sobrancelhas\nDensas', 'Bushy Brows', 'Buschige\nAugenbrauen', 'Cajas\npobladas', 'Sourcils\nbroussailleux', 'Sopracciglia\nfolte', 'Sobrancelhas\nCerradas', 'Густые брови', 'Gür Kaşlar', 'Borstelige\nwenkbrouwen', 'Krzaczaste\nbrwi'];
    s['vamp'] = ['Vamp Teeth', 'Dentes de\nVampiro', 'Vamp Teeth', 'Vampirzähne', 'Dientes de \nvampiro', 'Dents de\nvamp ', 'Denti da\nvampiro', 'Dentes de\nVampiro', 'Клыки\nвампира', 'Vampir\nDişleri', 'Vampiertanden', 'Zęby\nwampira'];
    s['coolshades'] = ['Cool Shades', 'Óculos de\nSol', 'Cool Shades', 'Coole\nSonnenbrille', 'Gafas de sol\ngeniales', 'Lunettes de\nsoleil à la mode', 'Occhiali', 'Óculos\nCool', 'Солнцезащитные\nочки', 'Harika\nGölgeler', 'Coole\nzonnebril', 'Modne\nokulary'];
    s['Tall Hat'] = ['Tall Hat', 'Cartola', 'Tall Hat', 'Zylinder', 'Sombrero de\ncopa', 'Chapeau haut\nde forme', 'Cappello\nalto', 'Chapéu Alto', 'Цилиндр', 'Uzun Şapka', 'Hoge hoed', 'Wysok\nkapelusz'];
    s['longe'] = ['Long\nEyelashes', 'Cílios\nLongos', 'Long\nEyelashes', 'Falsche\nWimpern', 'Pestañas\nlargas', 'Longs cils', 'Ciglia\nlunghe', 'Pestanas\nCompridas', 'Длинные\nресницы', 'Uzu\nKirpikler', 'lange\nwimpers', 'Długie\nrzęsy'];
    s['gold'] = ['Gold\nCrown', 'Coroa de\nOuro', 'Gold Crown', 'Goldene\nKrone', 'Corona de\noro', 'Couronne\nen or', 'Corona\ndorata', 'Coroa\nDourada', 'Золотая\nкорона', 'Altın Taç', 'Gouden kroon', 'Złota\nkorona'];
    s['smile'] = ['Smiley Face', 'Cara\nSorridente', 'Smiley Face', 'Smiley-\nGesicht', 'Cara\nsonriente', 'Smiley', 'Faccia\nsorridente', 'Rosto\nSorridente', 'Усы\nджентльмена', 'Gülen\nSurat', 'Lachebek', 'Uśmiechnięta\nbuzia'];
    s['Arm Hair'] = ['Arm Hair', 'Pelo do\nBraço', 'Arm Hair', 'Haariger\nArm', 'Pelo de\nbrazo', 'Poils des\nbras ', 'Peluria sul\nbraccio', 'Pelos nos\nBraços', 'Волосатая\nрука', 'Kol Tüyü', 'Armhaar', 'Owłosiona\nręka'];
    s['yoga'] = ['Yoga\nBand', 'Faixa de\nIoga', 'Yoga\nBand', 'Yoga-\nBand', 'Cinta de\nyoga', 'Bande de\nyoga ', 'Elastico per\nlo yoga', 'Banda de\nIoga', 'Повязка для\nйоги', 'Yoga Bandı', 'yogaband', 'Opaska na\njogę'];
    s['sticky'] = ['Sticky\nFingers', 'Palma\nPegajosa', 'Sticky\nPalm', 'Klebrige\nHände', 'Palma\npegajosa', 'Paume\ncollante', 'Palma\nappiccicosa', 'Palma\nPegajosa', 'Липкая\nладошка', 'Yapışkan\nAvuç içi', 'Plakkerige\nhandpalm', 'Klejąca\ndłoń'];
    s['slimy'] = ['Slimy Squid', 'Lula\nGosmenta', 'Slimy\nSquid', 'Schleimiger\nTintenfisch', 'Calamar\nbaboso', 'Calmar\nvisqueux ', 'Calamaro\nviscido', 'Lula\nEscorregadia', 'Липкий\nкальмар', 'Çamurlu\nKalamar', 'Slijmerige\ninktvis', 'Oślizgła\nkałamarnica'];
    s['hair'] = ['Hair Curlers', 'Bobes de\nCabelo', 'Hair\nCurlers', 'Lockenwickler', 'Rulos', 'Bigoudis', 'Bigodini', 'Rolos de\n Cabelo', 'Бигуди', 'Saç\nBükücü', 'Haarkrullers', 'Loki'];
    s['spike'] = ['Spike\nBracelet', 'Faixa com\nEspinhos', 'Spike\nBand', 'Stachelarmband', 'Pulsera de\npinchos', 'Bande en\npointe', 'Bracciale\nchiodato', 'Crista', 'Браслет с\nшипами', 'Çivili\nBand', 'Spijkerband', 'Opaska z\nkolcami'];
    s['garden'] = ['Garden Glove', 'Luva de\nJardinagem', 'Garden\nGlove', '\nGartenhandschuh', 'Guante de\njardinería', 'Gant de\njardinage', 'Guanti da\ngiardinaggio', 'Luva de\nJardim', 'Садовая\nперчатка', 'Bahçe\nEldiveni', 'Tuinhandschoen', 'Rękawica\nogrodowa'];
    s['tailored'] = ['Tailored\nSuit', 'Terno', 'Tailored\nSuit', 'Maßgeschneiderter\nAnzug', 'Traje a\nmedida', 'Costume', 'Abito\nsartoriale', 'Fato à\nMedida', 'Английский\nкостюм', 'Dikilmiş\nElbise', 'Maatpak', 'Garnitur'];
    s['critter'] = ['Critter Pet', 'Animal de\nEstimação', 'Critter\nPet', 'Kleines\nHaustier', 'Mascota de\ncriatura', 'Bestiole de\ncompagnie', 'bestiolina', 'Bicharoco de\nEstimação', 'Домашний\nпитомец', 'Evcil\nYaratık', 'Huisdier', 'Zwierzątko\nCritter'];
    s['lux'] = ['Lux Watch', 'Relógio\nIluminado', 'Lux Watch', 'Luxus-Uhr', 'Reloj de \nlujo', 'Montre de\nLuxe', 'Orologio di\nlusso', 'Relógio de\nLuxo', 'Роскошные\nчасы', 'Lüks Saat', 'Luxe\nhorloge', 'Luksusowy\nzegarek '];
    s['glove'] = ['Leather\nGlove', 'Luva de\nCouro', 'Leather\nGlove', 'Lederhandschuh', 'Guante de\ncuero', 'Gant en\ncuir', 'Guanto in\npelle', 'Luva de\nCouro', 'Кожаная\nперчатка', 'Deri\nEldiven', 'Lederen\nhandschoen', 'Skórzana\nrękawiczka'];
    s['total'] = ['Total', 'Total', 'Total', 'Gesamt', 'Total', 'Total', 'Totale', 'Total', 'Всего', 'Toplam', 'Totaal', 'Razem'];
    s['yes'] = ['Yes', 'Sim', 'Yes', 'Ja', 'Sí', 'Oui', 'Sì', 'Sim', 'Да', 'Evet', 'Ja', 'Tak'];
    s['no'] = ['No', 'Não', 'No', 'Nein', 'No', 'Non', 'NO', 'Não', 'Нет', 'Hayır', 'Nee', 'Nie'];
    s['toclaim'] = [' to claim the next prize', ' para receber o próximo prêmio', ' to claim the next prize', ' um den nächsten preis freizuschalten', ' para reclamar el premio siguiente', ' pour réclamer le prix suivant', ' per richiedere il prossimo premio', ' para reclamar o próximo prémio', ' для требования следующего приза', ' sonraki ödülü talep etmek için ', ' om de volgende prijs te claimen', ' aby odebrać następną nagrodę'];
    s['youunlocked'] = ['You unlocked a new item! Congrats!', 'Você desbloqueou um item novo! Parabéns!', 'You unlocked a new item! Congrats!', 'Toll, Du hast einen neuen Gegenstand freigeschaltet! ', '¡Has desbloqueado un artículo nuevo! ¡Enhorabuena!', 'Vous avez déverrouillé un nouvel élément ! Félicitations !', 'Congratulazioni! Hai sbloccato un nuovo oggetto!', 'Desbloqueou um novo artigo! Parabéns!', 'Ты разблокировал новый предмет! Поздравляем!', 'Yeni bir öğenin kilidini açtın! Tebrikler!', 'U hebt een nieuw item ontgrendeld! Gefeliciteerd!', 'Odblokowałeś/aś nową rzecz! Gratulacje!'];
    s['newrecord'] = ['New record!', 'Novo recorde!', 'New record!', 'Neuer Rekord!', 'Nuevo récord!', 'Nouveau Record!', 'Nuovo record!', 'Novo Recorde!', 'Новая запись!', 'Yeni Rekor!', 'Nieuw record!', 'Nowy rekord!'];
    s['equipthisitem'] = ['Equip this item?', 'Equipar esse\nitem?', 'Equip this item?', 'Gegenstand anlegen?', '¡Equipar este objeto?', 'Installer cet\néquipement?', 'Usa questo\noggetto?', 'Equipar este item?', 'Забрать этот предмет?', 'Bu parçayı giy?', 'Dit element\nuitrusten?', 'Użyć tego\nprzedmiotu?'];
    s['buythisitem'] = ['Buy this item for', 'Comprar este item por', 'Buy this item for?', 'Diesen Gegenstand für kaufen?', '¿Quieres comprar este artículo por?', 'Achetez cet article pour?', 'Compra questo oggetto per?', 'Comprar este artigo por?', 'Купи этот предмет за?', 'Bu parçayı fiyata al?', 'Dit item kopen voor?', 'Kup to za?'];
    s['nocoins'] = ['Not enough coins!', 'Moedas insuficientes!', 'Not enough coins', 'Nicht genug Münzen', 'No tienes suficientes monedas', 'Pas assez de pièces ', 'Non ci sono abbastanza monete', 'Moedas insuficientes', 'Недостаточно монет', 'Yeterli para yok', 'Niet genoeg munten', 'Brak wystarczającej liczby monet'];
    s['warning'] = ['Warning!', 'Atenção!', 'Warning!', 'Achtung!', '¡Atención!', 'Attention!', 'Attenzione!', 'Aviso!', 'Внимание!', 'Uyarı!', 'Waarschuwing!', 'Uwaga!'];
    s['doyouwantclear'] = [' Do you want to\ndelete your saved data?', ' Deseja excluir os\ndados salvos?', ' Do you want to delete\nyour saved data?', ' Willst Du wirklich Deinen\nFortschritt löschen?', ' ¿Quieres borrar tus\ndatos guardados?', 'Voulez-vous supprimer vos\ndonnées sauvegardées?', ' Vuoi eliminare i\ndati salvati?', ' Deseja apagar os seus\ndados guardados?', ' Ты хочешь удалить\nсохраненные данные?', ' Kaydedilmiş verini\nsilmek istiyor musun?', ' Wil je je opgeslagen\ngegevens wissen?', ' Chcesz usunąć\nzapamiętane informacje?'];
};
extend(AG.Lang, Object);
AG.S = function(v) {
    return AG.langs.S[v][AG.langs.lang];
};
AG.Splash = function(soul) {
    GodStep.Frame.call(this, 'Splash');
    GodStep.IDownUp.call(this, soul.W, soul.H);
    this.soul = soul;
    this.timer = 70;
    this.visible = false;
    this.addChild(this.back = new AG.Img('splash', soul.startS * 1, soul.W / 2, soul.H * .5, 0.5));
};
extend(AG.Splash, GodStep.Frame);
pro.update = function() {
    if (this.visible) {
        this.timer--;
        if (this.timer == 0) {
            this.soul.screenTo([this.soul.startmenu, this.soul.background], this);
        }
    }
};
pro.init = function() {
    this.visible = true;
};
AG.FontLoader = function(assetURLs, crossorigin) {
    new AG.BitmapFontLoader();
};
extend(AG.FontLoader, PIXI.AssetLoader);
AG.FontString = '<font>' + '<info face="Font1" size="97" />' + '<common lineHeight="62" scaleW="794" scaleH="794" pages="1" />' + '<pages>' + '<page id="0" file="Font1.png" />' + '</pages>' + '<chars count="192">' + '<char id="33" x="739" y="730" width="13" height="50" xoffset="0" yoffset="12" xadvance="16" /><!-- ! -->' + '<char id="34" x="511" y="610" width="17" height="17" xoffset="0" yoffset="12" xadvance="20" /><!-- " -->' + '<char id="35" x="303" y="602" width="38" height="51" xoffset="0" yoffset="11" xadvance="41" /><!-- # -->' + '<char id="36" x="606" y="438" width="32" height="61" xoffset="0" yoffset="6" xadvance="35" /><!-- $ -->' + '<char id="37" x="71" y="205" width="52" height="50" xoffset="0" yoffset="12" xadvance="55" /><!-- % -->' + '<char id="38" x="190" y="725" width="43" height="51" xoffset="0" yoffset="11" xadvance="46" /><!-- & -->' + '<char id="39" x="738" y="415" width="10" height="16" xoffset="0" yoffset="12" xadvance="13" /><!-- -->' + '<char id="40" x="738" y="337" width="17" height="64" xoffset="0" yoffset="12" xadvance="20" /><!-- ( -->' + '<char id="41" x="737" y="258" width="17" height="65" xoffset="0" yoffset="11" xadvance="20" /><!-- ) -->' + '<char id="42" x="698" y="0" width="24" height="21" xoffset="0" yoffset="12" xadvance="27" /><!-- * -->' + '<char id="43" x="133" y="474" width="33" height="32" xoffset="0" yoffset="21" xadvance="36" /><!-- + -->' + '<char id="44" x="559" y="576" width="13" height="18" xoffset="0" yoffset="51" xadvance="16" /><!-- , -->' + '<char id="45" x="507" y="771" width="24" height="9" xoffset="0" yoffset="39" xadvance="27" /><!-- - -->' + '<char id="46" x="409" y="567" width="13" height="11" xoffset="0" yoffset="51" xadvance="16" /><!-- . -->' + '<char id="47" x="696" y="699" width="29" height="56" xoffset="0" yoffset="11" xadvance="32" /><!-- / -->' + '<char id="48" x="606" y="194" width="33" height="51" xoffset="0" yoffset="11" xadvance="36" /><!-- 0 -->' + '<char id="49" x="736" y="0" width="17" height="50" xoffset="0" yoffset="12" xadvance="20" /><!-- 1 -->' + '<char id="50" x="559" y="461" width="33" height="51" xoffset="0" yoffset="11" xadvance="36" /><!-- 2 -->' + '<char id="51" x="603" y="726" width="33" height="51" xoffset="0" yoffset="11" xadvance="36" /><!-- 3 -->' + '<char id="52" x="358" y="0" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- 4 -->' + '<char id="53" x="459" y="642" width="36" height="51" xoffset="0" yoffset="11" xadvance="39" /><!-- 5 -->' + '<char id="54" x="605" y="65" width="33" height="50" xoffset="0" yoffset="12" xadvance="36" /><!-- 6 -->' + '<char id="55" x="606" y="129" width="33" height="51" xoffset="0" yoffset="11" xadvance="36" /><!-- 7 -->' + '<char id="56" x="511" y="129" width="33" height="51" xoffset="0" yoffset="11" xadvance="36" /><!-- 8 -->' + '<char id="57" x="511" y="64" width="33" height="51" xoffset="0" yoffset="11" xadvance="36" /><!-- 9 -->' + '<char id="58" x="698" y="577" width="13" height="37" xoffset="0" yoffset="25" xadvance="16" /><!-- : -->' + '<char id="59" x="698" y="273" width="13" height="44" xoffset="0" yoffset="25" xadvance="16" /><!-- ; -->' + '<char id="60" x="559" y="526" width="33" height="36" xoffset="0" yoffset="21" xadvance="36" /><!-- < -->' + '<char id="61" x="558" y="661" width="31" height="24" xoffset="0" yoffset="27" xadvance="34" /><!-- = -->' + '<char id="62" x="559" y="360" width="33" height="36" xoffset="0" yoffset="21" xadvance="36" /><!-- > -->' + '<char id="63" x="603" y="661" width="33" height="51" xoffset="0" yoffset="11" xadvance="36" /><!-- ? -->' + '<char id="64" x="0" y="0" width="65" height="63" xoffset="0" yoffset="12" xadvance="68" /><!-- @ -->' + '<char id="65" x="250" y="278" width="42" height="50" xoffset="0" yoffset="12" xadvance="45" /><!-- A -->' + '<char id="66" x="606" y="259" width="33" height="50" xoffset="0" yoffset="12" xadvance="36" /><!-- B -->' + '<char id="67" x="137" y="205" width="44" height="50" xoffset="0" yoffset="12" xadvance="47" /><!-- C -->' + '<char id="68" x="250" y="406" width="40" height="50" xoffset="0" yoffset="12" xadvance="43" /><!-- D -->' + '<char id="69" x="356" y="385" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- E -->' + '<char id="70" x="306" y="256" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- F -->' + '<char id="71" x="132" y="711" width="44" height="50" xoffset="0" yoffset="12" xadvance="47" /><!-- G -->' + '<char id="72" x="409" y="503" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- H -->' + '<char id="73" x="768" y="666" width="10" height="50" xoffset="0" yoffset="12" xadvance="13" /><!-- I -->' + '<char id="74" x="606" y="374" width="33" height="50" xoffset="0" yoffset="12" xadvance="36" /><!-- J -->' + '<char id="75" x="507" y="707" width="35" height="50" xoffset="0" yoffset="12" xadvance="38" /><!-- K -->' + '<char id="76" x="510" y="354" width="35" height="50" xoffset="0" yoffset="12" xadvance="38" /><!-- L -->' + '<char id="77" x="71" y="333" width="52" height="50" xoffset="0" yoffset="12" xadvance="55" /><!-- M -->' + '<char id="78" x="194" y="397" width="42" height="50" xoffset="0" yoffset="12" xadvance="45" /><!-- N -->' + '<char id="79" x="70" y="408" width="52" height="50" xoffset="0" yoffset="12" xadvance="55" /><!-- O -->' + '<char id="80" x="650" y="717" width="32" height="50" xoffset="0" yoffset="12" xadvance="35" /><!-- P -->' + '<char id="81" x="75" y="77" width="52" height="50" xoffset="0" yoffset="12" xadvance="55" /><!-- Q -->' + '<char id="82" x="509" y="642" width="35" height="50" xoffset="0" yoffset="12" xadvance="38" /><!-- R -->' + '<char id="83" x="653" y="166" width="31" height="50" xoffset="0" yoffset="12" xadvance="34" /><!-- S -->' + '<char id="84" x="250" y="470" width="40" height="50" xoffset="0" yoffset="12" xadvance="43" /><!-- T -->' + '<char id="85" x="408" y="374" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- U -->' + '<char id="86" x="197" y="141" width="42" height="50" xoffset="0" yoffset="12" xadvance="45" /><!-- V -->' + '<char id="87" x="0" y="408" width="56" height="50" xoffset="0" yoffset="12" xadvance="59" /><!-- W -->' + '<char id="88" x="247" y="666" width="42" height="50" xoffset="0" yoffset="12" xadvance="45" /><!-- X -->' + '<char id="89" x="409" y="176" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- Y -->' + '<char id="90" x="247" y="602" width="42" height="50" xoffset="0" yoffset="12" xadvance="45" /><!-- Z -->' + '<char id="91" x="736" y="523" width="20" height="65" xoffset="0" yoffset="11" xadvance="23" /><!-- [ -->' + '<char id="92" x="696" y="630" width="29" height="55" xoffset="0" yoffset="12" xadvance="32" /><!-- -->' + '<char id="93" x="736" y="115" width="20" height="65" xoffset="0" yoffset="11" xadvance="23" /><!-- ] -->' + '<char id="94" x="193" y="602" width="29" height="22" xoffset="0" yoffset="12" xadvance="32" /><!-- ^ -->' + '<char id="95" x="79" y="51" width="38" height="9" xoffset="0" yoffset="57" xadvance="41" /><!-- _ -->' + '<char id="96" x="512" y="258" width="17" height="15" xoffset="0" yoffset="12" xadvance="20" /><!-- ` -->' + '<char id="97" x="307" y="116" width="38" height="37" xoffset="0" yoffset="25" xadvance="41" /><!-- a -->' + '<char id="98" x="355" y="598" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- b -->' + '<char id="99" x="559" y="410" width="33" height="37" xoffset="0" yoffset="25" xadvance="36" /><!-- c -->' + '<char id="100" x="355" y="662" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- d -->' + '<char id="101" x="355" y="726" width="38" height="37" xoffset="0" yoffset="25" xadvance="41" /><!-- e -->' + '<char id="102" x="697" y="332" width="26" height="51" xoffset="0" yoffset="11" xadvance="29" /><!-- f -->' + '<char id="103" x="358" y="245" width="38" height="51" xoffset="0" yoffset="25" xadvance="41" /><!-- g -->' + '<char id="104" x="462" y="0" width="36" height="50" xoffset="0" yoffset="12" xadvance="39" /><!-- h -->' + '<char id="105" x="766" y="730" width="11" height="47" xoffset="0" yoffset="15" xadvance="14" /><!-- i -->' + '<char id="106" x="736" y="448" width="22" height="61" xoffset="0" yoffset="15" xadvance="25" /><!-- j -->' + '<char id="107" x="559" y="167" width="33" height="50" xoffset="0" yoffset="12" xadvance="36" /><!-- k -->' + '<char id="108" x="739" y="666" width="15" height="50" xoffset="0" yoffset="12" xadvance="18" /><!-- l -->' + '<char id="109" x="66" y="602" width="52" height="37" xoffset="0" yoffset="25" xadvance="55" /><!-- m -->' + '<char id="110" x="407" y="735" width="36" height="37" xoffset="0" yoffset="25" xadvance="39" /><!-- n -->' + '<char id="111" x="358" y="64" width="38" height="37" xoffset="0" yoffset="25" xadvance="41" /><!-- o -->' + '<char id="112" x="407" y="670" width="38" height="51" xoffset="0" yoffset="25" xadvance="41" /><!-- p -->' + '<char id="113" x="408" y="438" width="38" height="51" xoffset="0" yoffset="25" xadvance="41" /><!-- q -->' + '<char id="114" x="653" y="332" width="30" height="37" xoffset="0" yoffset="25" xadvance="33" /><!-- r -->' + '<char id="115" x="559" y="0" width="32" height="37" xoffset="0" yoffset="25" xadvance="35" /><!-- s -->' + '<char id="116" x="698" y="513" width="24" height="50" xoffset="0" yoffset="12" xadvance="27" /><!-- t -->' + '<char id="117" x="462" y="239" width="36" height="37" xoffset="0" yoffset="25" xadvance="39" /><!-- u -->' + '<char id="118" x="461" y="64" width="36" height="37" xoffset="0" yoffset="25" xadvance="39" /><!-- v -->' + '<char id="119" x="79" y="0" width="47" height="37" xoffset="0" yoffset="25" xadvance="50" /><!-- w -->' + '<char id="120" x="558" y="51" width="33" height="37" xoffset="0" yoffset="25" xadvance="36" /><!-- x -->' + '<char id="121" x="556" y="706" width="33" height="51" xoffset="0" yoffset="25" xadvance="36" /><!-- y -->' + '<char id="122" x="512" y="0" width="33" height="37" xoffset="0" yoffset="25" xadvance="36" /><!-- z -->' + '<char id="123" x="698" y="194" width="24" height="65" xoffset="0" yoffset="11" xadvance="27" /><!-- { -->' + '<char id="124" x="768" y="259" width="10" height="64" xoffset="0" yoffset="12" xadvance="13" /><!-- | -->' + '<char id="125" x="698" y="115" width="24" height="65" xoffset="0" yoffset="11" xadvance="27" /><!-- } -->' + '<char id="126" x="459" y="707" width="29" height="13" xoffset="0" yoffset="31" xadvance="32" /><!-- ~ -->' + '<char id="199" x="136" y="397" width="44" height="63" xoffset="0" yoffset="12" xadvance="47" /><!-- Ç -->' + '<char id="213" x="66" y="653" width="52" height="63" xoffset="0" yoffset="-1" xadvance="55" /><!-- Õ -->' + '<char id="211" x="66" y="524" width="52" height="64" xoffset="0" yoffset="-2" xadvance="55" /><!-- Ó -->' + '<char id="231" x="511" y="546" width="34" height="50" xoffset="0" yoffset="25" xadvance="37" /><!-- ç -->' + '<char id="237" x="739" y="602" width="17" height="50" xoffset="0" yoffset="12" xadvance="20" /><!-- í -->' + '<char id="227" x="410" y="240" width="38" height="49" xoffset="0" yoffset="13" xadvance="41" /><!-- ã -->' + '<char id="243" x="358" y="310" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- ó -->' + '<char id="234" x="410" y="0" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- ê -->' + '<char id="233" x="410" y="303" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- é -->' + '<char id="228" x="303" y="731" width="38" height="47" xoffset="0" yoffset="15" xadvance="41" /><!-- ä -->' + '<char id="223" x="559" y="231" width="33" height="51" xoffset="0" yoffset="11" xadvance="36" /><!-- ß -->' + '<char id="246" x="409" y="115" width="38" height="47" xoffset="0" yoffset="15" xadvance="41" /><!-- ö -->' + '<char id="252" x="461" y="178" width="36" height="47" xoffset="0" yoffset="15" xadvance="39" /><!-- ü -->' + '<char id="241" x="461" y="115" width="36" height="49" xoffset="0" yoffset="13" xadvance="39" /><!-- ñ -->' + '<char id="161" x="768" y="194" width="12" height="51" xoffset="0" yoffset="17" xadvance="15" /><!-- ¡ -->' + '<char id="191" x="605" y="0" width="33" height="51" xoffset="0" yoffset="16" xadvance="36" /><!-- ¿ -->' + '<char id="200" x="407" y="592" width="38" height="64" xoffset="0" yoffset="-2" xadvance="41" /><!-- È -->' + '<char id="195" x="141" y="64" width="43" height="63" xoffset="0" yoffset="-1" xadvance="46" /><!-- Ã -->' + '<char id="350" x="650" y="640" width="32" height="63" xoffset="0" yoffset="12" xadvance="35" /><!-- Ş -->' + '<char id="220" x="459" y="567" width="38" height="61" xoffset="0" yoffset="1" xadvance="41" /><!-- Ü -->' + '<char id="351" x="652" y="502" width="32" height="50" xoffset="0" yoffset="25" xadvance="35" /><!-- ş -->' + '<char id="287" x="357" y="167" width="38" height="64" xoffset="0" yoffset="12" xadvance="41" /><!-- ğ -->' + '<char id="280" x="357" y="514" width="38" height="64" xoffset="0" yoffset="12" xadvance="41" /><!-- Ę -->' + '<char id="281" x="356" y="449" width="38" height="51" xoffset="0" yoffset="25" xadvance="41" /><!-- ę -->' + '<char id="261" x="193" y="474" width="43" height="50" xoffset="0" yoffset="25" xadvance="46" /><!-- ą -->' + '<char id="321" x="249" y="538" width="42" height="50" xoffset="0" yoffset="12" xadvance="45" /><!-- Ł -->' + '<char id="322" x="698" y="448" width="24" height="51" xoffset="0" yoffset="11" xadvance="27" /><!-- ł -->' + '<char id="324" x="460" y="367" width="36" height="50" xoffset="0" yoffset="12" xadvance="39" /><!-- ń -->' + '<char id="323" x="190" y="647" width="43" height="64" xoffset="0" yoffset="-2" xadvance="46" /><!-- Ń -->' + '<char id="347" x="652" y="566" width="32" height="50" xoffset="0" yoffset="12" xadvance="35" /><!-- ś -->' + '<char id="1072" x="306" y="65" width="38" height="37" xoffset="0" yoffset="25" xadvance="41" /><!-- а -->' + '<char id="1073" x="306" y="320" width="38" height="51" xoffset="0" yoffset="11" xadvance="41" /><!-- б -->' + '<char id="1074" x="653" y="115" width="31" height="37" xoffset="0" yoffset="25" xadvance="34" /><!-- в -->' + '<char id="1075" x="698" y="397" width="26" height="37" xoffset="0" yoffset="25" xadvance="29" /><!-- г -->' + '<char id="1076" x="306" y="0" width="38" height="51" xoffset="0" yoffset="25" xadvance="41" /><!-- д -->' + '<char id="1077" x="254" y="65" width="38" height="37" xoffset="0" yoffset="25" xadvance="41" /><!-- е -->' + '<char id="1078" x="66" y="730" width="52" height="37" xoffset="0" yoffset="25" xadvance="55" /><!-- ж -->' + '<char id="1079" x="697" y="64" width="28" height="37" xoffset="0" yoffset="25" xadvance="31" /><!-- з -->' + '<char id="1080" x="460" y="431" width="36" height="37" xoffset="0" yoffset="25" xadvance="39" /><!-- и -->' + '<char id="1082" x="653" y="230" width="31" height="37" xoffset="0" yoffset="25" xadvance="34" /><!-- к -->' + '<char id="1083" x="359" y="115" width="36" height="38" xoffset="0" yoffset="25" xadvance="39" /><!-- л -->' + '<char id="1084" x="75" y="141" width="47" height="38" xoffset="0" yoffset="25" xadvance="50" /><!-- м -->' + '<char id="1085" x="606" y="513" width="32" height="37" xoffset="0" yoffset="25" xadvance="35" /><!-- н -->' + '<char id="1086" x="195" y="278" width="38" height="37" xoffset="0" yoffset="25" xadvance="41" /><!-- о -->' + '<char id="1087" x="457" y="735" width="36" height="37" xoffset="0" yoffset="25" xadvance="39" /><!-- п -->' + '<char id="1088" x="254" y="0" width="38" height="51" xoffset="0" yoffset="25" xadvance="41" /><!-- р -->' + '<char id="1089" x="511" y="290" width="34" height="37" xoffset="0" yoffset="25" xadvance="37" /><!-- с -->' + '<char id="1090" x="67" y="472" width="52" height="37" xoffset="0" yoffset="25" xadvance="55" /><!-- т -->' + '<char id="1091" x="558" y="102" width="33" height="51" xoffset="0" yoffset="25" xadvance="36" /><!-- у -->' + '<char id="1092" x="0" y="205" width="57" height="64" xoffset="0" yoffset="12" xadvance="60" /><!-- ф -->' + '<char id="1093" x="558" y="610" width="33" height="37" xoffset="0" yoffset="25" xadvance="36" /><!-- х -->' + '<char id="1094" x="251" y="205" width="40" height="46" xoffset="0" yoffset="25" xadvance="43" /><!-- ц -->' + '<char id="1095" x="653" y="281" width="31" height="37" xoffset="0" yoffset="25" xadvance="34" /><!-- ч -->' + '<char id="1096" x="0" y="472" width="53" height="38" xoffset="0" yoffset="25" xadvance="56" /><!-- ш -->' + '<char id="1097" x="0" y="283" width="57" height="46" xoffset="0" yoffset="25" xadvance="60" /><!-- щ -->' + '<char id="1100" x="653" y="383" width="30" height="37" xoffset="0" yoffset="25" xadvance="33" /><!-- ь -->' + '<char id="1099" x="410" y="64" width="37" height="37" xoffset="0" yoffset="25" xadvance="40" /><!-- ы -->' + '<char id="1101" x="606" y="323" width="33" height="37" xoffset="0" yoffset="25" xadvance="36" /><!-- э -->' + '<char id="1102" x="132" y="596" width="47" height="37" xoffset="0" yoffset="25" xadvance="50" /><!-- ю -->' + '<char id="1103" x="652" y="64" width="31" height="37" xoffset="0" yoffset="25" xadvance="34" /><!-- я -->' + '<char id="1052" x="0" y="343" width="57" height="51" xoffset="0" yoffset="11" xadvance="60" /><!-- М -->' + '<char id="1040" x="140" y="0" width="43" height="50" xoffset="0" yoffset="12" xadvance="46" /><!-- А -->' + '<char id="1043" x="510" y="418" width="35" height="50" xoffset="0" yoffset="12" xadvance="38" /><!-- Г -->' + '<char id="1047" x="652" y="0" width="32" height="50" xoffset="0" yoffset="12" xadvance="35" /><!-- З -->' + '<char id="1048" x="193" y="538" width="42" height="50" xoffset="0" yoffset="12" xadvance="45" /><!-- И -->' + '<char id="1053" x="304" y="406" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- Н -->' + '<char id="1051" x="194" y="333" width="42" height="50" xoffset="0" yoffset="12" xadvance="45" /><!-- Л -->' + '<char id="1062" x="195" y="205" width="42" height="59" xoffset="0" yoffset="12" xadvance="45" /><!-- Ц -->' + '<char id="1059" x="198" y="64" width="42" height="50" xoffset="0" yoffset="12" xadvance="45" /><!-- У -->' + '<char id="1050" x="461" y="482" width="36" height="50" xoffset="0" yoffset="12" xadvance="39" /><!-- К -->' + '<char id="1041" x="605" y="576" width="33" height="50" xoffset="0" yoffset="12" xadvance="36" /><!-- Б -->' + '<char id="1061" x="137" y="333" width="43" height="50" xoffset="0" yoffset="12" xadvance="46" /><!-- Х -->' + '<char id="1063" x="305" y="534" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- Ч -->' + '<char id="1044" x="132" y="523" width="47" height="59" xoffset="0" yoffset="12" xadvance="50" /><!-- Д -->' + '<char id="1042" x="512" y="194" width="33" height="50" xoffset="0" yoffset="12" xadvance="36" /><!-- В -->' + '<char id="1055" x="304" y="470" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- П -->' + '<char id="1057" x="137" y="269" width="44" height="50" xoffset="0" yoffset="12" xadvance="47" /><!-- С -->' + '<char id="1056" x="652" y="438" width="32" height="50" xoffset="0" yoffset="12" xadvance="35" /><!-- Р -->' + '<char id="1058" x="253" y="128" width="40" height="50" xoffset="0" yoffset="12" xadvance="43" /><!-- Т -->' + '<char id="1054" x="71" y="269" width="52" height="50" xoffset="0" yoffset="12" xadvance="55" /><!-- О -->' + '<char id="304" x="767" y="0" width="13" height="61" xoffset="0" yoffset="1" xadvance="16" /><!-- İ -->' + '<char id="1068" x="559" y="296" width="33" height="50" xoffset="0" yoffset="12" xadvance="36" /><!-- Ь -->' + '<char id="1046" x="0" y="141" width="61" height="50" xoffset="0" yoffset="12" xadvance="64" /><!-- Ж -->' + '<char id="1045" x="305" y="192" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- Е -->' + '<char id="224" x="303" y="667" width="38" height="50" xoffset="0" yoffset="12" xadvance="41" /><!-- à -->' + '<char id="236" x="736" y="194" width="17" height="50" xoffset="0" yoffset="12" xadvance="20" /><!-- ì -->' + '<char id="1060" x="0" y="725" width="52" height="50" xoffset="0" yoffset="12" xadvance="55" /><!-- Ф -->' + '<char id="1064" x="136" y="141" width="47" height="50" xoffset="0" yoffset="12" xadvance="50" /><!-- Ш -->' + '<char id="1065" x="0" y="652" width="52" height="59" xoffset="0" yoffset="12" xadvance="55" /><!-- Щ -->' + '<char id="1066" x="250" y="342" width="42" height="50" xoffset="0" yoffset="12" xadvance="45" /><!-- Ъ -->' + '<char id="1067" x="197" y="0" width="42" height="50" xoffset="0" yoffset="12" xadvance="45" /><!-- Ы -->' + '<char id="1069" x="132" y="647" width="44" height="50" xoffset="0" yoffset="12" xadvance="47" /><!-- Э -->' + '<char id="1070" x="0" y="77" width="61" height="50" xoffset="0" yoffset="12" xadvance="64" /><!-- Ю -->' + '<char id="1071" x="462" y="290" width="35" height="50" xoffset="0" yoffset="12" xadvance="38" /><!-- Я -->' + '<char id="305" x="739" y="64" width="10" height="37" xoffset="0" yoffset="25" xadvance="13" /><!-- ı -->' + '<char id="263" x="511" y="482" width="34" height="50" xoffset="0" yoffset="12" xadvance="37" /><!-- ć -->' + '<char id="32" x="0" y="0" width="0" height="0" xoffset="0" yoffset="0" xadvance="20" /><!--   -->' + '<char id="9" x="0" y="0" width="0" height="0" xoffset="0" yoffset="0" xadvance="160" /><!--   -->' + '</chars>' + '<kernings count="0">' + '</kernings>' + '</font>';
AG.BitmapFontLoader = function() {
    var xmlDoc;
    if (window.DOMParser) {
        var parser = new DOMParser();
        xmlDoc = parser.parseFromString(AG.FontString, "text/xml");
    } else {
        xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
        xmlDoc.async = false;
        xmlDoc.loadXML(AG.FontString);
    }
    var responseXML = xmlDoc;
    if (!responseXML || /MSIE 9/i.test(navigator.userAgent) || navigator.isCocoonJS) {
        if (typeof(window.DOMParser) === 'function') {
            var domparser = new DOMParser();
            responseXML = domparser.parseFromString(this.ajaxRequest.responseText, 'text/xml');
        } else {
            var div = document.createElement('div');
            div.innerHTML = this.ajaxRequest.responseText;
            responseXML = div;
        }
    }
    var textureUrl = this.baseUrl + responseXML.getElementsByTagName('page')[0].getAttribute('file');
    this.texture = GodStep.textures['Font1'].baseTexture;
    var data = {};
    var info = responseXML.getElementsByTagName('info')[0];
    var common = responseXML.getElementsByTagName('common')[0];
    data.font = info.getAttribute('face');
    data.size = parseInt(info.getAttribute('size'), 10);
    data.lineHeight = parseInt(common.getAttribute('lineHeight'), 10);
    data.chars = {};
    var letters = responseXML.getElementsByTagName('char');
    for (var i = 0; i < letters.length; i++) {
        var charCode = parseInt(letters[i].getAttribute('id'), 10);
        var textureRect = new PIXI.Rectangle(parseInt(letters[i].getAttribute('x'), 10), parseInt(letters[i].getAttribute('y'), 10), parseInt(letters[i].getAttribute('width'), 10), parseInt(letters[i].getAttribute('height'), 10));
        data.chars[charCode] = {
            xOffset: parseInt(letters[i].getAttribute('xoffset'), 10),
            yOffset: parseInt(letters[i].getAttribute('yoffset'), 10) + 25,
            xAdvance: parseInt(letters[i].getAttribute('xadvance'), 10),
            kerning: {},
            texture: PIXI.TextureCache[charCode] = new PIXI.Texture(this.texture, textureRect)
        };
    }
    var kernings = responseXML.getElementsByTagName('kerning');
    for (i = 0; i < kernings.length; i++) {
        var first = parseInt(kernings[i].getAttribute('first'), 10);
        var second = parseInt(kernings[i].getAttribute('second'), 10);
        var amount = parseInt(kernings[i].getAttribute('amount'), 10);
        data.chars[second].kerning[first] = amount;
    }
    PIXI.BitmapText.fonts[data.font] = data;
};
extend(AG.BitmapFontLoader, PIXI.BitmapFontLoader);

function startAmazingGrabber(lang) {
    if (!AG.AmazingGrabber.instance) {
        var game = new AG.AmazingGrabber(lang);
        game.div.style.margin = '0 auto';
        game.div.style['vertical-align'] = 'middle';
        window.onresize = h_resize;
    }
}