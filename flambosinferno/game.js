var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var GameEngine = (function (_super) {
            __extends(GameEngine, _super);
            function GameEngine() {
                var _this = _super.call(this, Config.GW, Config.GH, Phaser.CANVAS, Config.DOM_PARENT_ID, null) || this;
                _this.state.add(States.BOOT, Client.gsBoot, false);
                _this.state.add(States.PRELOADER, Client.gsPreloader, false);
                _this.state.add(States.MAINMENU, Client.gsMainMenu, false);
                _this.state.add(States.GAME, Client.gsGame, false);
                _this.state.add(States.LEVELSELECT, Client.gsLevelSelect, false);
                _this.state.add(States.CREDITS, Client.gsCredits, false);
                _this.state.add(States.HELP, Client.gsHelp, false);
                _this.state.add(States.STORY, Client.gsStory, false);
                _this.state.add(States.SHOP, Client.gsShop, false);
                _this.state.add(States.CDIALOG, Client.gsCDialog, false);
                _this.state.start(States.BOOT);
                return _this;
            }
            return GameEngine;
        }(Phaser.Game));
        Client.GameEngine = GameEngine;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
window.onload = function () {
    new PhaserGame.Client.GameEngine();
};
var Config;
(function (Config) {
    Config.DOM_PARENT_ID = 'game';
    Config.GW = 660;
    Config.GH = 540;
    Config.GSW = 660;
    Config.GSH = 540;
    Config.FPS = 12;
})(Config || (Config = {}));
var DB;
(function (DB) {
    DB.ITEMS = [
        { name: 'r', fr: 'red-item', sel: 'red-item-sel', sector: 'red-sector' },
        { name: 'g', fr: 'green-item', sel: 'green-item-sel', sector: 'green-sector' },
        { name: 'b', fr: 'blue-item', sel: 'blue-item-sel', sector: 'blue-sector' }
    ];
})(DB || (DB = {}));
var GlobalVar;
(function (GlobalVar) {
    GlobalVar.selectLevel = 0;
    GlobalVar.replayCountLevel = 0;
    GlobalVar.oldLevel = 0;
    GlobalVar.pers0X = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8.1, 8.1, 13.15, 19, 25.15, 25.6, 29.8, 29.8, 29.8, 12.9, 13.7, 19.7, 18.7, 25.2, 24.8, 24, -1.35, -0.25, 1.5, 3.5, 5.3, 6.55, 7.15, 7.1, 6.9, 7, 7.6, 8.95, 10.85, 12.75, 14.5, 15.5, 15.85, 15.75, 15.55, 15.8, 16.7, 18.2, 20.1, 22.05, 23.55, 24.3, 24.5, 24.3, 24.25, 24.65, 25.7, 27.15, 29.05, 30.75, 32, 32.5, 32.6, 32.3, 32.15, 32.5, 32.3, 33.05, 31.55, 28.2, 26.1, 28.55, 31.5, 34.4, 36.45, 38.7, 41.65, 41.65, 41.65, 41.65, 41.65, 41.65, 41.65, 6, 6];
    GlobalVar.pers0Y = [-18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -23.9, -23.9, -22.8, -18.35, -17.7, -3.9, 0.35, 0.35, 0.35, -6.75, -13.65, -16.65, -21.15, -28.75, -21.1, -13.3, -15.2, -17.05, -18.6, -19.45, -19.6, -19.35, -19.05, -19.3, -20.15, -21.7, -23.5, -25.3, -26.6, -27.2, -27.25, -26.95, -26.8, -27.2, -28.3, -29.9, -31.8, -33.45, -34.6, -34.95, -34.85, -34.5, -34.45, -35.1, -36.45, -38.2, -39.5, -40.45, -40.8, -40.45, -39.75, -38.95, -38.4, -38.55, -39.3, -40.5, -31.95, -20.95, -8.4, 2.2, 10.65, 4.1, -1.95, -7.3, -0.35, 7.55, 16.05, 16.05, 16.05, 16.05, 16.05, 16.05, 16.05, -18, -40];
    GlobalVar.pers0A = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24.22613525390625, -24.22613525390625, -14.961395263671875, -8.503067016601563, -4.2028961181640625, 20.738250732421875, 35.73779296875, 35.73779296875, 35.73779296875, 0, -14.998931884765625, -14.998931884765625, -14.998931884765625, 0, 9.188491821289063, 16.375625610351563, 0, 37.12913513183594, 74.48355102539063, 111.58296203613281, 148.93899536132813, -173.94735717773438, -136.61244201660156, -99.27024841308594, -62.1632080078125, -24.801513671875, 12.301544189453125, 49.64552307128906, 86.97262573242188, 124.09210205078125, 161.4505157470703, -161.4505157470703, -124.09210205078125, -86.97262573242188, -49.64552307128906, -12.301544189453125, 24.801513671875, 62.1632080078125, 99.27024841308594, 136.61244201660156, 173.94735717773438, -148.93899536132813, -111.58296203613281, -74.48355102539063, -37.12913513183594, 0, 36.06590270996094, 71.98176574707031, 108.01823425292969, 143.93409729003906, 180, -143.93409729003906, -108.01823425292969, -71.98176574707031, -36.06590270996094, 0, 76.71328735351563, 153.4083709716797, -130.09556579589844, -53.414886474609375, 23.214202880859375, 59.15696716308594, 94.79808044433594, 130.79481506347656, 87.23684692382813, 43.613433837890625, 0, 0, 0, 0, 0, 0, 0, 0, 0];
})(GlobalVar || (GlobalVar = {}));
var LevelData;
(function (LevelData) {
    LevelData.LEVEL1DATA = '{"layer_0_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_0": [0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_1": [0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_2": [0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_3": [0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0], "layer_1_4": [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0], "layer_1_5": [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0], "layer_1_6": [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0], "layer_1_7": [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0], "layer_1_8": [0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0], "layer_1_9": [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0], "layer_1_10": [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0], "layer_1_11": [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0], "layer_1_12": [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0], "layer_1_13": [0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0], "layer_1_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0], "layer_1_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0], "layer_1_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0], "layer_1_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0], "layer_1_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0], "layer_1_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0], "layer_1_20": [0,0,0,0,0,0,0,0,0,0,0,0,4,1,1,0,0], "layer_1_21": [0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0], "layer_2_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_21": [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,34], "layer_3_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_1": [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_6": [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_9": [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_11": [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0], "layer_6_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_15": [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0], "layer_6_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_17": [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0], "layer_6_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}';
    LevelData.LEVEL2DATA = '{"layer_0_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0], "layer_1_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0], "layer_1_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0], "layer_1_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_4": [0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0], "layer_1_5": [0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0], "layer_1_6": [0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0], "layer_1_7": [0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0], "layer_1_8": [0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0], "layer_1_9": [0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0], "layer_1_10": [0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0], "layer_1_11": [0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0], "layer_1_12": [0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0], "layer_1_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_14": [0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0], "layer_1_15": [0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0], "layer_1_16": [0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0], "layer_1_17": [0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0], "layer_1_18": [0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0], "layer_1_19": [0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0], "layer_1_20": [0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0], "layer_1_21": [0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0], "layer_2_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_21": [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,34], "layer_3_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_0": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0], "layer_5_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_4": [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0], "layer_6_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_7": [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_10": [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_16": [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_18": [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}';
    LevelData.LEVEL3DATA = '{"layer_0_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0], "layer_1_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0], "layer_1_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0], "layer_1_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0], "layer_1_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0], "layer_1_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0], "layer_1_7": [0,0,0,0,0,0,0,0,0,0,0,8,0,0,4,0,0], "layer_1_8": [0,0,0,0,0,0,0,0,0,0,0,8,0,0,4,0,0], "layer_1_9": [0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0], "layer_1_10": [7,7,7,7,7,7,7,7,7,7,0,4,0,0,4,0,0], "layer_1_11": [0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0], "layer_1_12": [0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0], "layer_1_13": [0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0], "layer_1_14": [0,0,0,0,0,0,0,0,8,4,4,4,0,0,4,0,0], "layer_1_15": [0,0,0,0,0,0,0,0,8,0,0,0,0,0,4,0,0], "layer_1_16": [0,0,0,0,0,0,0,0,8,0,0,0,0,0,4,0,0], "layer_1_17": [0,0,0,0,0,0,0,0,8,0,0,0,0,0,4,0,0], "layer_1_18": [0,0,0,0,0,0,0,0,8,0,0,0,0,0,7,0,0], "layer_1_19": [0,0,0,0,0,0,0,0,8,0,0,0,0,0,7,0,0], "layer_1_20": [0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0], "layer_1_21": [0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0], "layer_2_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_10": [0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,34], "layer_2_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,34], "layer_2_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_21": [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,34], "layer_3_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_0": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0], "layer_5_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_2": [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0], "layer_6_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_5": [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0], "layer_6_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_8": [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0], "layer_6_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_12": [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0], "layer_6_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_16": [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0], "layer_6_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}';
    LevelData.LEVEL4DATA = '{"layer_0_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_0": [0,0,0,0,7,0,0,0,0,14,0,0,0,0,0,0,0], "layer_1_1": [0,0,0,0,7,0,0,0,0,14,0,0,0,0,0,0,0], "layer_1_2": [0,0,0,0,7,0,0,0,0,13,0,0,0,0,0,0,0], "layer_1_3": [0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0], "layer_1_4": [0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0], "layer_1_5": [0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0], "layer_1_6": [0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0], "layer_1_7": [0,0,0,0,7,0,0,0,0,13,0,0,0,0,0,0,0], "layer_1_8": [0,0,0,0,7,0,0,0,0,13,0,0,0,0,0,0,0], "layer_1_9": [0,0,0,0,7,0,0,0,0,13,0,0,0,0,0,0,0], "layer_1_10": [0,0,0,0,0,0,0,0,0,13,0,0,0,0,8,0,0], "layer_1_11": [0,0,0,0,0,0,0,0,0,13,0,0,0,0,8,0,0], "layer_1_12": [0,0,0,0,0,0,0,0,0,13,0,0,0,0,8,0,0], "layer_1_13": [0,0,0,0,4,0,0,0,0,13,0,0,0,0,0,0,0], "layer_1_14": [0,0,0,0,4,0,0,0,0,13,0,0,0,0,0,0,0], "layer_1_15": [0,0,0,0,4,0,0,0,0,13,0,0,0,0,0,0,0], "layer_1_16": [0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0], "layer_1_17": [0,0,0,0,0,0,0,0,0,13,0,0,0,13,0,0,0], "layer_1_18": [0,0,0,0,0,0,0,0,0,13,0,0,0,13,0,0,0], "layer_1_19": [0,0,0,0,0,0,7,7,7,7,7,7,0,13,0,0,0], "layer_1_20": [0,0,0,0,0,0,7,0,0,0,0,0,0,4,0,0,0], "layer_1_21": [0,0,0,0,0,0,7,0,0,0,0,0,0,4,0,0,0], "layer_2_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_19": [0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,34], "layer_2_20": [0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,34], "layer_2_21": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,34], "layer_3_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_0": [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_8": [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_10": [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0], "layer_6_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_12": [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0], "layer_6_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_14": [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_20": [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}';
    LevelData.LEVEL5DATA = '{"layer_0_0": [0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_0": [0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,7,0], "layer_1_1": [0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,7,0], "layer_1_2": [0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,10,0], "layer_1_3": [0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0], "layer_1_4": [0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0], "layer_1_5": [0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0], "layer_1_6": [0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0], "layer_1_7": [0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0], "layer_1_8": [0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0], "layer_1_9": [0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0], "layer_1_10": [0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0], "layer_1_11": [0,0,0,8,8,8,0,0,0,0,0,0,0,7,0,0,0], "layer_1_12": [0,0,0,8,0,0,0,0,0,0,0,0,0,7,0,0,0], "layer_1_13": [0,0,0,8,0,0,0,0,0,0,0,0,0,7,0,0,0], "layer_1_14": [0,0,0,8,0,0,0,0,0,0,10,0,0,0,0,0,0], "layer_1_15": [0,0,0,8,0,0,0,0,0,0,10,0,0,0,0,0,0], "layer_1_16": [0,0,0,8,0,0,0,0,0,0,10,0,0,0,0,0,0], "layer_1_17": [0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0], "layer_1_18": [0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0], "layer_1_19": [0,0,0,0,0,0,0,7,7,7,4,0,0,0,0,0,0], "layer_1_20": [0,0,0,0,0,4,4,7,4,7,4,0,0,0,0,0,0], "layer_1_21": [0,0,0,0,0,4,4,7,4,7,4,0,0,0,0,0,0], "layer_2_0": [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_6": [0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,34], "layer_2_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_10": [0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,34], "layer_2_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_16": [0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,34], "layer_2_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_3_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0], "layer_5_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_1": [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0], "layer_6_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_6": [0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0], "layer_6_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_10": [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0], "layer_6_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_14": [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0], "layer_6_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}';
    LevelData.LEVEL6DATA = '{"layer_0_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_0": [0,0,0,0,0,7,0,0,0,0,0,0,0,0,1,0,0], "layer_1_1": [0,0,0,0,0,7,0,0,0,0,0,0,0,0,1,0,0], "layer_1_2": [0,0,0,0,0,7,0,0,0,0,0,0,0,0,1,0,0], "layer_1_3": [0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0], "layer_1_4": [0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0], "layer_1_5": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0], "layer_1_6": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0], "layer_1_7": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0], "layer_1_8": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0], "layer_1_9": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0], "layer_1_10": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0], "layer_1_11": [4,4,7,7,4,0,0,0,0,0,0,0,4,0,0,0,0], "layer_1_12": [0,0,0,1,0,0,0,0,0,0,0,0,4,0,0,0,0], "layer_1_13": [0,0,0,1,0,0,0,0,0,0,0,0,4,0,0,0,0], "layer_1_14": [0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0], "layer_1_15": [4,4,7,7,4,0,0,0,0,0,0,0,1,0,0,0,0], "layer_1_16": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0], "layer_1_17": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0], "layer_1_18": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0], "layer_1_19": [4,4,4,4,4,4,4,4,4,4,4,0,4,0,0,0,0], "layer_1_20": [0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0], "layer_1_21": [0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0], "layer_2_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_12": [0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,34], "layer_2_13": [0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_19": [0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,34], "layer_2_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_21": [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,34], "layer_3_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_0": [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_1": [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0], "layer_6_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_4": [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0], "layer_6_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_7": [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0], "layer_6_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_10": [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0], "layer_6_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_14": [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0], "layer_6_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}';
    LevelData.LEVEL7DATA = '{"layer_0_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_0": [0,0,0,0,0,0,0,0,7,0,1,1,1,1,1,0,0], "layer_1_1": [0,0,0,0,0,0,0,0,7,0,1,0,1,0,0,0,0], "layer_1_2": [0,0,0,0,0,0,0,0,7,0,1,0,0,0,0,0,0], "layer_1_3": [0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0], "layer_1_4": [0,0,0,0,0,0,0,0,7,0,1,1,1,1,1,0,0], "layer_1_5": [0,0,0,0,0,0,0,0,9,0,0,0,0,0,1,0,0], "layer_1_6": [0,0,7,0,0,0,0,0,9,0,0,0,0,0,0,0,0], "layer_1_7": [0,0,4,0,0,0,0,0,7,0,0,1,1,1,1,0,0], "layer_1_8": [4,4,4,4,4,4,4,0,7,0,1,0,1,0,0,0,0], "layer_1_9": [0,0,0,0,0,0,0,0,7,0,0,1,1,1,1,0,0], "layer_1_10": [0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0], "layer_1_11": [0,0,0,0,0,0,0,0,7,0,1,1,1,1,1,0,0], "layer_1_12": [0,0,0,0,0,0,0,0,7,0,0,1,1,0,0,0,0], "layer_1_13": [0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0], "layer_1_14": [0,0,7,0,0,0,0,0,1,0,0,0,0,0,0,0,0], "layer_1_15": [0,0,4,0,0,0,0,0,7,0,1,1,1,1,1,0,0], "layer_1_16": [4,4,4,4,4,4,4,0,7,0,1,0,1,0,1,0,0], "layer_1_17": [0,0,0,0,0,0,0,0,7,0,0,1,0,1,1,0,0], "layer_1_18": [0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0], "layer_1_19": [0,0,0,0,0,0,0,0,7,0,1,1,1,1,1,0,0], "layer_1_20": [0,0,0,0,0,0,0,0,7,0,1,0,0,0,1,0,0], "layer_1_21": [0,0,0,0,0,0,0,0,7,0,1,1,1,1,1,0,0], "layer_2_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_3": [0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,34], "layer_2_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_7": [0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_8": [0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,34], "layer_2_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_11": [0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,34], "layer_2_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_15": [0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_16": [0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,34], "layer_2_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_21": [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,34], "layer_3_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_0": [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0], "layer_5_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_3": [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_6": [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0], "layer_6_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_11": [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_14": [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0], "layer_6_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_19": [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}';
    LevelData.LEVEL8DATA = '{"layer_0_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0], "layer_1_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0], "layer_1_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0], "layer_1_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0], "layer_1_4": [0,0,0,0,0,0,10,10,10,10,10,10,10,7,0,0,0], "layer_1_5": [0,0,0,0,0,0,10,0,0,0,0,0,0,0,14,0,0], "layer_1_6": [0,0,0,7,7,7,7,7,7,7,7,7,7,0,14,0,0], "layer_1_7": [0,0,0,0,0,0,0,0,0,0,10,0,0,0,14,0,0], "layer_1_8": [0,0,0,0,0,0,0,0,0,0,10,0,0,0,14,0,0], "layer_1_9": [0,0,0,0,0,0,0,14,0,0,0,0,0,0,14,0,0], "layer_1_10": [0,0,0,0,0,0,0,14,0,0,0,0,0,14,14,0,0], "layer_1_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,0,0], "layer_1_12": [0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,0,0], "layer_1_13": [0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0], "layer_1_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_16": [0,14,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0], "layer_1_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_19": [0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0], "layer_1_20": [7,7,7,7,7,0,7,0,0,0,0,0,0,0,0,0,0], "layer_1_21": [0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0], "layer_2_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_5": [0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,34], "layer_2_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,34], "layer_2_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_16": [14,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,34], "layer_2_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_20": [0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,34], "layer_2_21": [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,34], "layer_3_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_0": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0], "layer_5_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_2": [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0], "layer_6_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_8": [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0], "layer_6_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_10": [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0], "layer_6_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_13": [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_18": [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0], "layer_6_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}';
    LevelData.LEVEL9DATA = '{"layer_0_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_0": [0,0,0,0,0,4,0,0,7,0,0,0,0,7,0,0,0], "layer_1_1": [0,0,0,0,0,4,0,0,7,0,0,0,0,7,0,0,0], "layer_1_2": [0,0,0,0,0,4,0,0,7,0,0,0,0,10,0,0,0], "layer_1_3": [4,4,4,4,0,4,0,0,7,0,0,0,0,10,0,0,0], "layer_1_4": [0,0,0,0,0,4,0,0,7,0,0,0,0,0,0,0,0], "layer_1_5": [0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0], "layer_1_6": [0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0], "layer_1_7": [0,0,0,0,0,4,4,0,4,4,0,0,0,0,8,0,0], "layer_1_8": [0,0,0,0,0,1,0,0,4,8,0,0,0,0,8,0,0], "layer_1_9": [0,0,0,0,0,1,0,0,0,14,0,0,0,0,8,0,0], "layer_1_10": [0,0,0,0,0,1,0,0,0,0,0,0,0,8,8,0,0], "layer_1_11": [0,0,0,0,0,1,0,0,0,0,0,0,8,8,8,0,0], "layer_1_12": [0,0,0,0,0,1,0,0,0,0,0,0,8,8,8,0,0], "layer_1_13": [0,0,0,0,0,1,0,0,0,0,0,0,0,8,8,0,0], "layer_1_14": [0,0,0,0,0,1,0,0,0,0,0,0,0,0,8,0,0], "layer_1_15": [0,0,0,0,0,1,0,0,0,0,0,0,0,0,8,0,0], "layer_1_16": [0,0,0,0,0,1,0,0,0,0,0,14,0,0,8,0,0], "layer_1_17": [0,0,0,0,0,1,0,0,0,0,0,14,0,0,0,0,0], "layer_1_18": [0,0,0,0,0,1,0,0,0,0,0,14,0,0,0,0,0], "layer_1_19": [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0], "layer_1_20": [0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0], "layer_1_21": [0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0], "layer_2_0": [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_3": [0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_7": [0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,34], "layer_2_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_11": [0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_17": [0,0,16,0,0,0,0,0,0,0,14,0,0,0,0,0,34], "layer_2_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_21": [0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,34], "layer_3_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_0": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0], "layer_5_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_1": [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0], "layer_6_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_7": [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0], "layer_6_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_13": [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_14": [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0], "layer_6_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_19": [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}';
    LevelData.LEVEL10DATA = '{"layer_0_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_0_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_1_0": [0,0,0,0,7,0,0,0,7,7,7,7,0,0,7,0,0], "layer_1_1": [0,0,0,0,7,0,0,0,0,0,7,7,0,0,7,0,0], "layer_1_2": [0,0,0,0,7,0,0,0,0,0,0,7,0,0,7,0,0], "layer_1_3": [0,0,0,0,7,0,0,0,7,0,0,7,0,0,7,0,0], "layer_1_4": [0,0,0,0,7,0,0,0,7,7,0,7,0,0,7,0,0], "layer_1_5": [0,0,0,0,7,0,0,7,7,0,0,7,0,0,13,0,0], "layer_1_6": [7,7,7,0,7,0,0,7,0,0,0,0,0,0,13,0,0], "layer_1_7": [0,0,0,0,7,0,0,13,0,0,0,0,0,0,13,0,0], "layer_1_8": [0,0,0,0,0,0,0,13,0,0,0,0,0,0,13,0,0], "layer_1_9": [0,0,0,0,0,0,0,13,0,0,0,0,0,0,13,0,0], "layer_1_10": [0,0,0,0,0,0,0,13,0,0,0,0,0,0,13,0,0], "layer_1_11": [0,0,0,0,0,0,0,13,0,0,0,0,0,0,13,0,0], "layer_1_12": [0,0,0,0,0,0,0,13,0,0,0,0,0,0,13,0,0], "layer_1_13": [0,0,0,0,0,0,0,13,0,0,0,0,0,0,13,0,0], "layer_1_14": [0,0,0,0,0,0,0,13,0,0,0,0,0,0,13,0,0], "layer_1_15": [0,0,0,0,0,0,0,13,0,0,0,0,0,0,13,0,0], "layer_1_16": [0,0,0,0,0,0,0,13,0,0,0,0,0,0,13,0,0], "layer_1_17": [0,0,0,0,0,0,0,13,0,0,0,0,0,0,13,0,0], "layer_1_18": [0,0,0,0,0,0,0,13,0,0,0,0,0,0,13,0,0], "layer_1_19": [0,0,0,0,0,0,0,7,0,0,0,0,0,0,7,0,0], "layer_1_20": [0,0,0,0,0,0,0,7,0,0,0,0,0,0,7,0,0], "layer_1_21": [0,0,0,0,0,0,0,7,0,0,0,0,0,0,7,0,0], "layer_2_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_1": [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_4": [0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,34], "layer_2_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_6": [0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_11": [0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_12": [0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,34], "layer_2_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_16": [0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_17": [0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,34], "layer_2_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_2_20": [0,0,0,0,0,0,14,0,0,0,0,0,0,14,0,0,34], "layer_2_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34], "layer_3_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_3_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_4_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_0": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0], "layer_5_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_9": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_13": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_14": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_20": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_5_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_0": [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0], "layer_6_1": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_2": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_3": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_4": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_5": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_6": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_7": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_8": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_9": [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0], "layer_6_10": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_11": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_12": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_13": [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_14": [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0], "layer_6_15": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_16": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_17": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_18": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_19": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "layer_6_20": [0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0], "layer_6_21": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}';
    LevelData.HINT_X = [322, 309, 380, 0, 103, 179, 150, 0, 65, 0, 30, 0, -1, 0, 175, 0, -49, 0, 180, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    LevelData.HINT_Y = [5, 309, 263, 0, 400, 364, 260, 0, -10, 0, 416, 0, -19, 0, -2, 0, 191, 0, -16, 0, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    function getParse(data) {
        return;
    }
    LevelData.getParse = getParse;
})(LevelData || (LevelData = {}));
var Params;
(function (Params) {
    Params.isMacOS = false;
})(Params || (Params = {}));
var Score;
(function (Score) {
    Score.coint = 0;
    Score.maxCoint = 0;
})(Score || (Score = {}));
var ShopData;
(function (ShopData) {
    ShopData.withMenu = 'openWithMenu';
    ShopData.withGame = 'openWithGame';
    ShopData.openedShop = ShopData.withMenu;
})(ShopData || (ShopData = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goBackground = (function (_super) {
            __extends(goBackground, _super);
            function goBackground(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.posX = 700;
                var useWorld = Number(uSaveData.getItem('EquipWorlds') || 0);
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'gameAtlas', 'back_1');
                _this.tBack.anchor.set(0.5);
                _this.addChild(_this.tBack);
                _this.cloud_back1 = new Phaser.Sprite(_this.game, uMath.random(-200, 200), -100, 'gameAtlas', 'clouds_back0001');
                _this.cloud_back1.animations.add('play', Phaser.Animation.generateFrameNames('clouds_back', 1, 5, '', 4), 60, false);
                _this.cloud_back1.data.speedFactor = 20;
                _this.addChild(_this.cloud_back1);
                var speed = _this.posX + _this.cloud_back1.x;
                _this.cloud_back1.animations.currentAnim.frame = uMath.random(1, 4);
                _this.game.add.tween(_this.cloud_back1).to({ x: -_this.posX }, speed * _this.cloud_back1.data.speedFactor, Phaser.Easing.Linear.None, true).onComplete.addOnce(_this.newPosCloud, _this);
                _this.cloud_back2 = new Phaser.Sprite(_this.game, uMath.random(-200, 200), -100, 'gameAtlas', 'clouds_back0001');
                _this.cloud_back2.animations.add('play', Phaser.Animation.generateFrameNames('clouds_back', 1, 5, '', 4), 60, false);
                _this.cloud_back2.data.speedFactor = 20;
                _this.addChild(_this.cloud_back2);
                var speed = _this.posX + _this.cloud_back2.x;
                _this.cloud_back2.animations.currentAnim.frame = uMath.random(1, 4);
                _this.game.add.tween(_this.cloud_back2).to({ x: -_this.posX }, speed * _this.cloud_back2.data.speedFactor, Phaser.Easing.Linear.None, true).onComplete.addOnce(_this.newPosCloud, _this);
                _this.cloud_front1 = new Phaser.Sprite(_this.game, uMath.random(-200, 200), uMath.random(-200, 200), 'gameAtlas', 'clouds_front0001');
                _this.cloud_front1.animations.add('play', Phaser.Animation.generateFrameNames('clouds_front', 1, 5, '', 4), 60, false);
                _this.cloud_front1.data.speedFactor = 10;
                _this.addChild(_this.cloud_front1);
                var speed = _this.posX + _this.cloud_front1.x;
                _this.cloud_front1.animations.currentAnim.frame = uMath.random(1, 4);
                _this.game.add.tween(_this.cloud_front1).to({ x: -_this.posX }, speed * _this.cloud_front1.data.speedFactor, Phaser.Easing.Linear.None, true).onComplete.addOnce(_this.newPosCloud, _this);
                _this.cloud_front2 = new Phaser.Sprite(_this.game, uMath.random(-200, 200), uMath.random(-200, 200), 'gameAtlas', 'clouds_front0001');
                _this.cloud_front2.animations.add('play', Phaser.Animation.generateFrameNames('clouds_front', 1, 5, '', 4), 60, false);
                _this.cloud_front2.data.speedFactor = 10;
                _this.addChild(_this.cloud_front2);
                var speed = _this.posX + _this.cloud_front2.x;
                _this.cloud_front2.animations.currentAnim.frame = uMath.random(1, 4);
                _this.game.add.tween(_this.cloud_front2).to({ x: -_this.posX }, speed * _this.cloud_front2.data.speedFactor, Phaser.Easing.Linear.None, true).onComplete.addOnce(_this.newPosCloud, _this);
                _this.hills = new Phaser.Sprite(_this.game, -Config.GW / 2 - 5, -Config.GH / 2 + 5, 'gameAtlas', 'hills_bg0001');
                _this.hills.animations.add('play', Phaser.Animation.generateFrameNames('hills_bg', 1, 4, '', 4), 60, true);
                _this.hills.animations.currentAnim.frame = useWorld;
                _this.addChild(_this.hills);
                _this.sea_container = new Phaser.Sprite(_this.game, -Config.GW / 2, Config.GH / 2 - 36);
                for (var i = 0; i < 15; i++) {
                    var partSea = new Phaser.Sprite(_this.game, 0 + (59.6 * i), 0, 'gameAtlas', 'all_sea000' + (useWorld + 1));
                    _this.sea_container.addChild(partSea);
                }
                _this.addChild(_this.sea_container);
                _this.game.add.tween(_this.sea_container).to({ x: -Config.GW / 2 - 59.6 }, 400, Phaser.Easing.Linear.None, true, 0, -1);
                return _this;
            }
            goBackground.prototype.newPosCloud = function (obj) {
                obj.x = Config.GW / 2 + uMath.random(0, 100);
                obj.y = -100 - uMath.random(0, 200);
                var speed = this.posX + obj.x;
                this.game.add.tween(obj).to({ x: -this.posX }, speed * obj.data.speedFactor, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.newPosCloud, this);
                obj.animations.currentAnim.frame = uMath.random(1, 4);
            };
            return goBackground;
        }(Phaser.Sprite));
        Client.goBackground = goBackground;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goBounce = (function (_super) {
            __extends(goBounce, _super);
            function goBounce(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.timetoDown = 120;
                _this.tintcolor = 999999;
                _this.fire = false;
                _this.timetoFire = -1;
                _this.needFlame = false;
                var useWorld = 0;
                _this.game.physics.p2.enable(_this);
                _this.body.clearShapes();
                _this.body.setRectangle(26, 26, 13, 26);
                _this.body.static = true;
                _this.data.enable = true;
                _this.data.name = 'bounce';
                _this.body.data.shapes[0].sensor = true;
                _this.flameDummy = new Phaser.Sprite(_this.game, 0, 0);
                _this.addChild(_this.flameDummy);
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'gameAtlas', 'bounce0001');
                _this.tBack.animations.add('play', Phaser.Animation.generateFrameNames('bounce', 1, 20, '', 4), 60, false);
                _this.tBack.anchor.set(0.2, -0.23);
                _this.addChild(_this.tBack);
                return _this;
            }
            goBounce.prototype.onTimeToFireSet = function (time) {
                this.timetoFire = time;
                this.needFlame = true;
            };
            goBounce.prototype.onFire = function (time) {
                if (time === void 0) { time = 135; }
                if (!this.fire) {
                    this.timetoDown = time;
                    this.fire = true;
                    this.showFlame();
                }
            };
            goBounce.prototype.jumpAnim = function () {
                this.tBack.play('play');
                SndMng.sfxPlay(SndMng.SFX_JUMP, 1);
            };
            goBounce.prototype.onFired = function () {
                this.body.clearShapes();
                this.visible = false;
            };
            goBounce.prototype.showFlame = function () {
                if (this.visible) {
                    var flame = new Client.goFlame(this.game, uMath.random(0, 30), uMath.random(0, 30));
                    this.flameDummy.addChild(flame);
                }
            };
            goBounce.prototype.update = function () {
                if (this.visible) {
                    if (!this.fire) {
                        if (this.timetoFire >= 0) {
                            if (this.timetoFire > 0) {
                                this.timetoFire--;
                            }
                            else {
                                this.timetoFire = -1;
                                this.onFire();
                            }
                        }
                    }
                }
                if (this.visible) {
                    if (this.y > Config.GH - 60) {
                        this.onFired();
                        SndMng.sfxPlay(SndMng.SFX_BULK, 1);
                    }
                }
                if (this.fire) {
                    if (this.timetoDown > 0) {
                        this.timetoDown--;
                        switch (this.timetoDown) {
                            case 50: {
                                this.tintcolor = 888888;
                                break;
                            }
                            case 45: {
                                this.tintcolor = 777777;
                                break;
                            }
                            case 40: {
                                this.tintcolor = 666666;
                                break;
                            }
                            case 30: {
                                this.tintcolor = 555555;
                                break;
                            }
                            case 20: {
                                this.tintcolor = 444444;
                                break;
                            }
                            case 10: {
                                this.tintcolor = 222222;
                                break;
                            }
                        }
                        this.tBack.tint = Number('0x' + this.tintcolor);
                    }
                    else {
                        this.onFired();
                    }
                }
            };
            return goBounce;
        }(Phaser.Sprite));
        Client.goBounce = goBounce;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goCoinTile = (function (_super) {
            __extends(goCoinTile, _super);
            function goCoinTile(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                var useWorld = 0;
                _this.game.physics.p2.enable(_this);
                _this.body.clearShapes();
                _this.body.setRectangle(30, 30, 15, 30);
                _this.body.static = true;
                _this.body.data.shapes[0].sensor = true;
                _this.data.name = 'coin';
                _this.tBack = new Phaser.Sprite(_this.game, -10, 0, 'gameAtlas', 'coin_tile0001');
                _this.tBack.animations.add('play', Phaser.Animation.generateFrameNames('coin_tile', 1, 7, '', 4), 60, false);
                _this.tBack.animations.currentAnim.frame = uMath.random(0, 5);
                _this.addChild(_this.tBack);
                _this.tsparkle = new Phaser.Sprite(_this.game, -10, 0, 'gameAtlas', 'coinsparkle0021');
                _this.tsparkle.animations.add('play', Phaser.Animation.generateFrameNames('coinsparkle', 1, 21, '', 4), 24, false);
                _this.addChild(_this.tsparkle);
                return _this;
            }
            goCoinTile.prototype.onFire = function () {
                this.tBack.visible = false;
                this.body.clearShapes();
                Score.coint++;
                SndMng.sfxPlay(SndMng.SFX_PICK_UP, 1);
                this.tsparkle.play('play');
            };
            goCoinTile.prototype.onTimeToFireSet = function (time) {
            };
            goCoinTile.prototype.onFired = function () {
            };
            goCoinTile.prototype.update = function () {
                if (Score.coint >= Score.maxCoint - 1) {
                    this.tBack.animations.currentAnim.frame = 6;
                }
            };
            return goCoinTile;
        }(Phaser.Sprite));
        Client.goCoinTile = goCoinTile;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goCompleteDialog = (function (_super) {
            __extends(goCompleteDialog, _super);
            function goCompleteDialog(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.doChange = false;
                _this.onNext = new Phaser.Signal;
                _this.onRetry = new Phaser.Signal;
                _this.onLevelSelect = new Phaser.Signal;
                _this.onShop = new Phaser.Signal;
                _this.mainDummy = new Phaser.Sprite(_this.game, 0, 0);
                _this.addChild(_this.mainDummy);
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'gameAtlas', 'bg_complete');
                _this.mainDummy.addChild(_this.tBack);
                _this.medal = new Phaser.Sprite(_this.game, -42, 69, 'gameAtlas', 'fire_medal0001');
                _this.mainDummy.addChild(_this.medal);
                _this.btnShop = new Phaser.Button(_this.game, 487, 360, 'gameAtlas', _this.onClickShop, _this, 'btn_shop0002', 'btn_shop0001');
                _this.btnShop.scale.set(0.8);
                _this.btnShop.anchor.set(0.5);
                _this.mainDummy.addChild(_this.btnShop);
                _this.btnRetry = new Phaser.Button(_this.game, 139, 487, 'gameAtlas', _this.onRetryLevel, _this, 'btn_retry0002', 'btn_retry0001');
                _this.btnRetry.scale.set(0.8);
                _this.btnRetry.anchor.set(0.5);
                _this.mainDummy.addChild(_this.btnRetry);
                _this.btnSelect = new Phaser.Button(_this.game, 329, 487, 'gameAtlas', _this.onSelectLevel, _this, 'btn_select0002', 'btn_select0001');
                _this.btnSelect.scale.set(0.8);
                _this.btnSelect.anchor.set(0.5);
                _this.mainDummy.addChild(_this.btnSelect);
                _this.btnContinue = new Phaser.Button(_this.game, 519, 487, 'gameAtlas', _this.onNextLevel, _this, 'btn_next0002', 'btn_next0001');
                _this.btnContinue.scale.set(0.8);
                _this.btnContinue.anchor.set(0.5);
                _this.mainDummy.addChild(_this.btnContinue);
                _this.coinNumber = new Phaser.BitmapText(_this.game, 465, 140, 'myFont', '', 20);
                _this.coinNumber.text = Score.coint + '/5';
                _this.coinNumber.tint = 0xFEFE98;
                _this.coinNumber.smoothed = true;
                _this.coinNumber.anchor.set(0.5);
                _this.mainDummy.addChild(_this.coinNumber);
                _this.crystalNumber = new Phaser.BitmapText(_this.game, 490, 312, 'myFont', '', 20);
                _this.crystalNumber.text = '100';
                _this.crystalNumber.smoothed = true;
                _this.crystalNumber.anchor.set(0.5);
                _this.mainDummy.addChild(_this.crystalNumber);
                return _this;
            }
            goCompleteDialog.prototype.onSelectLevel = function () {
                if (!this.doChange) {
                    uSaveData.setItem('lvl' + (GlobalVar.selectLevel - 1), 'true');
                    uSaveData.setItem('lvl' + (GlobalVar.selectLevel - 1) + 'done', 'true');
                    if (Score.coint >= 5) {
                        uSaveData.setItem('lvl' + (GlobalVar.selectLevel - 1) + 'crystal', 'true');
                    }
                    uSaveData.setItem('numCrystal', this.crystalNumber.text);
                    this.onLevelSelect.dispatch();
                    this.doChange = true;
                    uSaveData.saveData();
                }
            };
            goCompleteDialog.prototype.onRetryLevel = function () {
                if (!this.doChange) {
                    uSaveData.setItem('numCrystal', this.crystalNumber.text);
                    this.onRetry.dispatch();
                    this.doChange = true;
                    uSaveData.saveData();
                }
            };
            goCompleteDialog.prototype.onClickShop = function () {
                this.onShop.dispatch();
            };
            goCompleteDialog.prototype.onNextLevel = function () {
                if (!this.doChange) {
                    uSaveData.setItem('numCrystal', this.crystalNumber.text);
                    uSaveData.setItem('lvl' + (GlobalVar.selectLevel - 1), 'true');
                    uSaveData.setItem('lvl' + (GlobalVar.selectLevel - 1) + 'done', 'true');
                    if (Score.coint >= 5) {
                        uSaveData.setItem('lvl' + (GlobalVar.selectLevel - 1) + 'crystal', 'true');
                    }
                    GlobalVar.selectLevel++;
                    this.onNext.dispatch();
                    this.doChange = true;
                    uSaveData.saveData();
                }
            };
            goCompleteDialog.prototype.update = function () {
                this.coinNumber.text = Score.coint + '/' + Score.maxCoint;
                var crystl = Number(uSaveData.getItem('numCrystal') || '0');
                if (Score.coint >= Score.maxCoint) {
                    this.medal.frameName = 'fire_medal0002';
                    crystl += 1;
                }
                this.crystalNumber.text = '' + crystl;
                uSaveData.setItem('numCrystal', '' + crystl);
                uSaveData.saveData();
            };
            goCompleteDialog.prototype.imitationAfterShop = function () {
                this.coinNumber.text = Score.coint + '/' + Score.maxCoint;
                var crystl = Number(uSaveData.getItem('numCrystal') || '0');
                if (Score.coint >= Score.maxCoint) {
                    this.medal.frameName = 'fire_medal0002';
                }
                this.crystalNumber.text = '' + crystl;
            };
            return goCompleteDialog;
        }(Phaser.Sprite));
        Client.goCompleteDialog = goCompleteDialog;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goConTile = (function (_super) {
            __extends(goConTile, _super);
            function goConTile(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                var shopTile = Number(uSaveData.getItem('EquipTile') || 0);
                _this.game.physics.p2.enable(_this);
                _this.body.clearShapes();
                _this.body.setRectangle(28, 28, 14, 28);
                _this.body.static = true;
                _this.data.enable = true;
                _this.data.name = 'fire';
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'gameAtlas', 'contile' + shopTile);
                _this.tBack.anchor.set(0, -0.5);
                _this.addChild(_this.tBack);
                return _this;
            }
            goConTile.prototype.onTimeToFireSet = function (time) {
            };
            goConTile.prototype.onFire = function (time) {
                if (time === void 0) { time = 120; }
            };
            goConTile.prototype.onFired = function () {
            };
            goConTile.prototype.update = function () {
            };
            return goConTile;
        }(Phaser.Sprite));
        Client.goConTile = goConTile;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goEmiterFlame = (function (_super) {
            __extends(goEmiterFlame, _super);
            function goEmiterFlame(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.timeToCreateNewParticle = 10;
                _this.currentTime = 0;
                var useWorld = 0;
                return _this;
            }
            goEmiterFlame.prototype.updater = function (tx, ty) {
                if (this.currentTime < 0) {
                    var flame = new Client.goFlame(this.game, tx, ty);
                    flame.anchor.set(0.5, 0);
                    flame.scale.set(1 + (uMath.random(0, 50) / 100));
                    this.addChild(flame);
                    this.currentTime = this.timeToCreateNewParticle;
                }
                else {
                    this.currentTime--;
                }
            };
            return goEmiterFlame;
        }(Phaser.Sprite));
        Client.goEmiterFlame = goEmiterFlame;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goExitTile = (function (_super) {
            __extends(goExitTile, _super);
            function goExitTile(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                var useWorld = 0;
                _this.game.physics.p2.enable(_this);
                _this.body.clearShapes();
                _this.body.setRectangle(30, 30, 15, 30);
                _this.body.static = true;
                _this.body.data.shapes[0].sensor = true;
                _this.data.name = 'exit';
                _this.fireDummy = new Phaser.Sprite(_this.game, 0, 0);
                _this.addChild(_this.fireDummy);
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'gameAtlas', 'exit_tile1');
                _this.tBack.anchor.set(0.1, -0.3);
                _this.addChild(_this.tBack);
                return _this;
            }
            goExitTile.prototype.onFire = function () {
                this.showFlame();
            };
            goExitTile.prototype.showFlame = function () {
                if (this.visible) {
                    var flame = new Client.goFlame(this.game, uMath.random(0, 30), uMath.random(0, 30));
                    this.fireDummy.addChild(flame);
                }
            };
            goExitTile.prototype.onTimeToFireSet = function (time) {
            };
            goExitTile.prototype.onFired = function () {
            };
            goExitTile.prototype.update = function () {
            };
            return goExitTile;
        }(Phaser.Sprite));
        Client.goExitTile = goExitTile;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goFireTile = (function (_super) {
            __extends(goFireTile, _super);
            function goFireTile(game, x, y, fd) {
                var _this = _super.call(this, game, x, y) || this;
                _this.timetoDown = 120;
                _this.tintcolor = 999999;
                _this.fire = false;
                _this.timetoFire = -1;
                _this.needFlame = false;
                _this.flameDummy = fd;
                var shopTile = Number(uSaveData.getItem('EquipTile') || 0);
                _this.game.physics.p2.enable(_this);
                _this.body.clearShapes();
                _this.body.setRectangle(26, 26, 13, 26);
                _this.body.static = true;
                _this.data.enable = true;
                _this.data.name = 'fire';
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'gameAtlas', 'fire_tile' + shopTile);
                _this.tBack.anchor.set(0, -0.5);
                _this.addChild(_this.tBack);
                _this.boom = new Phaser.Sprite(_this.game, -45, -30, 'gameAtlas', 'flame_bah0001');
                _this.boom.animations.add('play', Phaser.Animation.generateFrameNames('flame_bah', 1, 10, '', 4), 10, false);
                _this.boom.visible = false;
                _this.addChild(_this.boom);
                return _this;
            }
            goFireTile.prototype.onTimeToFireSet = function (time) {
                this.timetoFire = time;
                this.needFlame = true;
            };
            goFireTile.prototype.onFire = function (time) {
                if (time === void 0) { time = 135; }
                if (!this.fire) {
                    this.timetoDown = time;
                    this.fire = true;
                    this.showFlame();
                }
            };
            goFireTile.prototype.onFired = function () {
                this.body.static = true;
                this.body.velocity.y = 0;
                this.body.clearShapes();
                this.tBack.visible = false;
                this.boom.visible = true;
                this.boom.play('play').onComplete.addOnce(this.onDestroy, this);
            };
            goFireTile.prototype.onDestroy = function () {
                this.kill();
            };
            goFireTile.prototype.stopFire = function () {
                this.fire = false;
            };
            goFireTile.prototype.showFlame = function () {
                if (this.tBack.visible) {
                    this.flameEmiter = new Client.goEmiterFlame(this.game, 0, 0);
                    this.flameEmiter.timeToCreateNewParticle = 15;
                    this.flameDummy.addChild(this.flameEmiter);
                }
            };
            goFireTile.prototype.update = function () {
                if (this.tBack.visible) {
                    if (!this.fire) {
                        if (this.timetoFire >= 0) {
                            if (this.timetoFire > 0) {
                                this.timetoFire--;
                            }
                            else {
                                this.timetoFire = -1;
                                this.onFire();
                            }
                        }
                    }
                    else {
                        if (this.flameEmiter) {
                            this.flameEmiter.updater(this.x + uMath.random(5, 25), this.y + uMath.random(20, 30));
                        }
                    }
                }
                if (this.tBack.visible) {
                    if (this.y > Config.GH - 60) {
                        this.onFired();
                        SndMng.sfxPlay(SndMng.SFX_BULK, 1);
                    }
                }
                if (this.fire) {
                    if (this.timetoDown > 0) {
                        this.timetoDown--;
                        switch (this.timetoDown) {
                            case 50: {
                                this.tintcolor = 888888;
                                break;
                            }
                            case 45: {
                                this.tintcolor = 777777;
                                break;
                            }
                            case 40: {
                                this.tintcolor = 666666;
                                break;
                            }
                            case 30: {
                                this.tintcolor = 555555;
                                break;
                            }
                            case 20: {
                                this.tintcolor = 444444;
                                break;
                            }
                            case 10: {
                                this.tintcolor = 222222;
                                break;
                            }
                        }
                        this.tBack.tint = Number('0x' + this.tintcolor);
                    }
                    else {
                        this.fire = false;
                        this.data.name = 'fired';
                        this.body.static = false;
                        if (this.body.data.shapes[0]) {
                            this.body.data.shapes[0].sensor = true;
                        }
                    }
                }
            };
            return goFireTile;
        }(Phaser.Sprite));
        Client.goFireTile = goFireTile;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goFlame = (function (_super) {
            __extends(goFlame, _super);
            function goFlame(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.onComplete = new Phaser.Signal;
                _this.timeToFire = 800;
                _this.Alive = true;
                var useWorld = 0;
                _this.tSmoke = new Phaser.Sprite(_this.game, 0, 0, 'gameAtlas', 'smoke');
                _this.tSmoke.anchor.set(0.5);
                _this.tSmoke.scale.set(0);
                _this.addChild(_this.tSmoke);
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'gameAtlas', 'flame0001');
                _this.tBack.animations.add('idle', Phaser.Animation.generateFrameNames('flame', 1, 20, '', 4), 20, true).play();
                _this.tBack.anchor.set(0.5);
                _this.addChild(_this.tBack);
                _this.game.add.tween(_this.tBack).to({ alpha: 0 }, _this.timeToFire, Phaser.Easing.Linear.None, true);
                _this.game.add.tween(_this.tSmoke.scale).to({ x: 2 }, _this.timeToFire * 2, Phaser.Easing.Linear.None, true);
                _this.game.add.tween(_this.tSmoke.scale).to({ y: 2 }, _this.timeToFire * 2, Phaser.Easing.Linear.None, true);
                _this.game.add.tween(_this.tSmoke).to({ y: -(20 + uMath.random(0, 20)) }, _this.timeToFire * 2, Phaser.Easing.Linear.None, true).onComplete.addOnce(_this.onDestroy, _this);
                _this.game.add.tween(_this.tSmoke).to({ alpha: 0.3 }, _this.timeToFire * 2, Phaser.Easing.Linear.None, true);
                return _this;
            }
            goFlame.prototype.onDestroy = function () {
                this.removeChild(this.tSmoke);
                this.removeChild(this.tBack);
                this.tSmoke = null;
                this.tBack = null;
                this.Alive = false;
                this.onComplete.dispatch();
                this.kill();
            };
            return goFlame;
        }(Phaser.Sprite));
        Client.goFlame = goFlame;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goGate = (function (_super) {
            __extends(goGate, _super);
            function goGate(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.close = true;
                var useWorld = 0;
                _this.game.physics.p2.enable(_this);
                _this.body.clearShapes();
                _this.body.setRectangle(28, 28, 14, 28);
                _this.body.static = true;
                _this.data.enable = true;
                _this.tBack = new Phaser.Sprite(_this.game, 0, 26, 'gameAtlas', 'gate0001');
                _this.tBack.anchor.set(0.5);
                _this.tBack.animations.add('play', Phaser.Animation.generateFrameNames('gate', 1, 2, '', 4), 60, false);
                _this.tBack.animations.currentAnim.frame = 0;
                _this.addChild(_this.tBack);
                return _this;
            }
            goGate.prototype.Open = function () {
                if (this.close) {
                    this.close = false;
                    this.tBack.animations.currentAnim.frame = 1;
                    this.body.clearShapes();
                }
                else {
                    this.close = true;
                    this.tBack.animations.currentAnim.frame = 0;
                    this.body.setRectangle(28, 28, 14, 28);
                }
            };
            goGate.prototype.onTimeToFireSet = function (time) {
            };
            goGate.prototype.onFire = function (time) {
                if (time === void 0) { time = 120; }
            };
            goGate.prototype.onFired = function () {
            };
            goGate.prototype.update = function () {
            };
            return goGate;
        }(Phaser.Sprite));
        Client.goGate = goGate;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goGateButton = (function (_super) {
            __extends(goGateButton, _super);
            function goGateButton(game, x, y, fd) {
                var _this = _super.call(this, game, x, y) || this;
                _this.timetoDown = 120;
                _this.tintcolor = 999999;
                _this.fire = false;
                _this.timetoFire = -1;
                _this.openObject = new Array();
                _this.needFlame = false;
                _this.flameDummy = fd;
                var useWorld = 0;
                _this.game.physics.p2.enable(_this);
                _this.body.clearShapes();
                _this.body.setRectangle(26, 26, 13, 26);
                _this.body.static = true;
                _this.data.enable = true;
                _this.body.data.shapes[0].sensor = true;
                _this.data.name = 'fire';
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'gameAtlas', 'button_gate0001');
                _this.tBack.animations.add('open', Phaser.Animation.generateFrameNames('button_gate', 1, 5, '', 4), 20, false);
                _this.tBack.anchor.set(0, -1.5);
                _this.addChild(_this.tBack);
                return _this;
            }
            goGateButton.prototype.addOpenObj = function (obj) {
                this.openObject.push(obj);
            };
            goGateButton.prototype.onTimeToFireSet = function (time) {
                this.timetoFire = time;
                this.needFlame = true;
            };
            goGateButton.prototype.onFire = function (time) {
                if (time === void 0) { time = 120; }
                if (!this.fire) {
                    this.timetoDown = time;
                    this.fire = true;
                    this.showFlame();
                    this.tBack.play('open');
                    for (var i = 0; i < this.openObject.length; i++) {
                        this.openObject[i].Open();
                    }
                    SndMng.sfxPlay(SndMng.SFX_OPEN, 1);
                }
            };
            goGateButton.prototype.onFired = function () {
                this.body.clearShapes();
                this.visible = false;
            };
            goGateButton.prototype.showFlame = function () {
                if (this.visible) {
                    var flame = new Client.goFlame(this.game, this.x + uMath.random(5, 25), this.y + uMath.random(10, 30));
                    this.flameDummy.addChild(flame);
                }
            };
            goGateButton.prototype.update = function () {
                if (this.visible) {
                    if (!this.fire) {
                        if (this.timetoFire >= 0) {
                            if (this.timetoFire > 0) {
                                this.timetoFire--;
                            }
                            else {
                                this.timetoFire = -1;
                                this.onFire();
                            }
                        }
                    }
                }
                if (this.visible) {
                    if (this.y > Config.GH - 60) {
                        this.onFired();
                        SndMng.sfxPlay(SndMng.SFX_BULK, 1);
                    }
                }
                if (this.fire) {
                    if (this.timetoDown > 0) {
                        this.timetoDown--;
                        switch (this.timetoDown) {
                            case 50: {
                                this.tintcolor = 888888;
                                break;
                            }
                            case 45: {
                                this.tintcolor = 777777;
                                break;
                            }
                            case 40: {
                                this.tintcolor = 666666;
                                break;
                            }
                            case 30: {
                                this.tintcolor = 555555;
                                break;
                            }
                            case 20: {
                                this.tintcolor = 444444;
                                break;
                            }
                            case 10: {
                                this.tintcolor = 222222;
                                break;
                            }
                        }
                        this.tBack.tint = Number('0x' + this.tintcolor);
                    }
                    else {
                        this.fire = false;
                        this.data.name = 'fired';
                        this.visible = false;
                    }
                }
            };
            return goGateButton;
        }(Phaser.Sprite));
        Client.goGateButton = goGateButton;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goPauseDialog = (function (_super) {
            __extends(goPauseDialog, _super);
            function goPauseDialog(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.doChange = false;
                _this.onResume = new Phaser.Signal;
                _this.onRetry = new Phaser.Signal;
                _this.onLevelSelect = new Phaser.Signal;
                _this.onMainMenu = new Phaser.Signal;
                _this.mainDummy = new Phaser.Sprite(_this.game, 0, 0);
                _this.addChild(_this.mainDummy);
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'gameAtlas', 'bg_panel');
                _this.mainDummy.addChild(_this.tBack);
                _this.headText = new Phaser.Sprite(_this.game, Config.GW / 2, Config.GH / 2 - 180, 'gameAtlas', 'pause');
                _this.headText.anchor.set(0.5);
                _this.mainDummy.addChild(_this.headText);
                _this.btnContinue = new Phaser.Button(_this.game, Config.GW / 2, Config.GH / 2 - 70, 'gameAtlas', _this.onSelectContinue, _this, 'btn_next0002', 'btn_next0001');
                _this.btnContinue.anchor.set(0.5);
                _this.mainDummy.addChild(_this.btnContinue);
                _this.btnRetry = new Phaser.Button(_this.game, Config.GW / 2, Config.GH / 2, 'gameAtlas', _this.onSelectRetry, _this, 'btn_retry0002', 'btn_retry0001');
                _this.btnRetry.anchor.set(0.5);
                _this.btnRetry.scale.set(0.87);
                _this.mainDummy.addChild(_this.btnRetry);
                _this.btnSelectLevel = new Phaser.Button(_this.game, Config.GW / 2, Config.GH / 2 + 65, 'gameAtlas', _this.onSelectLvl, _this, 'btn_select0002', 'btn_select0001');
                _this.btnSelectLevel.anchor.set(0.5);
                _this.btnSelectLevel.scale.set(0.87);
                _this.mainDummy.addChild(_this.btnSelectLevel);
                _this.btnMainMenu = new Phaser.Button(_this.game, Config.GW / 2, Config.GH / 2 + 130, 'gameAtlas', _this.onMMenu, _this, 'btn_main_menu0002', 'btn_main_menu0001');
                _this.btnMainMenu.anchor.set(0.5);
                _this.btnMainMenu.scale.set(0.87);
                _this.mainDummy.addChild(_this.btnMainMenu);
                return _this;
            }
            goPauseDialog.prototype.newShow = function () {
                this.doChange = false;
            };
            goPauseDialog.prototype.onSelectContinue = function () {
                if (!this.doChange) {
                    this.doChange = true;
                    this.onResume.dispatch();
                }
            };
            goPauseDialog.prototype.onSelectRetry = function () {
                if (!this.doChange) {
                    this.doChange = true;
                    this.onRetry.dispatch();
                }
            };
            goPauseDialog.prototype.onSelectLvl = function () {
                if (!this.doChange) {
                    this.doChange = true;
                    this.onLevelSelect.dispatch();
                }
            };
            goPauseDialog.prototype.onMMenu = function () {
                if (!this.doChange) {
                    this.doChange = true;
                    this.onMainMenu.dispatch();
                }
            };
            return goPauseDialog;
        }(Phaser.Sprite));
        Client.goPauseDialog = goPauseDialog;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goPlayer = (function (_super) {
            __extends(goPlayer, _super);
            function goPlayer(game, x, y) {
                var _this = _super.call(this, game, x + 15, y + 30) || this;
                _this.jumpTimer = 0;
                _this.yAxis = p2.vec2.fromValues(0, 1);
                _this.onCompleted = false;
                _this.onDeathd = false;
                _this.doubleJump = true;
                _this.onComplete = new Phaser.Signal;
                _this.onDeath = new Phaser.Signal;
                _this.mRight = false;
                _this.mLeft = false;
                _this.mJump = false;
                _this.keyboard = true;
                _this.usePers = Number(uSaveData.getItem('EquipSkin') || 0);
                _this.game.physics.p2.enable(_this);
                _this.body.clearShapes();
                _this.body.setCircle(15);
                _this.body.fixedRotation = true;
                _this.data.enable = true;
                _this.data.name = 'player';
                _this.body.mass = 0.1;
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'playerAtlas' + _this.usePers, 'anim0001');
                _this.tBack.animations.add('idle', Phaser.Animation.generateFrameNames('anim', 1, 12, '', 4), 24, true);
                _this.tBack.animations.add('walk', Phaser.Animation.generateFrameNames('anim', 22, 29, '', 4), 24, true);
                _this.tBack.animations.add('JumpDown', Phaser.Animation.generateFrameNames('anim', 14, 21, '', 4), 60, false);
                _this.tBack.animations.add('JumpUp', Phaser.Animation.generateFrameNames('anim', 13, 13, '', 4), 24, true);
                _this.tBack.animations.add('complete', Phaser.Animation.generateFrameNames('anim', 87, 87, '', 4), 24, true);
                _this.tBack.animations.add('death', Phaser.Animation.generateFrameNames('anim', 30, 85, '', 4), 24, false);
                _this.tBack.anchor.set(0.5, 0.65);
                _this.tBack.play('idle');
                _this.addChild(_this.tBack);
                _this.circle = new Phaser.Sprite(_this.game, 0, 0, 'gameAtlas', 'circle');
                _this.circle.anchor.set(0.5);
                _this.addChild(_this.circle);
                var dialogFrame = uMath.random(1, 26);
                _this.dialog = new Phaser.Sprite(_this.game, 70, -35, 'gameAtlas', 'dialog0002');
                _this.dialog.animations.add('play', Phaser.Animation.generateFrameNames('dialog', 2, 28, '', 4), 60, true);
                _this.dialog.animations.currentAnim.frame = dialogFrame;
                _this.dialog.anchor.set(0.5);
                _this.addChild(_this.dialog);
                if (uMath.random(0, 100) > 50) {
                    _this.dialog.visible = false;
                }
                var equipedHat = Number(uSaveData.getItem('EquipHat') || 0);
                switch (equipedHat) {
                    case 0:
                        {
                            equipedHat = 0;
                        }
                        break;
                    case 1:
                        {
                            equipedHat = 2;
                        }
                        break;
                    case 2:
                        {
                            equipedHat = 8;
                        }
                        break;
                    case 3:
                        {
                            equipedHat = 13;
                        }
                        break;
                    case 4:
                        {
                            equipedHat = 14;
                        }
                        break;
                    case 5:
                        {
                            equipedHat = 7;
                        }
                        break;
                    case 6:
                        {
                            equipedHat = 11;
                        }
                        break;
                    case 7:
                        {
                            equipedHat = 9;
                        }
                        break;
                    case 8:
                        {
                            equipedHat = 15;
                        }
                        break;
                    case 9:
                        {
                            equipedHat = 16;
                        }
                        break;
                    case 10:
                        {
                            equipedHat = 18;
                        }
                        break;
                    case 11:
                        {
                            equipedHat = 20;
                        }
                        break;
                    case 12:
                        {
                            equipedHat = 5;
                        }
                        break;
                    case 13:
                        {
                            equipedHat = 4;
                        }
                        break;
                    case 14:
                        {
                            equipedHat = 6;
                        }
                        break;
                    case 15:
                        {
                            equipedHat = 1;
                        }
                        break;
                    case 16:
                        {
                            equipedHat = 10;
                        }
                        break;
                    case 17:
                        {
                            equipedHat = 12;
                        }
                        break;
                    case 18:
                        {
                            equipedHat = 3;
                        }
                        break;
                    case 19:
                        {
                            equipedHat = 17;
                        }
                        break;
                    case 20:
                        {
                            equipedHat = 19;
                        }
                        break;
                    case 21:
                        {
                            equipedHat = 21;
                        }
                        break;
                }
                _this.hat = new Phaser.Sprite(_this.game, 0, 0, 'gameAtlas', 'all_hats0001');
                _this.hat.animations.add('play', Phaser.Animation.generateFrameNames('all_hats', 1, 22, '', 4), 60, true);
                _this.hat.animations.currentAnim.frame = equipedHat;
                _this.hat.anchor.set(0.5);
                _this.tBack.addChild(_this.hat);
                _this.game.add.tween(_this.circle.scale).to({ x: 0.5 }, 800, Phaser.Easing.Linear.None, true, 0, -1, true);
                _this.game.add.tween(_this.circle.scale).to({ y: 0.5 }, 800, Phaser.Easing.Linear.None, true, 0, -1, true);
                _this.cursors = _this.game.input.keyboard.createCursorKeys();
                return _this;
            }
            goPlayer.prototype.updateHatPos = function () {
                if (this.usePers == 0 || this.usePers == 1 || this.usePers == 2 || this.usePers == 3) {
                    var i = this.tBack.animations.currentFrame.index;
                    this.hat.x = GlobalVar.pers0X[i] - 3;
                    this.hat.y = GlobalVar.pers0Y[i] - 5;
                    this.hat.angle = GlobalVar.pers0A[i];
                }
            };
            goPlayer.prototype.addFlame = function (layer) {
                this.flameEmiter = new Client.goEmiterFlame(this.game, 0, 0);
                this.flameEmiter.timeToCreateNewParticle = 5;
                layer.addChild(this.flameEmiter);
            };
            goPlayer.prototype.downRight = function () {
                this.mRight = true;
                this.keyboard = false;
            };
            goPlayer.prototype.downLeft = function () {
                this.mLeft = true;
                this.keyboard = false;
            };
            goPlayer.prototype.upLeft = function () {
                if (this.tBack.scale.x == -1) {
                    this.body.velocity.x = 0;
                    this.mLeft = false;
                }
            };
            goPlayer.prototype.upRight = function () {
                if (this.tBack.scale.x == 1) {
                    this.body.velocity.x = 0;
                    this.mRight = false;
                }
            };
            goPlayer.prototype.downJump = function () {
                this.mJump = true;
                this.keyboard = false;
            };
            goPlayer.prototype.upJump = function () {
                this.jumpTimer = 0;
                this.mJump = false;
            };
            goPlayer.prototype.complete = function () {
                this.onCompleted = true;
                this.body.velocity.x = 0;
                this.body.kinematic = true;
                this.body.velocity.y = -800;
                this.tBack.play('complete');
                this.hat.scale.x = 0.7;
                SndMng.sfxPlay(SndMng.SFX_GOAL, 1);
            };
            goPlayer.prototype.playerDeath = function () {
                this.onDeath.dispatch();
            };
            goPlayer.prototype.hideCircle = function () {
                if (this.circle.visible) {
                    this.circle.visible = false;
                    this.dialog.visible = false;
                }
            };
            goPlayer.prototype.update = function () {
                this.updateHatPos();
                if (!this.onCompleted && !this.onDeathd) {
                    if (this.cursors.left.isDown) {
                        this.mLeft = true;
                        this.keyboard = true;
                    }
                    if (this.cursors.right.isDown) {
                        this.mRight = true;
                        this.keyboard = true;
                    }
                    if (this.flameEmiter) {
                        this.flameEmiter.updater(this.x + uMath.random(-10, 15), this.y + uMath.random(0, 0));
                    }
                    var canJump = this.checkIfCanJump();
                    if (this.mLeft) {
                        this.hideCircle();
                        this.body.moveLeft(200);
                        if (canJump) {
                            if (this.tBack.animations.currentAnim.name != 'walk') {
                                this.tBack.play('walk');
                            }
                        }
                        this.tBack.scale.set(-1, 1);
                    }
                    else if (this.mRight) {
                        this.hideCircle();
                        this.body.moveRight(200);
                        if (canJump) {
                            if (this.tBack.animations.currentAnim.name != 'walk') {
                                this.tBack.play('walk');
                            }
                        }
                        this.tBack.scale.set(1);
                    }
                    else {
                        if (canJump) {
                            this.body.velocity.x = 0;
                            this.tBack.play('idle');
                        }
                    }
                    if (this.cursors.up.isDown) {
                        this.keyboard = true;
                        this.mJump = true;
                    }
                    if (this.mJump && this.game.time.now > this.jumpTimer) {
                        this.hideCircle();
                        if (canJump) {
                            this.doubleJump = true;
                            this.body.moveUp(400);
                            this.jumpTimer = this.game.time.now + 750;
                        }
                        else {
                            if (this.doubleJump) {
                                this.doubleJump = false;
                                this.body.moveUp(300);
                            }
                        }
                    }
                    if (this.cursors.up.isUp) {
                        if (this.keyboard) {
                            this.jumpTimer = 0;
                            this.mJump = false;
                        }
                    }
                    if (this.cursors.right.isUp) {
                        if (this.keyboard) {
                            if (this.tBack.scale.x == 1) {
                                this.body.velocity.x = 0;
                                this.mRight = false;
                            }
                        }
                    }
                    if (this.cursors.left.isUp) {
                        if (this.keyboard) {
                            if (this.tBack.scale.x == -1) {
                                this.body.velocity.x = 0;
                                this.mLeft = false;
                            }
                        }
                    }
                    if (!canJump) {
                        if (this.body.velocity.y < -50) {
                            this.tBack.play('JumpUp');
                        }
                        if (this.body.velocity.y > -50) {
                            if (this.tBack.animations.currentAnim.name != 'JumpDown') {
                                if (this.tBack.animations.currentAnim.name == 'walk') {
                                    if (this.body.velocity.y > 60) {
                                        this.tBack.play('JumpDown');
                                    }
                                }
                                else {
                                    this.tBack.play('JumpDown');
                                }
                            }
                        }
                    }
                    if (this.y > Config.GH - 30) {
                        this.onDeathd = true;
                        this.tBack.play('death').onComplete.addOnce(this.playerDeath, this);
                        this.body.static = true;
                        this.body.velocity.x = 0;
                        this.body.velocity.y = 0;
                        SndMng.sfxPlay(SndMng.SFX_BULK, 1);
                    }
                }
                else {
                    if (this.y <= -100) {
                        this.onComplete.dispatch();
                    }
                }
            };
            goPlayer.prototype.checkIfCanJump = function () {
                var result = false;
                for (var i = 0; i < this.game.physics.p2.world.narrowphase.contactEquations.length; i++) {
                    var c = this.game.physics.p2.world.narrowphase.contactEquations[i];
                    if (c.bodyA === this.body.data || c.bodyB === this.body.data) {
                        var d = p2.vec2.dot(c.normalA, this.yAxis);
                        if (c.bodyA === this.body.data) {
                            d *= -1;
                        }
                        if (d > 0.5) {
                            result = true;
                        }
                    }
                }
                return result;
            };
            return goPlayer;
        }(Phaser.Sprite));
        Client.goPlayer = goPlayer;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goRestartDialog = (function (_super) {
            __extends(goRestartDialog, _super);
            function goRestartDialog(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.doChange = false;
                _this.onYes = new Phaser.Signal;
                _this.onNo = new Phaser.Signal;
                _this.mainDummy = new Phaser.Sprite(_this.game, 0, 0);
                _this.addChild(_this.mainDummy);
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'gameAtlas', 'bg_panel');
                _this.mainDummy.addChild(_this.tBack);
                _this.headText = new Phaser.Sprite(_this.game, Config.GW / 2, Config.GH / 2 - 50, 'gameAtlas', 'restart');
                _this.headText.anchor.set(0.5);
                _this.mainDummy.addChild(_this.headText);
                _this.btnYes = new Phaser.Button(_this.game, Config.GW / 2 - 50, Config.GH / 2 + 50, 'gameAtlas', _this.onSelectYes, _this, 'btn_yes0002', 'btn_yes0001');
                _this.btnYes.anchor.set(0.5);
                _this.mainDummy.addChild(_this.btnYes);
                _this.btnNo = new Phaser.Button(_this.game, Config.GW / 2 + 50, Config.GH / 2 + 50, 'gameAtlas', _this.onSelectNo, _this, 'btn_no0002', 'btn_no0001');
                _this.btnNo.anchor.set(0.5);
                _this.mainDummy.addChild(_this.btnNo);
                return _this;
            }
            goRestartDialog.prototype.newShow = function () {
                this.doChange = false;
            };
            goRestartDialog.prototype.onSelectYes = function () {
                if (!this.doChange) {
                    this.doChange = true;
                    this.onYes.dispatch();
                }
            };
            goRestartDialog.prototype.onSelectNo = function () {
                if (!this.doChange) {
                    this.doChange = true;
                    this.onNo.dispatch();
                }
            };
            return goRestartDialog;
        }(Phaser.Sprite));
        Client.goRestartDialog = goRestartDialog;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goRocket = (function (_super) {
            __extends(goRocket, _super);
            function goRocket(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.timetoFire = -1;
                _this.needFlame = false;
                _this.fire = false;
                var useWorld = 0;
                _this.game.physics.p2.enable(_this);
                _this.body.clearShapes();
                _this.body.setRectangle(20, 20, 15, 30);
                _this.body.static = true;
                _this.body.data.shapes[0].sensor = true;
                _this.data.name = 'fire';
                _this.fireDummy = new Phaser.Sprite(_this.game, 0, 0);
                _this.addChild(_this.fireDummy);
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'gameAtlas', 'rocket0001');
                _this.tBack.animations.add('play', Phaser.Animation.generateFrameNames('rocket', 1, 30, '', 4), 60, false);
                _this.tBack.anchor.set(0.1, 0);
                _this.addChild(_this.tBack);
                _this.boom = new Phaser.Sprite(_this.game, -45, -30, 'gameAtlas', 'flame_bah0001');
                _this.boom.animations.add('play', Phaser.Animation.generateFrameNames('flame_bah', 1, 10, '', 4), 10, false);
                _this.boom.visible = false;
                _this.addChild(_this.boom);
                return _this;
            }
            goRocket.prototype.onFire = function () {
                if (!this.fire) {
                    this.fire = true;
                    this.showFlame();
                    this.body.static = false;
                    this.body.velocity.y = -200;
                    this.data.name = 'fired';
                    this.tBack.play('play');
                    SndMng.sfxPlay(SndMng.SFX_ROCKET, 1);
                }
            };
            goRocket.prototype.showFlame = function () {
                if (this.tBack.visible) {
                    var flame = new Client.goFlame(this.game, uMath.random(10, 20), uMath.random(60, 70));
                    flame.angle = 180;
                    this.fireDummy.addChild(flame);
                }
            };
            goRocket.prototype.onTimeToFireSet = function (time) {
                this.timetoFire = time;
                this.needFlame = true;
            };
            goRocket.prototype.onFired = function () {
                this.body.static = true;
                this.body.velocity.y = 0;
                this.body.clearShapes();
                this.tBack.visible = false;
                this.boom.visible = true;
                this.boom.play('play');
            };
            goRocket.prototype.update = function () {
                if (this.tBack.visible) {
                    if (!this.fire) {
                        if (this.timetoFire >= 0) {
                            if (this.timetoFire > 0) {
                                this.timetoFire--;
                            }
                            else {
                                this.timetoFire = -1;
                                this.onFire();
                            }
                        }
                    }
                }
                if (this.tBack.visible) {
                    if (!this.body.static) {
                        this.body.velocity.y = -300;
                    }
                    if (this.y <= 30) {
                        this.onFired();
                    }
                }
            };
            return goRocket;
        }(Phaser.Sprite));
        Client.goRocket = goRocket;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goWater = (function (_super) {
            __extends(goWater, _super);
            function goWater(game, x, y, fd) {
                var _this = _super.call(this, game, x, y) || this;
                _this.onCreate = new Phaser.Signal;
                var useWorld = 0;
                _this.data.name = 'water';
                _this.game.physics.p2.enable(_this);
                _this.body.clearShapes();
                _this.body.setRectangle(20, 20, 15, 30);
                _this.body.static = true;
                _this.body.data.shapes[0].sensor = true;
                _this.emitter = new Phaser.Particles.Arcade.Emitter(_this.game, 0, 0, 100);
                _this.game.add.existing(_this.emitter);
                _this.game.world.moveDown(_this.emitter);
                _this.emitter.makeParticles('gameAtlas', 'water_particle0001');
                _this.emitter.gravity = 200;
                _this.emitter.setAlpha(1, 0, 300);
                _this.emitter.setScale(5, 0, 5, 0, 300);
                return _this;
            }
            goWater.prototype.start = function () {
                this.emitter.start(false, 300, 10);
            };
            goWater.prototype.bulk = function () {
                this.kill();
                this.emitter.kill();
            };
            goWater.prototype.update = function () {
                var px = this.body.velocity.x;
                var py = this.body.velocity.y;
                px *= -1;
                py *= -1;
                this.emitter.minParticleSpeed.set(px, py);
                this.emitter.maxParticleSpeed.set(px, py);
                this.emitter.emitX = this.x + 30;
                this.emitter.emitY = this.y + 30;
                if (this.emitter) {
                    if (this.y > Config.GH) {
                        this.bulk();
                    }
                }
            };
            return goWater;
        }(Phaser.Sprite));
        Client.goWater = goWater;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goWaterSplash = (function (_super) {
            __extends(goWaterSplash, _super);
            function goWaterSplash(game, x, y, fd) {
                var _this = _super.call(this, game, x, y) || this;
                _this.timetoFire = -1;
                _this.needFlame = false;
                _this.fire = false;
                _this.objWater = [];
                var useWorld = 0;
                _this.game.physics.p2.enable(_this);
                _this.body.clearShapes();
                _this.body.setRectangle(20, 20, 15, 30);
                _this.body.static = true;
                _this.body.data.shapes[0].sensor = true;
                _this.data.name = 'waterBaloon';
                _this.fireDummy = fd;
                _this.tBack = new Phaser.Sprite(_this.game, 20, 25, 'gameAtlas', 'water_splash0001');
                _this.tBack.animations.add('play', Phaser.Animation.generateFrameNames('water_splash', 1, 26, '', 4), 60, false);
                _this.tBack.anchor.set(0.5);
                _this.addChild(_this.tBack);
                for (var i = 0; i < 10; i++) {
                    var pwater = new Client.goWater(_this.game, _this.x + uMath.random(-10, 10), _this.y + uMath.random(-10, 10), _this.fireDummy);
                    _this.fireDummy.addChild(pwater);
                    _this.objWater.push(pwater);
                }
                _this.game.add.tween(_this.tBack).to({ y: _this.tBack.y + 5 }, 1000, Phaser.Easing.Linear.None, true, 0, -1, true);
                _this.game.add.tween(_this.tBack).to({ angle: 10 }, 800, Phaser.Easing.Linear.None, true, 0, -1, true);
                return _this;
            }
            goWaterSplash.prototype.onFire = function () {
                if (!this.fire) {
                    this.fire = true;
                    this.data.name = 'fired';
                    this.tBack.play('play').onComplete.addOnce(this.Hide, this);
                    SndMng.sfxPlay(SndMng.SFX_WATER, 1);
                    for (var i = 0; i < this.objWater.length; i++) {
                        this.objWater[i].body.static = false;
                        this.objWater[i].body.velocity.x = 40 + (40 * i);
                        this.objWater[i].start();
                    }
                }
            };
            goWaterSplash.prototype.Hide = function () {
                this.game.add.tween(this.tBack).to({ y: this.tBack.y + 10 }, 500, Phaser.Easing.Linear.None, true);
                this.game.add.tween(this.tBack).to({ alpha: 0 }, 500, Phaser.Easing.Linear.None, true);
            };
            goWaterSplash.prototype.onTimeToFireSet = function (time) {
                this.timetoFire = time;
                this.needFlame = true;
            };
            goWaterSplash.prototype.onFired = function () {
                this.body.clearShapes();
                this.visible = false;
            };
            goWaterSplash.prototype.update = function () {
                if (this.visible) {
                    for (var i = 0; i < this.objWater.length; i++) {
                        this.objWater[i].update();
                    }
                    if (!this.fire) {
                        if (this.timetoFire >= 0) {
                            if (this.timetoFire > 0) {
                                this.timetoFire--;
                            }
                            else {
                                this.timetoFire = -1;
                                this.onFire();
                            }
                        }
                    }
                }
            };
            return goWaterSplash;
        }(Phaser.Sprite));
        Client.goWaterSplash = goWaterSplash;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goWaterSplashInvert = (function (_super) {
            __extends(goWaterSplashInvert, _super);
            function goWaterSplashInvert(game, x, y, fd) {
                var _this = _super.call(this, game, x, y) || this;
                _this.timetoFire = -1;
                _this.needFlame = false;
                _this.fire = false;
                _this.objWater = [];
                var useWorld = 0;
                _this.game.physics.p2.enable(_this);
                _this.body.clearShapes();
                _this.body.setRectangle(20, 20, 15, 30);
                _this.body.static = true;
                _this.body.data.shapes[0].sensor = true;
                _this.data.name = 'waterBaloon';
                _this.fireDummy = fd;
                _this.tBack = new Phaser.Sprite(_this.game, 20, 25, 'gameAtlas', 'water_splash0001');
                _this.tBack.scale.x = -1;
                _this.tBack.animations.add('play', Phaser.Animation.generateFrameNames('water_splash', 1, 26, '', 4), 60, false);
                _this.tBack.anchor.set(0.5);
                _this.addChild(_this.tBack);
                for (var i = 0; i < 10; i++) {
                    var pwater = new Client.goWater(_this.game, _this.x + uMath.random(-10, 10), _this.y + uMath.random(-10, 10), _this.fireDummy);
                    _this.fireDummy.addChild(pwater);
                    _this.objWater.push(pwater);
                }
                _this.game.add.tween(_this.tBack).to({ y: _this.tBack.y + 5 }, 1000, Phaser.Easing.Linear.None, true, 0, -1, true);
                _this.game.add.tween(_this.tBack).to({ angle: 10 }, 800, Phaser.Easing.Linear.None, true, 0, -1, true);
                return _this;
            }
            goWaterSplashInvert.prototype.onFire = function () {
                if (!this.fire) {
                    this.fire = true;
                    this.data.name = 'fired';
                    this.tBack.play('play').onComplete.addOnce(this.Hide, this);
                    SndMng.sfxPlay(SndMng.SFX_WATER, 1);
                    for (var i = 0; i < this.objWater.length; i++) {
                        this.objWater[i].body.static = false;
                        this.objWater[i].body.velocity.x = -40 - (40 * i);
                        this.objWater[i].start();
                    }
                }
            };
            goWaterSplashInvert.prototype.Hide = function () {
                this.game.add.tween(this.tBack).to({ y: this.tBack.y + 10 }, 500, Phaser.Easing.Linear.None, true);
                this.game.add.tween(this.tBack).to({ alpha: 0 }, 500, Phaser.Easing.Linear.None, true);
            };
            goWaterSplashInvert.prototype.onTimeToFireSet = function (time) {
                this.timetoFire = time;
                this.needFlame = true;
            };
            goWaterSplashInvert.prototype.onFired = function () {
                this.body.clearShapes();
                this.visible = false;
            };
            goWaterSplashInvert.prototype.update = function () {
                if (this.visible) {
                    for (var i = 0; i < this.objWater.length; i++) {
                        this.objWater[i].update();
                    }
                    if (!this.fire) {
                        if (this.timetoFire >= 0) {
                            if (this.timetoFire > 0) {
                                this.timetoFire--;
                            }
                            else {
                                this.timetoFire = -1;
                                this.onFire();
                            }
                        }
                    }
                }
            };
            return goWaterSplashInvert;
        }(Phaser.Sprite));
        Client.goWaterSplashInvert = goWaterSplashInvert;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var goWaterTiles = (function (_super) {
            __extends(goWaterTiles, _super);
            function goWaterTiles(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                var useWorld = 0;
                _this.game.physics.p2.enable(_this, true);
                _this.body.clearShapes();
                _this.body.setRectangle(30, 30, 15, 30);
                _this.body.static = true;
                _this.body.data.shapes[0].sensor = true;
                _this.data.name = 'waterTiles';
                return _this;
            }
            goWaterTiles.prototype.onFire = function () {
                this.tBack.visible = false;
                this.body.clearShapes();
                Score.coint++;
                SndMng.sfxPlay(SndMng.SFX_PICK_UP, 1);
            };
            goWaterTiles.prototype.onTimeToFireSet = function (time) {
            };
            goWaterTiles.prototype.onFired = function () {
            };
            goWaterTiles.prototype.update = function () {
            };
            return goWaterTiles;
        }(Phaser.Sprite));
        Client.goWaterTiles = goWaterTiles;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var gsBoot = (function (_super) {
            __extends(gsBoot, _super);
            function gsBoot() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            gsBoot.prototype.preload = function () {
                this.load.atlasJSONArray('preloader_atlas', './assets/atlases/preloader_atlas.png', './assets/atlases/preloader_atlas.json');
            };
            gsBoot.prototype.create = function () {
                this.stage.setBackgroundColor(0x330033);
                this.input.maxPointers = 2;
                this.stage.disableVisibilityChange = true;
                ScaleManager.init(this.game, Config.DOM_PARENT_ID, Config.GW, Config.GH, Config.GSW, Config.GSH);
                uSaveData.Init();
                Params.isMacOS =
                    this.game.device.iOS ||
                        this.game.device.iPhone ||
                        this.game.device.iPhone4 ||
                        this.game.device.iPad ||
                        this.game.device.mobileSafari;
                this.time.events.add(100, this.onWaitComplete, this);
            };
            gsBoot.prototype.onWaitComplete = function () {
                this.game.state.start(States.PRELOADER, true, false);
            };
            return gsBoot;
        }(Phaser.State));
        Client.gsBoot = gsBoot;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var gsCDialog = (function (_super) {
            __extends(gsCDialog, _super);
            function gsCDialog() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            gsCDialog.prototype.create = function () {
                this.mainDummy = new Phaser.Sprite(this.game, Config.GW / 2, Config.GH / 2);
                this.mainDummy.anchor.set(0.5);
                this.add.existing(this.mainDummy);
                this.completeDialog = new Client.goCompleteDialog(this.game, -Config.GW / 2, -Config.GH / 2);
                this.completeDialog.imitationAfterShop();
                this.completeDialog.onNext.addOnce(this.onNextLevel, this);
                this.completeDialog.onRetry.addOnce(this.onNextLevel, this);
                this.completeDialog.onShop.addOnce(this.onShop, this);
                this.completeDialog.onLevelSelect.addOnce(this.onLevelSelect, this);
                this.mainDummy.addChild(this.completeDialog);
                this.btnMusic = new Client.guiBtn(this.game, 290, -240, 'menuAtlas', 'btn_music', 'hint_music', true);
                this.btnMusic.onClick.add(this.onClickMusic, this);
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
                this.mainDummy.addChild(this.btnMusic);
                this.btnSfx = new Client.guiBtn(this.game, 260, -240, 'menuAtlas', 'btn_sfx', 'hint_sfx', true);
                this.btnSfx.onClick.add(this.onClickSfx, this);
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
                this.mainDummy.addChild(this.btnSfx);
                this.changeScreen = new Phaser.Sprite(this.game, 0, 0, 'menuAtlas', 'change_screen');
                this.changeScreen.anchor.set(0.5);
                this.mainDummy.addChild(this.changeScreen);
                this.game.add.tween(this.changeScreen).to({ x: -1250 }, 200, Phaser.Easing.Linear.None, true, 100);
                SndMng.playMusic(SndMng.MUSIC_GAME, 1, 1);
            };
            gsCDialog.prototype.onLevelSelect = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: Config.GW / 2 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.goLevelSelect, this);
            };
            gsCDialog.prototype.onNextLevel = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: Config.GW / 2 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.goNextLevel, this);
            };
            gsCDialog.prototype.onShop = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: Config.GW / 2 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.goShop, this);
            };
            gsCDialog.prototype.goShop = function () {
                ShopData.openedShop = ShopData.withGame;
                this.game.state.start(States.SHOP, true, false);
            };
            gsCDialog.prototype.goLevelSelect = function () {
                this.game.state.start(States.LEVELSELECT, true, false);
            };
            gsCDialog.prototype.goNextLevel = function () {
                this.game.state.start(States.GAME, true, false);
            };
            gsCDialog.prototype.onClickMusic = function () {
                SndMng.setEnabledMusic(!SndMng.getEnabledMusic());
                if (SndMng.getEnabledMusic()) {
                    var oldMusic = SndMng.currentMusic;
                    SndMng.currentMusic = '';
                    SndMng.playMusic(oldMusic, 0, 1, 1000);
                }
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
            };
            gsCDialog.prototype.onClickSfx = function () {
                SndMng.setEnabledSfx(!SndMng.getEnabledSfx());
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
            };
            gsCDialog.prototype.onClickMenu = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.showMenu, this);
            };
            gsCDialog.prototype.showMenu = function () {
            };
            gsCDialog.prototype.update = function () {
            };
            return gsCDialog;
        }(Phaser.State));
        Client.gsCDialog = gsCDialog;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var gsCredits = (function (_super) {
            __extends(gsCredits, _super);
            function gsCredits() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            gsCredits.prototype.create = function () {
                this.mainDummy = new Phaser.Sprite(this.game, Config.GW / 2, Config.GH / 2);
                this.mainDummy.anchor.set(0.5);
                this.add.existing(this.mainDummy);
                this.background = new Phaser.Sprite(this.game, 0, 0, 'menuAtlas', 'bg_credits');
                this.background.anchor.set(0.5);
                this.mainDummy.addChild(this.background);
                this.btnMenu = new Phaser.Button(this.game, 0, 220, 'menuAtlas', this.onClickMenu, this, 'btn_menu0002', 'btn_menu0001');
                this.btnMenu.anchor.set(0.5);
                this.btnMenu.scale.set(0.8);
                this.mainDummy.addChild(this.btnMenu);
                this.btnMusic = new Client.guiBtn(this.game, 290, -240, 'menuAtlas', 'btn_music', 'hint_music', true);
                this.btnMusic.onClick.add(this.onClickMusic, this);
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
                this.mainDummy.addChild(this.btnMusic);
                this.btnSfx = new Client.guiBtn(this.game, 260, -240, 'menuAtlas', 'btn_sfx', 'hint_sfx', true);
                this.btnSfx.onClick.add(this.onClickSfx, this);
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
                this.mainDummy.addChild(this.btnSfx);
                this.changeScreen = new Phaser.Sprite(this.game, 0, 0, 'menuAtlas', 'change_screen');
                this.changeScreen.anchor.set(0.5);
                this.mainDummy.addChild(this.changeScreen);
                this.game.add.tween(this.changeScreen).to({ x: -1250 }, 200, Phaser.Easing.Linear.None, true, 100);
                SndMng.playMusic(SndMng.MUSIC_MENU, 1, 1);
            };
            gsCredits.prototype.onClickMusic = function () {
                SndMng.setEnabledMusic(!SndMng.getEnabledMusic());
                if (SndMng.getEnabledMusic()) {
                    var oldMusic = SndMng.currentMusic;
                    SndMng.currentMusic = '';
                    SndMng.playMusic(oldMusic, 0, 1, 1000);
                }
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
            };
            gsCredits.prototype.onClickSfx = function () {
                SndMng.setEnabledSfx(!SndMng.getEnabledSfx());
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
            };
            gsCredits.prototype.onClickMenu = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.showMenu, this);
            };
            gsCredits.prototype.showMenu = function () {
                this.game.state.start(States.MAINMENU, true, false);
            };
            gsCredits.prototype.update = function () {
            };
            return gsCredits;
        }(Phaser.State));
        Client.gsCredits = gsCredits;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var gsGame = (function (_super) {
            __extends(gsGame, _super);
            function gsGame() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            gsGame.prototype.destroy = function () {
            };
            gsGame.prototype.create = function () {
                this.destroy();
                var currentLevel = GlobalVar.selectLevel;
                if (GlobalVar.oldLevel != GlobalVar.selectLevel) {
                    GlobalVar.oldLevel = GlobalVar.selectLevel;
                    GlobalVar.replayCountLevel = 0;
                }
                else {
                    GlobalVar.replayCountLevel++;
                }
                Score.coint = 0;
                Score.maxCoint = 0;
                this.arrObject = new Array();
                this.map = new Array();
                for (var i = 0; i < 17; i++) {
                    this.map[i] = new Array();
                    for (var j = 0; j < 22; j++) {
                        this.map[i][j] = -1;
                    }
                }
                this.mainDummy = new Phaser.Sprite(this.game, 0, 0);
                this.add.existing(this.mainDummy);
                this.flamePDummy = new Phaser.Sprite(this.game, 0, 0);
                this.add.existing(this.flamePDummy);
                this.playerDummy = new Phaser.Sprite(this.game, 0, 0);
                this.add.existing(this.playerDummy);
                this.guiDummy = new Phaser.Sprite(this.game, 0, 0);
                this.add.existing(this.guiDummy);
                this.game.physics.startSystem(Phaser.Physics.P2JS);
                this.game.physics.p2.gravity.y = 900;
                this.game.physics.p2.restitution = 0;
                this.game.physics.p2.onBeginContact.add(this.ContactListeners, this);
                this.backGround = new Client.goBackground(this.game, Config.GW / 2, Config.GH / 2);
                this.mainDummy.addChild(this.backGround);
                var json = JSON.parse(LevelData['LEVEL' + currentLevel + 'DATA']);
                for (var l = 0; l <= 6; l++) {
                    for (var i = 0; i <= 21; i++) {
                        for (var j = 0; j < 17; j++) {
                            this.buildLevel(json['layer_' + l + '_' + i][j], 0 + i * 30, 0 + j * 30, l);
                        }
                    }
                }
                this.assignObject();
                SndMng.playMusic(SndMng.MUSIC_GAME, 1, 1);
                this.panel = new Phaser.Sprite(this.game, 0, 0, 'gameAtlas', 'panel');
                this.guiDummy.addChild(this.panel);
                this.lvlNumber = new Phaser.BitmapText(this.game, 200, 20, 'myFont', '', 20);
                this.lvlNumber.text = 'LEVEL ' + currentLevel + '/33';
                this.lvlNumber.anchor.set(0.5);
                this.guiDummy.addChild(this.lvlNumber);
                this.coinNumber = new Phaser.BitmapText(this.game, 480, 20, 'myFont', '', 20);
                this.coinNumber.text = Score.coint + '/5';
                this.coinNumber.anchor.set(0.5);
                this.guiDummy.addChild(this.coinNumber);
                this.btnMusic = new Client.guiBtn(this.game, 640, 15, 'gameAtlas', 'btn_music', 'hint_music', true);
                this.btnMusic.onClick.add(this.onClickMusic, this);
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
                this.guiDummy.addChild(this.btnMusic);
                this.btnSfx = new Client.guiBtn(this.game, 610, 15, 'gameAtlas', 'btn_sfx', 'hint_sfx', true);
                this.btnSfx.onClick.add(this.onClickSfx, this);
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
                this.guiDummy.addChild(this.btnSfx);
                this.btnPause = new Client.guiBtn(this.game, 580, 15, 'gameAtlas', 'btn_pause', 'hint_pause', true);
                this.btnPause.onClick.add(this.onClickPause, this);
                this.guiDummy.addChild(this.btnPause);
                this.btnRestart = new Client.guiBtn(this.game, 550, 15, 'gameAtlas', 'btn_restart', 'hint_restart', true);
                this.btnRestart.onClick.add(this.onClickrestart, this);
                this.guiDummy.addChild(this.btnRestart);
                this.hint = new Phaser.Sprite(this.game, LevelData.HINT_X[currentLevel - 1] - 30, LevelData.HINT_Y[currentLevel - 1] + 50, 'gameAtlas', 'hint0001');
                this.hint.animations.add('play', Phaser.Animation.generateFrameNames('hint', 1, 33, '', 4), 60, false);
                this.hint.animations.currentAnim.frame = currentLevel - 1;
                this.guiDummy.addChild(this.hint);
                if (!this.game.device.desktop) {
                    this.btnLeft = new Phaser.Sprite(this.game, 137 / 2, Config.GH - 137 / 2, 'gameAtlas', 'dpad');
                    this.btnLeft.anchor.set(0.5);
                    this.guiDummy.addChild(this.btnLeft);
                    this.btnLeft.inputEnabled = true;
                    this.btnLeft.events.onInputDown.add(this.onClickLeftPad, this);
                    this.btnLeft.events.onInputUp.add(this.unClickLeftPad, this);
                    this.btnRight = new Phaser.Sprite(this.game, 137 / 2 + 137, Config.GH - 137 / 2, 'gameAtlas', 'dpad');
                    this.btnRight.anchor.set(0.5);
                    this.btnRight.angle = 180;
                    this.guiDummy.addChild(this.btnRight);
                    this.btnRight.inputEnabled = true;
                    this.btnRight.events.onInputDown.add(this.onClickRightPad, this);
                    this.btnRight.events.onInputUp.add(this.unClickRightPad, this);
                    this.btnUp = new Phaser.Sprite(this.game, Config.GW - 137 / 2, Config.GH - 137 / 2, 'gameAtlas', 'dpad');
                    this.btnUp.anchor.set(0.5);
                    this.btnUp.angle = 90;
                    this.guiDummy.addChild(this.btnUp);
                    this.btnUp.inputEnabled = true;
                    this.btnUp.events.onInputDown.add(this.onClickJumpPad, this);
                    this.btnUp.events.onInputUp.add(this.unClickJumpPad, this);
                }
                if (GlobalVar.replayCountLevel >= 4) {
                    this.btnSkip = new Phaser.Button(this.game, 110, 40, 'gameAtlas', this.onSkipLevel, this, 'btn_skip0002', 'btn_skip0001');
                    this.btnSkip.anchor.set(0.5);
                    this.game.add.tween(this.btnSkip.scale).to({ x: 1.2 }, 400, Phaser.Easing.Linear.None, true, 0, -1, true);
                    this.game.add.tween(this.btnSkip.scale).to({ y: 1.2 }, 400, Phaser.Easing.Linear.None, true, 0, -1, true);
                    this.guiDummy.addChild(this.btnSkip);
                }
                this.completeDialog = new Client.goCompleteDialog(this.game, 0, -Config.GH);
                this.completeDialog.visible = false;
                this.guiDummy.addChild(this.completeDialog);
                this.restartDialog = new Client.goRestartDialog(this.game, 0, -Config.GH);
                this.restartDialog.visible = false;
                this.guiDummy.addChild(this.restartDialog);
                this.pauseDialog = new Client.goPauseDialog(this.game, 0, -Config.GH);
                this.pauseDialog.visible = false;
                this.guiDummy.addChild(this.pauseDialog);
                this.changeScreen = new Phaser.Sprite(this.game, Config.GW / 2, Config.GH / 2, 'menuAtlas', 'change_screen');
                this.changeScreen.anchor.set(0.5);
                this.guiDummy.addChild(this.changeScreen);
                this.game.add.tween(this.changeScreen).to({ x: -800 }, 200, Phaser.Easing.Linear.None, true, 100);
            };
            gsGame.prototype.onSkipLevel = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: Config.GW / 2 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.goSkipLevel, this);
            };
            gsGame.prototype.goSkipLevel = function () {
                uSaveData.setItem('lvl' + (GlobalVar.selectLevel - 1), 'true');
                uSaveData.saveData();
                GlobalVar.selectLevel++;
                this.game.state.start(States.GAME, true, false);
            };
            gsGame.prototype.onClickLeftPad = function () {
                this.player.downLeft();
            };
            gsGame.prototype.unClickLeftPad = function () {
                this.player.upLeft();
            };
            gsGame.prototype.onClickRightPad = function () {
                this.player.downRight();
            };
            gsGame.prototype.unClickRightPad = function () {
                this.player.upRight();
            };
            gsGame.prototype.onClickJumpPad = function () {
                this.player.downJump();
            };
            gsGame.prototype.unClickJumpPad = function () {
                this.player.upJump();
            };
            gsGame.prototype.onClickMusic = function () {
                SndMng.setEnabledMusic(!SndMng.getEnabledMusic());
                if (SndMng.getEnabledMusic()) {
                    var oldMusic = SndMng.currentMusic;
                    SndMng.currentMusic = '';
                    SndMng.playMusic(oldMusic, 0, 1, 1000);
                }
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
            };
            gsGame.prototype.onClickrestart = function () {
                this.game.add.tween(this.restartDialog).to({ y: 0 }, 200, Phaser.Easing.Linear.None, true);
                this.restartDialog.visible = true;
                this.restartDialog.onYes.addOnce(this.onNextLevel, this);
                this.restartDialog.onNo.addOnce(this.onCloseRestartDialog, this);
                this.restartDialog.inputEnabled = true;
                this.restartDialog.newShow();
            };
            gsGame.prototype.onCloseRestartDialog = function () {
                this.game.add.tween(this.restartDialog).to({ y: -Config.GH }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.hideRestartDialog, this);
                this.restartDialog.inputEnabled = false;
            };
            gsGame.prototype.hideRestartDialog = function () {
                this.restartDialog.visible = false;
            };
            gsGame.prototype.onClickPause = function () {
                this.game.add.tween(this.pauseDialog).to({ y: 0 }, 200, Phaser.Easing.Linear.None, true);
                this.pauseDialog.visible = true;
                this.pauseDialog.onResume.addOnce(this.onClosePauseDialog, this);
                this.pauseDialog.onRetry.addOnce(this.onNextLevel, this);
                this.pauseDialog.onLevelSelect.addOnce(this.onLevelSelect, this);
                this.pauseDialog.onMainMenu.addOnce(this.onMainMenu, this);
                this.pauseDialog.inputEnabled = true;
                this.pauseDialog.newShow();
            };
            gsGame.prototype.onMainMenu = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: Config.GW / 2 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.goMainMenu, this);
            };
            gsGame.prototype.goMainMenu = function () {
                this.game.state.start(States.MAINMENU, true, false);
            };
            gsGame.prototype.onClosePauseDialog = function () {
                this.game.add.tween(this.pauseDialog).to({ y: -Config.GH }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.hideRestartDialog, this);
                this.pauseDialog.inputEnabled = false;
            };
            gsGame.prototype.onClickSfx = function () {
                SndMng.setEnabledSfx(!SndMng.getEnabledSfx());
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
            };
            gsGame.prototype.ContactListeners = function (body, bodyB, shapeA, shapeB, equation) {
                if (bodyB && body) {
                    if (bodyB.parent && body.parent) {
                        if (bodyB.parent.sprite && body.parent.sprite) {
                            if (bodyB.parent.sprite.data.name == 'fire' && body.parent.sprite.data.name == 'player') {
                                if (bodyB.parent.sprite.constructor.name != 'goConTile') {
                                    bodyB.parent.sprite.onFire(60);
                                    this.CheckFlame(bodyB.parent.sprite.x, bodyB.parent.sprite.y, 0);
                                }
                            }
                            if (body.parent.sprite.data.name == 'fire' && bodyB.parent.sprite.data.name == 'player') {
                                if (body.parent.sprite.constructor.name != 'goConTile') {
                                    body.parent.sprite.onFire(60);
                                    this.CheckFlame(body.parent.sprite.x, body.parent.sprite.y, 0);
                                }
                            }
                        }
                    }
                }
                if (bodyB && body) {
                    if (bodyB.parent && body.parent) {
                        if (bodyB.parent.sprite && body.parent.sprite) {
                            if (bodyB.parent.sprite.data.name == 'waterBaloon' && body.parent.sprite.data.name == 'player') {
                                bodyB.parent.sprite.onFire(60);
                            }
                            if (body.parent.sprite.data.name == 'waterBaloon' && bodyB.parent.sprite.data.name == 'player') {
                                body.parent.sprite.onFire(60);
                            }
                        }
                    }
                }
                if (bodyB && body) {
                    if (bodyB.parent && body.parent) {
                        if (bodyB.parent.sprite && body.parent.sprite) {
                            if (bodyB.parent.sprite.data.name == 'fire' && body.parent.sprite.data.name == 'water') {
                                if (bodyB.parent.sprite.constructor.name != 'goConTile') {
                                    bodyB.parent.sprite.stopFire();
                                    this.map[(bodyB.parent.sprite.y - 15) / 30][bodyB.parent.sprite.x / 30] = 0;
                                    body.parent.sprite.bulk();
                                }
                                body.parent.sprite.bulk();
                            }
                            if (body.parent.sprite.data.name == 'fire' && bodyB.parent.sprite.data.name == 'water') {
                                if (body.parent.sprite.constructor.name != 'goConTile') {
                                    body.parent.sprite.stopFire();
                                    this.map[(body.parent.sprite.y - 15) / 30][body.parent.sprite.x / 30] = 0;
                                    bodyB.parent.sprite.bulk();
                                }
                                bodyB.parent.sprite.bulk();
                            }
                        }
                    }
                }
                if (bodyB && body) {
                    if (bodyB.parent && body.parent) {
                        if (bodyB.parent.sprite && body.parent.sprite) {
                            if (bodyB.parent.sprite.data.name == 'bounce' && body.parent.sprite.data.name == 'player') {
                                var p = body.position[1] - bodyB.position[1];
                                if (p > -0.5) {
                                    body.parent.sprite.body.velocity.y = -600;
                                    bodyB.parent.sprite.jumpAnim();
                                }
                                bodyB.parent.sprite.onFire(120);
                                this.CheckFlame(bodyB.parent.sprite.x, bodyB.parent.sprite.y, 0);
                            }
                            if (body.parent.sprite.data.name == 'bounce' && bodyB.parent.sprite.data.name == 'player') {
                                var p = bodyB.position[1] - body.position[1];
                                if (p > -0.5) {
                                    bodyB.parent.sprite.body.velocity.y = -600;
                                    body.parent.sprite.jumpAnim();
                                }
                                body.parent.sprite.onFire(120);
                                this.CheckFlame(body.parent.sprite.x, body.parent.sprite.y, 0);
                            }
                        }
                    }
                }
                if (bodyB && body) {
                    if (bodyB.parent && body.parent) {
                        if (bodyB.parent.sprite && body.parent.sprite) {
                            if (bodyB.parent.sprite.data.name == 'exit' && body.parent.sprite.data.name == 'player') {
                                bodyB.parent.sprite.onFire();
                                body.parent.sprite.complete();
                            }
                            if (body.parent.sprite.data.name == 'exit' && bodyB.parent.sprite.data.name == 'player') {
                                body.parent.sprite.onFire();
                                bodyB.parent.sprite.complete();
                            }
                        }
                    }
                }
                if (bodyB && body) {
                    if (bodyB.parent && body.parent) {
                        if (bodyB.parent.sprite && body.parent.sprite) {
                            if (bodyB.parent.sprite.data.name == 'coin' && body.parent.sprite.data.name == 'player') {
                                bodyB.parent.sprite.onFire();
                            }
                            if (body.parent.sprite.data.name == 'coin' && bodyB.parent.sprite.data.name == 'player') {
                                body.parent.sprite.onFire();
                            }
                        }
                    }
                }
                if (bodyB && body) {
                    if (bodyB.parent && body.parent) {
                        if (bodyB.parent.sprite && body.parent.sprite) {
                            if (bodyB.parent.sprite.data.name == 'fire' && body.parent.sprite.data.name == 'fired') {
                                bodyB.parent.sprite.onFire();
                                this.CheckFlame(bodyB.parent.sprite.x, bodyB.parent.sprite.y, 0);
                                body.parent.sprite.onFired();
                            }
                            if (body.parent.sprite.data.name == 'fire' && bodyB.parent.sprite.data.name == 'fired') {
                                body.parent.sprite.onFire();
                                this.CheckFlame(body.parent.sprite.x, body.parent.sprite.y, 0);
                                bodyB.parent.sprite.onFired();
                            }
                        }
                    }
                }
            };
            gsGame.prototype.FireBlock = function (tx, ty, index) {
                this.map[tx][ty] = -1;
                for (var i = 0; i < this.arrObject.length; i++) {
                    if (ty * 30 == this.arrObject[i].x && (tx * 30) + 15 == this.arrObject[i].y) {
                        this.arrObject[i].onTimeToFireSet(index * 15);
                    }
                }
            };
            gsGame.prototype.CheckFlame = function (tx, ty, time) {
                var ttime = time;
                var end = false;
                var sX = Phaser.Math.roundTo(tx / 30);
                var sY = Phaser.Math.roundTo((ty - 15) / 30);
                var objMapWave = new Array();
                for (var i = 0; i < 17; i++) {
                    objMapWave[i] = new Array();
                    for (var j = 0; j < 22; j++) {
                        objMapWave[i][j] = this.map[i][j];
                    }
                }
                var i = 0;
                var wave = 1;
                objMapWave[sY][sX] = wave;
                while (!end) {
                    wave++;
                    end = true;
                    for (var i = 0; i < 17; i++) {
                        for (var j = 0; j < 22; j++) {
                            if (objMapWave[i][j] == (wave - 1)) {
                                if (i > 0) {
                                    if (objMapWave[i - 1][j] == 0) {
                                        objMapWave[i - 1][j] = wave;
                                        this.FireBlock(i - 1, j, wave);
                                        end = false;
                                    }
                                }
                                if (i < 16) {
                                    if (objMapWave[i + 1][j] == 0) {
                                        objMapWave[i + 1][j] = wave;
                                        this.FireBlock(i + 1, j, wave);
                                        end = false;
                                    }
                                }
                                if (j > 0) {
                                    if (objMapWave[i][j - 1] == 0) {
                                        objMapWave[i][j - 1] = wave;
                                        this.FireBlock(i, j - 1, wave);
                                        end = false;
                                    }
                                }
                                if (j < 21) {
                                    if (objMapWave[i][j + 1] == 0) {
                                        objMapWave[i][j + 1] = wave;
                                        this.FireBlock(i, j + 1, wave);
                                        end = false;
                                    }
                                }
                            }
                        }
                    }
                    if (wave > (17 * 22)) {
                        end = true;
                    }
                }
            };
            gsGame.prototype.buildLevel = function (num, posX, posY, layer) {
                var obj;
                posY += 15;
                if (layer == 1) {
                    if (num == 7 || num == 4) {
                        obj = new Client.goConTile(this.game, posX, posY);
                        this.mainDummy.addChild(obj);
                        this.arrObject.push(obj);
                    }
                    if (num == 1 || num == 10 || num == 13 || num == 8 || num == 9 || num == 14) {
                        obj = new Client.goFireTile(this.game, posX, posY, this.flamePDummy);
                        this.mainDummy.addChild(obj);
                        this.arrObject.push(obj);
                        this.map[(posY - 15) / 30][posX / 30] = 0;
                    }
                }
                if (layer == 2) {
                    if (num == 12) {
                        obj = new Client.goGate(this.game, posX, posY);
                        this.mainDummy.addChild(obj);
                        this.arrObject.push(obj);
                    }
                    if (num == 14) {
                        obj = new Client.goGateButton(this.game, posX, posY, this.flamePDummy);
                        this.mainDummy.addChild(obj);
                        this.arrObject.push(obj);
                        this.map[(posY - 15) / 30][posX / 30] = 0;
                    }
                    if (num == 11) {
                        obj = new Client.goRocket(this.game, posX, posY);
                        this.mainDummy.addChild(obj);
                        this.arrObject.push(obj);
                        this.map[(posY - 15) / 30][posX / 30] = 0;
                    }
                    if (num == 1) {
                        obj = new Client.goExitTile(this.game, posX, posY);
                        this.mainDummy.addChild(obj);
                        this.arrObject.push(obj);
                        this.map[(posY - 15) / 30][posX / 30] = 0;
                    }
                    if (num == 13) {
                        obj = new Client.goGate(this.game, posX, posY);
                        obj.Open();
                        this.mainDummy.addChild(obj);
                        this.arrObject.push(obj);
                    }
                    if (num == 7) {
                        obj = new Client.goBounce(this.game, posX, posY);
                        this.mainDummy.addChild(obj);
                        this.arrObject.push(obj);
                        this.map[(posY - 15) / 30][posX / 30] = 0;
                    }
                    if (num == 15) {
                        obj = new Client.goWaterSplash(this.game, posX, posY, this.flamePDummy);
                        this.mainDummy.addChild(obj);
                        this.arrObject.push(obj);
                    }
                    if (num == 16) {
                        obj = new Client.goWaterSplashInvert(this.game, posX, posY, this.flamePDummy);
                        this.mainDummy.addChild(obj);
                        this.arrObject.push(obj);
                    }
                }
                if (layer == 5) {
                    if (num == 1) {
                        this.player = new Client.goPlayer(this.game, posX, posY);
                        this.player.onComplete.addOnce(this.ShowCompleteDialog, this);
                        this.player.onDeath.addOnce(this.onNextLevel, this);
                        this.playerDummy.addChild(this.player);
                        this.player.addFlame(this.flamePDummy);
                    }
                }
                if (layer == 6) {
                    if (num == 1) {
                        obj = new Client.goCoinTile(this.game, posX, posY);
                        this.mainDummy.addChild(obj);
                        this.arrObject.push(obj);
                        Score.maxCoint++;
                    }
                }
            };
            gsGame.prototype.assignObject = function () {
                for (var i = 0; i < this.arrObject.length; i++) {
                    if (this.arrObject[i].constructor.name == 'goGateButton') {
                        for (var j = 0; j < this.arrObject.length; j++) {
                            if (this.arrObject[j].constructor.name == 'goGate') {
                                this.arrObject[i].addOpenObj(this.arrObject[j]);
                            }
                        }
                    }
                }
            };
            gsGame.prototype.ShowCompleteDialog = function () {
                this.completeDialog.visible = true;
                this.completeDialog.update();
                this.completeDialog.onNext.addOnce(this.onNextLevel, this);
                this.completeDialog.onRetry.addOnce(this.onNextLevel, this);
                this.completeDialog.onShop.addOnce(this.onShop, this);
                this.completeDialog.onLevelSelect.addOnce(this.onLevelSelect, this);
                SndMng.sfxPlay(SndMng.SFX_COMPLETE, 1);
                this.game.add.tween(this.completeDialog).to({ y: 0 }, 200, Phaser.Easing.Linear.None, true);
            };
            gsGame.prototype.onLevelSelect = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: Config.GW / 2 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.goLevelSelect, this);
            };
            gsGame.prototype.onNextLevel = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: Config.GW / 2 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.goNextLevel, this);
            };
            gsGame.prototype.onShop = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: Config.GW / 2 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.goShop, this);
            };
            gsGame.prototype.goShop = function () {
                ShopData.openedShop = ShopData.withGame;
                this.game.state.start(States.SHOP, true, false);
            };
            gsGame.prototype.goLevelSelect = function () {
                this.game.state.start(States.LEVELSELECT, true, false);
            };
            gsGame.prototype.goNextLevel = function () {
                this.game.state.start(States.GAME, true, false);
            };
            gsGame.prototype.update = function () {
                if (!this.completeDialog.visible) {
                    this.coinNumber.text = Score.coint + '/' + Score.maxCoint;
                    this.player.update();
                    for (var i = 0; i < this.arrObject.length; i++) {
                        this.arrObject[i].update();
                    }
                }
            };
            return gsGame;
        }(Phaser.State));
        Client.gsGame = gsGame;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var gsHelp = (function (_super) {
            __extends(gsHelp, _super);
            function gsHelp() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            gsHelp.prototype.create = function () {
                this.mainDummy = new Phaser.Sprite(this.game, Config.GW / 2, Config.GH / 2);
                this.mainDummy.anchor.set(0.5);
                this.add.existing(this.mainDummy);
                this.background = new Phaser.Sprite(this.game, 0, 0, 'menuAtlas', 'bg_help');
                this.background.anchor.set(0.5);
                this.mainDummy.addChild(this.background);
                this.btnMenu = new Phaser.Button(this.game, 0, 220, 'menuAtlas', this.onClickMenu, this, 'btn_menu0002', 'btn_menu0001');
                this.btnMenu.anchor.set(0.5);
                this.btnMenu.scale.set(0.8);
                this.mainDummy.addChild(this.btnMenu);
                this.btnMusic = new Client.guiBtn(this.game, 290, -240, 'menuAtlas', 'btn_music', 'hint_music', true);
                this.btnMusic.onClick.add(this.onClickMusic, this);
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
                this.mainDummy.addChild(this.btnMusic);
                this.btnSfx = new Client.guiBtn(this.game, 260, -240, 'menuAtlas', 'btn_sfx', 'hint_sfx', true);
                this.btnSfx.onClick.add(this.onClickSfx, this);
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
                this.mainDummy.addChild(this.btnSfx);
                this.changeScreen = new Phaser.Sprite(this.game, 0, 0, 'menuAtlas', 'change_screen');
                this.changeScreen.anchor.set(0.5);
                this.mainDummy.addChild(this.changeScreen);
                this.game.add.tween(this.changeScreen).to({ x: -1250 }, 200, Phaser.Easing.Linear.None, true, 100);
                SndMng.playMusic(SndMng.MUSIC_MENU, 1, 1);
            };
            gsHelp.prototype.onClickMusic = function () {
                SndMng.setEnabledMusic(!SndMng.getEnabledMusic());
                if (SndMng.getEnabledMusic()) {
                    var oldMusic = SndMng.currentMusic;
                    SndMng.currentMusic = '';
                    SndMng.playMusic(oldMusic, 0, 1, 1000);
                }
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
            };
            gsHelp.prototype.onClickSfx = function () {
                SndMng.setEnabledSfx(!SndMng.getEnabledSfx());
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
            };
            gsHelp.prototype.onClickMenu = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.showMenu, this);
            };
            gsHelp.prototype.showMenu = function () {
                this.game.state.start(States.MAINMENU, true, false);
            };
            gsHelp.prototype.update = function () {
            };
            return gsHelp;
        }(Phaser.State));
        Client.gsHelp = gsHelp;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var gsLevelSelect = (function (_super) {
            __extends(gsLevelSelect, _super);
            function gsLevelSelect() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            gsLevelSelect.prototype.create = function () {
                this.mainDummy = new Phaser.Sprite(this.game, Config.GW / 2, Config.GH / 2);
                this.mainDummy.anchor.set(0.5);
                this.add.existing(this.mainDummy);
                this.background = new Phaser.Sprite(this.game, 0, 0, 'menuAtlas', 'bg_select');
                this.background.anchor.set(0.5);
                this.mainDummy.addChild(this.background);
                this.btnMenu = new Phaser.Button(this.game, 100, 220, 'menuAtlas', this.onClickMenu, this, 'btn_menu0002', 'btn_menu0001');
                this.btnMenu.anchor.set(0.5);
                this.btnMenu.scale.set(0.8);
                this.mainDummy.addChild(this.btnMenu);
                this.btnShop = new Phaser.Button(this.game, -100, 220, 'menuAtlas', this.onClickShop, this, 'btn_shop0002', 'btn_shop0001');
                this.btnShop.anchor.set(0.5);
                this.btnShop.scale.set(0.8);
                this.mainDummy.addChild(this.btnShop);
                this.btnMusic = new Client.guiBtn(this.game, 290, -240, 'menuAtlas', 'btn_music', 'hint_music', true);
                this.btnMusic.onClick.add(this.onClickMusic, this);
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
                this.mainDummy.addChild(this.btnMusic);
                this.btnSfx = new Client.guiBtn(this.game, 260, -240, 'menuAtlas', 'btn_sfx', 'hint_sfx', true);
                this.btnSfx.onClick.add(this.onClickSfx, this);
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
                this.mainDummy.addChild(this.btnSfx);
                this.levelButtons = new Array();
                var numlevel = 1;
                var passLevel = 0;
                for (var j = 0; j < 5; j++) {
                    for (var i = 0; i < 7; i++) {
                        if (j == 4) {
                            if (i > 0 && i < 6) {
                                this.levelButtons[this.levelButtons.length] = new Client.levelBtn(this.game, -183 + (i * 61), -100 + (j * 61));
                                this.levelButtons[this.levelButtons.length - 1].tLevel = numlevel;
                                this.mainDummy.addChild(this.levelButtons[this.levelButtons.length - 1]);
                                this.levelButtons[this.levelButtons.length - 1].anchor.set(0.5);
                                this.levelButtons[this.levelButtons.length - 1].onClick.add(this.selectLevel, this);
                                numlevel++;
                            }
                        }
                        else {
                            this.levelButtons[this.levelButtons.length] = new Client.levelBtn(this.game, -183 + (i * 61), -100 + (j * 61));
                            this.levelButtons[this.levelButtons.length - 1].tLevel = numlevel;
                            this.mainDummy.addChild(this.levelButtons[this.levelButtons.length - 1]);
                            this.levelButtons[this.levelButtons.length - 1].anchor.set(0.5);
                            this.levelButtons[this.levelButtons.length - 1].onClick.add(this.selectLevel, this);
                            numlevel++;
                        }
                        var pass = uSaveData.getItem('lvl' + (this.levelButtons.length - 1));
                        var done = uSaveData.getItem('lvl' + (this.levelButtons.length - 1) + 'done');
                        var crystal = uSaveData.getItem('lvl' + (this.levelButtons.length - 1) + 'crystal');
                        if (pass == 'true') {
                            this.levelButtons[this.levelButtons.length - 1].setUnlock(true);
                            passLevel++;
                        }
                        if (done == 'true') {
                            this.levelButtons[this.levelButtons.length - 1].setDone();
                        }
                        if (crystal == 'true') {
                            this.levelButtons[this.levelButtons.length - 1].setCrystal();
                        }
                    }
                }
                this.levelButtons[passLevel].setUnlock(true);
                this.changeScreen = new Phaser.Sprite(this.game, 0, 0, 'menuAtlas', 'change_screen');
                this.changeScreen.anchor.set(0.5);
                this.mainDummy.addChild(this.changeScreen);
                this.game.add.tween(this.changeScreen).to({ x: -1250 }, 200, Phaser.Easing.Linear.None, true, 100);
                SndMng.playMusic(SndMng.MUSIC_MENU, 1, 1);
            };
            gsLevelSelect.prototype.onClickMusic = function () {
                SndMng.setEnabledMusic(!SndMng.getEnabledMusic());
                if (SndMng.getEnabledMusic()) {
                    var oldMusic = SndMng.currentMusic;
                    SndMng.currentMusic = '';
                    SndMng.playMusic(oldMusic, 0, 1, 1000);
                }
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
            };
            gsLevelSelect.prototype.onClickSfx = function () {
                SndMng.setEnabledSfx(!SndMng.getEnabledSfx());
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
            };
            gsLevelSelect.prototype.onClickShop = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.showShop, this);
            };
            gsLevelSelect.prototype.showShop = function () {
                ShopData.openedShop = ShopData.withMenu;
                this.game.state.start(States.SHOP, true, false);
            };
            gsLevelSelect.prototype.onClickMenu = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.showMenu, this);
            };
            gsLevelSelect.prototype.showMenu = function () {
                this.game.state.start(States.MAINMENU, true, false);
            };
            gsLevelSelect.prototype.selectLevel = function (blevel) {
                if (this.levelButtons[blevel - 1].unlock) {
                    GlobalVar.selectLevel = blevel;
                    this.changeScreen.x = 1250;
                    this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.showGame, this);
                }
            };
            gsLevelSelect.prototype.showGame = function () {
                this.game.state.start(States.GAME, true, false);
            };
            gsLevelSelect.prototype.update = function () {
            };
            return gsLevelSelect;
        }(Phaser.State));
        Client.gsLevelSelect = gsLevelSelect;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var gsMainMenu = (function (_super) {
            __extends(gsMainMenu, _super);
            function gsMainMenu() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            gsMainMenu.prototype.create = function () {
                this.mainDummy = new Phaser.Sprite(this.game, Config.GW / 2, Config.GH / 2);
                this.mainDummy.anchor.set(0.5);
                this.add.existing(this.mainDummy);
                this.background = new Phaser.Sprite(this.game, 0, 0, 'menuAtlas', 'bg');
                this.background.anchor.set(0.5);
                this.mainDummy.addChild(this.background);
                this.logo = new Phaser.Sprite(this.game, 0, -682, 'menuAtlas', 'logo');
                this.logo.anchor.set(0.5);
                this.mainDummy.addChild(this.logo);
                this.game.add.tween(this.logo).to({ y: -182 }, 300, Phaser.Easing.Elastic.Out, true);
                this.princess = new Phaser.Sprite(this.game, -720, 545, 'menuAtlas', 'princess');
                this.princess.anchor.set(0.5);
                this.mainDummy.addChild(this.princess);
                this.game.add.tween(this.princess).to({ x: -220 }, 300, Phaser.Easing.Linear.None, true, 200);
                this.game.add.tween(this.princess).to({ y: 45 }, 300, Phaser.Easing.Linear.None, true, 200);
                this.adventureTime = new Phaser.Sprite(this.game, 0, 210, 'menuAtlas', 'adventure_time');
                this.adventureTime.anchor.set(0.5);
                this.adventureTime.scale.set(0);
                this.mainDummy.addChild(this.adventureTime);
                this.game.add.tween(this.adventureTime.scale).to({ x: 1 }, 100, Phaser.Easing.Linear.None, true, 800);
                this.game.add.tween(this.adventureTime.scale).to({ y: 1 }, 100, Phaser.Easing.Linear.None, true, 800);
                this.finin = new Phaser.Sprite(this.game, 750, 620, 'menuAtlas', 'finin');
                this.finin.anchor.set(0.5);
                this.mainDummy.addChild(this.finin);
                this.game.add.tween(this.finin).to({ x: 250 }, 300, Phaser.Easing.Linear.None, true, 100);
                this.game.add.tween(this.finin).to({ y: 120 }, 300, Phaser.Easing.Linear.None, true, 100);
                this.flamin = new Phaser.Sprite(this.game, 750, 640, 'menuAtlas', 'flamin');
                this.flamin.anchor.set(0.5);
                this.game.add.tween(this.flamin).to({ x: 250 }, 300, Phaser.Easing.Linear.None, true, 300);
                this.game.add.tween(this.flamin).to({ y: 140 }, 300, Phaser.Easing.Linear.None, true, 300);
                this.mainDummy.addChild(this.flamin);
                this.btnPlay = new Phaser.Button(this.game, 0, -30, 'menuAtlas', this.onClickPlay, this, 'btn_play0002', 'btn_play0001');
                this.btnPlay.anchor.set(0.5);
                this.mainDummy.addChild(this.btnPlay);
                this.btnBuild = new Phaser.Button(this.game, 0, 30, 'menuAtlas', this.onClickPlay, this, 'btn_build0002', 'btn_build0001');
                this.btnBuild.anchor.set(0.5);
                this.btnBuild.scale.set(0.85);
                this.mainDummy.addChild(this.btnBuild);
                this.btnHelp = new Phaser.Button(this.game, 0, 85, 'menuAtlas', this.onClickHelp, this, 'btn_help0002', 'btn_help0001');
                this.btnHelp.anchor.set(0.5);
                this.btnHelp.scale.set(0.85);
                this.mainDummy.addChild(this.btnHelp);
                this.btnCredits = new Phaser.Button(this.game, -250, 245, 'menuAtlas', this.onClickCredits, this, 'btn_credits0002', 'btn_credits0001');
                this.btnCredits.anchor.set(0.5);
                this.btnCredits.scale.set(0.65);
                this.mainDummy.addChild(this.btnCredits);
                this.btnMusic = new Client.guiBtn(this.game, 290, -240, 'menuAtlas', 'btn_music', 'hint_music', true);
                this.btnMusic.onClick.add(this.onClickMusic, this);
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
                this.mainDummy.addChild(this.btnMusic);
                this.btnSfx = new Client.guiBtn(this.game, 260, -240, 'menuAtlas', 'btn_sfx', 'hint_sfx', true);
                this.btnSfx.onClick.add(this.onClickSfx, this);
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
                this.mainDummy.addChild(this.btnSfx);
                this.changeScreen = new Phaser.Sprite(this.game, 0, 0, 'menuAtlas', 'change_screen');
                this.changeScreen.anchor.set(0.5);
                this.mainDummy.addChild(this.changeScreen);
                this.game.add.tween(this.changeScreen).to({ x: -1250 }, 200, Phaser.Easing.Linear.None, true, 100);
                SndMng.playMusic(SndMng.MUSIC_MENU, 1, 1);
            };
            gsMainMenu.prototype.onClickMusic = function () {
                SndMng.setEnabledMusic(!SndMng.getEnabledMusic());
                if (SndMng.getEnabledMusic()) {
                    var oldMusic = SndMng.currentMusic;
                    SndMng.currentMusic = '';
                    SndMng.playMusic(oldMusic, 0, 1, 1000);
                }
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
            };
            gsMainMenu.prototype.onClickSfx = function () {
                SndMng.setEnabledSfx(!SndMng.getEnabledSfx());
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
            };
            gsMainMenu.prototype.onClickPlay = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.showStory, this);
            };
            gsMainMenu.prototype.onClickCredits = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.showCredits, this);
            };
            gsMainMenu.prototype.onClickHelp = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.showHelp, this);
            };
            gsMainMenu.prototype.showHelp = function () {
                this.game.state.start(States.HELP, true, false);
            };
            gsMainMenu.prototype.showCredits = function () {
                this.game.state.start(States.CREDITS, true, false);
            };
            gsMainMenu.prototype.showStory = function () {
                this.game.state.start(States.STORY, true, false);
            };
            gsMainMenu.prototype.update = function () {
            };
            return gsMainMenu;
        }(Phaser.State));
        Client.gsMainMenu = gsMainMenu;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var gsPreloader = (function (_super) {
            __extends(gsPreloader, _super);
            function gsPreloader() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.soundsDecodeWaiting = false;
                _this.soundsLoading = [];
                return _this;
            }
            gsPreloader.prototype.preload = function () {
                this.dummyLoader = new Phaser.Sprite(this.game, Config.GW / 2, Config.GH / 2);
                this.dummyLoader.anchor.set(0.5);
                this.add.existing(this.dummyLoader);
                var preloader_bg = new Phaser.Sprite(this.game, 0, 0, 'preloader_atlas', 'cn_preloader_bg');
                preloader_bg.anchor.set(0.5);
                this.dummyLoader.addChild(preloader_bg);
                this.preloadBar = new Phaser.Sprite(this.game, 0, 0, 'preloader_atlas', 'cn_preloader_bar');
                this.preloadBar.anchor.set(0.5);
                this.dummyLoader.addChild(this.preloadBar);
                this.preloadProgress = new Phaser.Sprite(this.game, 0, 0, 'preloader_atlas', 'cn_preloader_line0001');
                this.preloadProgress.anchor.set(0.5);
                this.preloadProgress.animations.add('play', Phaser.Animation.generateFrameNames('cn_preloader_line', 1, 10, '', 4), 24, true);
                this.preloadProgress.play('play');
                this.dummyLoader.addChild(this.preloadProgress);
                var percent = uMath.toPercent(ScaleManager.gameViewW, preloader_bg.width);
                this.dummyLoader.scale.set(percent / 100);
                this.load.atlasJSONArray('game', './assets/atlases/game.png', './assets/atlases/game.json');
                this.load.atlasJSONArray('menuAtlas', './assets/atlases/menu_atlas.png', './assets/atlases/menu_atlas.json');
                this.load.atlasJSONArray('gameAtlas', './assets/atlases/game_atlas.png', './assets/atlases/game_atlas.json');
                this.load.atlasJSONArray('shopAtlas', './assets/atlases/shop_atlas.png', './assets/atlases/shop_atlas.json');
                this.load.atlasJSONArray('playerAtlas0', './assets/atlases/player_atlas0.png', './assets/atlases/player_atlas0.json');
                this.load.atlasJSONArray('playerAtlas1', './assets/atlases/player_atlas1.png', './assets/atlases/player_atlas1.json');
                this.load.atlasJSONArray('playerAtlas2', './assets/atlases/player_atlas2.png', './assets/atlases/player_atlas2.json');
                this.load.atlasJSONArray('playerAtlas3', './assets/atlases/player_atlas3.png', './assets/atlases/player_atlas3.json');
                this.load.atlasJSONArray('playerAtlas4', './assets/atlases/player_atlas4.png', './assets/atlases/player_atlas4.json');
                this.load.atlasJSONArray('playerAtlas5', './assets/atlases/player_atlas5.png', './assets/atlases/player_atlas5.json');
                this.load.atlasJSONArray('playerAtlas6', './assets/atlases/player_atlas6.png', './assets/atlases/player_atlas6.json');
                this.load.atlasJSONArray('playerAtlas7', './assets/atlases/player_atlas7.png', './assets/atlases/player_atlas7.json');
                this.load.atlasJSONArray('playerAtlas8', './assets/atlases/player_atlas8.png', './assets/atlases/player_atlas8.json');
                this.load.atlasJSONArray('playerAtlas9', './assets/atlases/player_atlas9.png', './assets/atlases/player_atlas9.json');
                this.load.atlasJSONArray('playerAtlas10', './assets/atlases/player_atlas10.png', './assets/atlases/player_atlas10.json');
                this.load.bitmapFont('myFont', './assets/atlases/font.png', './assets/atlases/font.xml');
                SndMng.init(this.game, true, true);
                var sndFiles = SndMng.LOAD_SOUNDS;
                for (var i = 0; i < sndFiles.length; i++) {
                    var mp3 = './assets/audio/' + sndFiles[i] + '.mp3';
                    this.load.audio(sndFiles[i], [mp3]);
                    this.soundsLoading.push(sndFiles[i]);
                }
                this.load.setPreloadSprite(this.preloadProgress);
            };
            gsPreloader.prototype.create = function () {
                this.soundsDecodeWaiting = true;
            };
            gsPreloader.prototype.onSoundsDecoded = function () {
                this.game.time.events.add(1000, this.onContinueCreate, this);
            };
            gsPreloader.prototype.onContinueCreate = function () {
                if (Params.isMacOS) {
                    this.dummyLoader.visible = false;
                    var spr = new Phaser.Sprite(this.game, Config.GW / 2, Config.GH / 2, 'game', 'youtube-like-start-icon');
                    spr.anchor.set(0.5);
                    this.add.existing(spr);
                    this.input.onDown.addOnce(this.startMainMenu, this);
                }
                else {
                    this.showLogo();
                }
            };
            gsPreloader.prototype.showLogo = function () {
                this.game.add.tween(this.preloadProgress).to({ alpha: 0 }, 400, Phaser.Easing.Linear.None, true);
                this.game.add.tween(this.preloadBar).to({ alpha: 0 }, 400, Phaser.Easing.Linear.None, true);
                var logo = new Client.LogoAnim(this.game, 0, 0, this.startMainMenu);
                logo.anchor.set(0.5);
                this.dummyLoader.addChild(logo);
            };
            gsPreloader.prototype.startMainMenu = function () {
                if (Params.isMacOS) {
                }
                this.game.state.start(States.MAINMENU, true, false);
            };
            gsPreloader.prototype.update = function () {
                if (!this.soundsDecodeWaiting)
                    return;
                var sndDecoded = true;
                for (var i = 0; i < this.soundsLoading.length; i++) {
                    var sndName = this.soundsLoading[i];
                    if (!this.game.cache.isSoundDecoded(sndName)) {
                        sndDecoded = false;
                        break;
                    }
                }
                if (sndDecoded) {
                    this.soundsDecodeWaiting = false;
                    this.onSoundsDecoded();
                }
            };
            return gsPreloader;
        }(Phaser.State));
        Client.gsPreloader = gsPreloader;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var gsShop = (function (_super) {
            __extends(gsShop, _super);
            function gsShop() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            gsShop.prototype.create = function () {
                this.mainDummy = new Phaser.Sprite(this.game, Config.GW / 2, Config.GH / 2);
                this.mainDummy.anchor.set(0.5);
                this.add.existing(this.mainDummy);
                this.mainShop = new Client.screenMainShop(this.game, 0, 0);
                this.mainShop.onHats.add(this.onHats, this);
                this.mainShop.onWorlds.add(this.onWorlds, this);
                this.mainShop.onCritters.add(this.onCritters, this);
                this.mainShop.onSuits.add(this.onSuits, this);
                this.mainShop.onExitShop.add(this.onExit, this);
                this.mainDummy.addChild(this.mainShop);
                this.hatsShop = new Client.screenHatsShop(this.game, 0, 0);
                this.hatsShop.onExitShop.add(this.onMain, this);
                this.hatsShop.visible = false;
                this.mainDummy.addChild(this.hatsShop);
                this.skinsShop = new Client.screenSkinShop(this.game, 0, 0);
                this.skinsShop.onExitShop.add(this.onMain, this);
                this.skinsShop.visible = false;
                this.mainDummy.addChild(this.skinsShop);
                this.crittersShop = new Client.screenCrittersShop(this.game, 0, 0);
                this.crittersShop.onExitShop.add(this.onMain, this);
                this.crittersShop.visible = false;
                this.mainDummy.addChild(this.crittersShop);
                this.worldShop = new Client.screenWorldShop(this.game, 0, 0);
                this.worldShop.onExitShop.add(this.onMain, this);
                this.worldShop.visible = false;
                this.mainDummy.addChild(this.worldShop);
                this.btnMusic = new Client.guiBtn(this.game, 290, -240, 'menuAtlas', 'btn_music', 'hint_music', true);
                this.btnMusic.onClick.add(this.onClickMusic, this);
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
                this.mainDummy.addChild(this.btnMusic);
                this.btnSfx = new Client.guiBtn(this.game, 260, -240, 'menuAtlas', 'btn_sfx', 'hint_sfx', true);
                this.btnSfx.onClick.add(this.onClickSfx, this);
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
                this.mainDummy.addChild(this.btnSfx);
                this.changeScreen = new Phaser.Sprite(this.game, 0, 0, 'menuAtlas', 'change_screen');
                this.changeScreen.anchor.set(0.5);
                this.mainDummy.addChild(this.changeScreen);
                this.game.add.tween(this.changeScreen).to({ x: -1250 }, 200, Phaser.Easing.Linear.None, true, 100);
                SndMng.playMusic(SndMng.MUSIC_GAME, 1, 1);
            };
            gsShop.prototype.onExit = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.goExit, this);
            };
            gsShop.prototype.goExit = function () {
                if (ShopData.openedShop == ShopData.withMenu) {
                    this.game.state.start(States.LEVELSELECT, true, false);
                }
                else {
                    this.game.state.start(States.CDIALOG, true, false);
                }
            };
            gsShop.prototype.onMain = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.goMain, this);
            };
            gsShop.prototype.goMain = function () {
                this.hatsShop.visible = false;
                this.mainShop.visible = true;
                this.skinsShop.visible = false;
                this.crittersShop.visible = false;
                this.worldShop.visible = false;
                this.game.add.tween(this.changeScreen).to({ x: -1250 }, 200, Phaser.Easing.Linear.None, true, 100);
            };
            gsShop.prototype.onHats = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.goHats, this);
            };
            gsShop.prototype.goHats = function () {
                this.hatsShop.visible = true;
                this.skinsShop.visible = false;
                this.mainShop.visible = false;
                this.crittersShop.visible = false;
                this.worldShop.visible = false;
                this.game.add.tween(this.changeScreen).to({ x: -1250 }, 200, Phaser.Easing.Linear.None, true, 100);
            };
            gsShop.prototype.onWorlds = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.goWorlds, this);
            };
            gsShop.prototype.goWorlds = function () {
                this.skinsShop.visible = false;
                this.hatsShop.visible = false;
                this.mainShop.visible = false;
                this.crittersShop.visible = false;
                this.worldShop.visible = true;
                this.game.add.tween(this.changeScreen).to({ x: -1250 }, 200, Phaser.Easing.Linear.None, true, 100);
            };
            gsShop.prototype.onSuits = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.goSuits, this);
            };
            gsShop.prototype.goSuits = function () {
                this.skinsShop.visible = true;
                this.hatsShop.visible = false;
                this.mainShop.visible = false;
                this.crittersShop.visible = false;
                this.worldShop.visible = false;
                this.game.add.tween(this.changeScreen).to({ x: -1250 }, 200, Phaser.Easing.Linear.None, true, 100);
            };
            gsShop.prototype.onCritters = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.goCritters, this);
            };
            gsShop.prototype.goCritters = function () {
                this.skinsShop.visible = false;
                this.hatsShop.visible = false;
                this.mainShop.visible = false;
                this.crittersShop.visible = true;
                this.worldShop.visible = false;
                this.game.add.tween(this.changeScreen).to({ x: -1250 }, 200, Phaser.Easing.Linear.None, true, 100);
            };
            gsShop.prototype.onClickMusic = function () {
                SndMng.setEnabledMusic(!SndMng.getEnabledMusic());
                if (SndMng.getEnabledMusic()) {
                    var oldMusic = SndMng.currentMusic;
                    SndMng.currentMusic = '';
                    SndMng.playMusic(oldMusic, 0, 1, 1000);
                }
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
            };
            gsShop.prototype.onClickSfx = function () {
                SndMng.setEnabledSfx(!SndMng.getEnabledSfx());
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
            };
            gsShop.prototype.onClickMenu = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.showMenu, this);
            };
            gsShop.prototype.showMenu = function () {
            };
            gsShop.prototype.update = function () {
                this.hatsShop.update();
                this.mainShop.update();
                this.skinsShop.update();
                this.crittersShop.update();
                this.worldShop.update();
            };
            return gsShop;
        }(Phaser.State));
        Client.gsShop = gsShop;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var gsStory = (function (_super) {
            __extends(gsStory, _super);
            function gsStory() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            gsStory.prototype.create = function () {
                this.mainDummy = new Phaser.Sprite(this.game, Config.GW / 2, Config.GH / 2);
                this.mainDummy.anchor.set(0.5);
                this.add.existing(this.mainDummy);
                this.background = new Phaser.Sprite(this.game, 0, 0, 'menuAtlas', 'bg_story');
                this.background.anchor.set(0.5);
                this.mainDummy.addChild(this.background);
                this.btnPlayNow = new Phaser.Button(this.game, 190, 230, 'menuAtlas', this.onClickMenu, this, 'btn_play_now0002', 'btn_play_now0001');
                this.btnPlayNow.anchor.set(0.5);
                this.mainDummy.addChild(this.btnPlayNow);
                this.btnMusic = new Client.guiBtn(this.game, 300, -250, 'menuAtlas', 'btn_music', 'hint_music', true);
                this.btnMusic.onClick.add(this.onClickMusic, this);
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
                this.mainDummy.addChild(this.btnMusic);
                this.btnSfx = new Client.guiBtn(this.game, 270, -250, 'menuAtlas', 'btn_sfx', 'hint_sfx', true);
                this.btnSfx.onClick.add(this.onClickSfx, this);
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
                this.mainDummy.addChild(this.btnSfx);
                this.changeScreen = new Phaser.Sprite(this.game, 0, 0, 'menuAtlas', 'change_screen');
                this.changeScreen.anchor.set(0.5);
                this.mainDummy.addChild(this.changeScreen);
                this.game.add.tween(this.changeScreen).to({ x: -1250 }, 200, Phaser.Easing.Linear.None, true, 100);
                SndMng.playMusic(SndMng.MUSIC_MENU, 1, 1);
            };
            gsStory.prototype.onClickMusic = function () {
                SndMng.setEnabledMusic(!SndMng.getEnabledMusic());
                if (SndMng.getEnabledMusic()) {
                    var oldMusic = SndMng.currentMusic;
                    SndMng.currentMusic = '';
                    SndMng.playMusic(oldMusic, 0, 1, 1000);
                }
                this.btnMusic.setStatus(SndMng.getEnabledMusic());
            };
            gsStory.prototype.onClickSfx = function () {
                SndMng.setEnabledSfx(!SndMng.getEnabledSfx());
                this.btnSfx.setStatus(SndMng.getEnabledSfx());
            };
            gsStory.prototype.onClickMenu = function () {
                this.changeScreen.x = 1250;
                this.game.add.tween(this.changeScreen).to({ x: 0 }, 200, Phaser.Easing.Linear.None, true).onComplete.addOnce(this.showMenu, this);
            };
            gsStory.prototype.showMenu = function () {
                this.game.state.start(States.LEVELSELECT, true, false);
            };
            gsStory.prototype.update = function () {
            };
            return gsStory;
        }(Phaser.State));
        Client.gsStory = gsStory;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var States;
(function (States) {
    States.BOOT = 'Boot';
    States.PRELOADER = 'Preloader';
    States.MAINMENU = 'MainMenu';
    States.GAME = 'Game';
    States.CREDITS = 'Credits';
    States.LEVELSELECT = 'LevelSelect';
    States.HELP = 'Help';
    States.STORY = 'Story';
    States.SHOP = 'Shop';
    States.CDIALOG = 'CDialog';
})(States || (States = {}));
var LoadMng;
(function (LoadMng) {
    var SceneLoader = (function () {
        function SceneLoader(game) {
            this.isLoadingComplete = false;
            this.game = game;
        }
        SceneLoader.prototype.startLoading = function () {
            this.onLoading1Complete();
        };
        SceneLoader.prototype.onLoading1Complete = function () {
            LogMng.debug('LoadMng: loading complete!');
            this.isLoadingComplete = true;
        };
        return SceneLoader;
    }());
    LoadMng.SceneLoader = SceneLoader;
})(LoadMng || (LoadMng = {}));
var LogMng;
(function (LogMng) {
    LogMng.MODE_DEBUG = 'MODE_DEBUG';
    LogMng.MODE_RELEASE = 'MODE_RELEASE';
    var DEBUG = 'DEBUG';
    var INFO = 'INFO';
    var NETWORK = 'NETWORK';
    var WARNING = 'WARNING';
    var ERROR = 'ERROR';
    var mode = LogMng.MODE_DEBUG;
    var levels = [DEBUG, INFO, NETWORK, WARNING, ERROR];
    function setMode(aMode) {
        mode = aMode;
        switch (mode) {
            case LogMng.MODE_DEBUG:
                levels = [DEBUG, INFO, NETWORK, WARNING, ERROR];
                break;
            case LogMng.MODE_RELEASE:
                levels = [WARNING, ERROR];
                break;
        }
    }
    LogMng.setMode = setMode;
    function getMode() {
        return mode;
    }
    LogMng.getMode = getMode;
    function getCSS(bgColor) {
        return 'background: ' + bgColor + ';' +
            'background-repeat: no-repeat;' +
            'color: #1df9a8;' +
            'line-height: 16px;' +
            'padding: 1px 0;' +
            'margin: 0;' +
            'user-select: none;' +
            '-webkit-user-select: none;' +
            '-moz-user-select: none;';
    }
    ;
    function getLink(color) {
        return 'background: ' + color + ';' +
            'background-repeat: no-repeat;' +
            'font-size: 12px;' +
            'color: #446d96;' +
            'line-height: 14px';
    }
    ;
    function log(aMsg, aLevel) {
        if (aLevel === void 0) { aLevel = DEBUG; }
        if (levels.indexOf(aLevel) < 0)
            return;
        var css = '';
        switch (aLevel) {
            case INFO:
                css = 'background: #308AE4; color: #fff; padding: 1px 4px';
                break;
            case WARNING:
                css = 'background: #f7a148; color: #fff; padding: 1px 4px';
                break;
            case ERROR:
                css = 'background: #DB5252; color: #fff; padding: 1px 4px';
                break;
            case NETWORK:
                css = 'background: #7D2998; color: #fff; padding: 1px 4px';
                break;
            case DEBUG:
            default:
                css = 'background: #ADADAD; color: #fff; padding: 1px 4px';
        }
        console.log("%c%s", css, aLevel, aMsg);
    }
    ;
    function system(aMsg, aLink) {
        if (aLink === void 0) { aLink = ''; }
        console.log("%c %c %c %s %c %c %c %c%s", getCSS('#5C6166'), getCSS('#4F5357'), getCSS('#313335'), aMsg, getCSS('#4F5357'), getCSS('#5C6166'), getLink('none'), getLink('none'), aLink);
    }
    LogMng.system = system;
    function debug(aMsg) {
        log(aMsg, DEBUG);
    }
    LogMng.debug = debug;
    function info(aMsg) {
        log(aMsg, INFO);
    }
    LogMng.info = info;
    function net(aMsg) {
        log(aMsg, NETWORK);
    }
    LogMng.net = net;
    function warn(aMsg) {
        log(aMsg, WARNING);
    }
    LogMng.warn = warn;
    function error(aMsg) {
        log(aMsg, ERROR);
    }
    LogMng.error = error;
})(LogMng || (LogMng = {}));
var ScaleManager = (function () {
    function ScaleManager() {
    }
    ScaleManager.init = function (aGame, aDomId, GW, GH, GSW, GSH) {
        this.game = aGame;
        this.dom_id = aDomId;
        this.dom = document.getElementById(this.dom_id);
        this.game_w = GW;
        this.game_h = GH;
        this.game_sw = GSW;
        this.game_sh = GSH;
        aGame.scale.scaleMode = Phaser.ScaleManager.USER_SCALE;
        this.isDesktop = this.game.device.desktop;
        ScaleManager.SizeCalculation();
        window.onresize = function () {
            ScaleManager.SizeCalculation();
        };
    };
    ScaleManager.doEventOriChange = function () {
        this.onOrientationChange.dispatch(this.isPortrait);
    };
    ScaleManager.SizeCalculation = function () {
        var wnd = {
            w: window.innerWidth,
            h: window.innerHeight
        };
        var oldOri = this.isPortrait;
        this.isPortrait = wnd.h > wnd.w;
        var g = {
            w: ScaleManager.game_w,
            h: ScaleManager.game_h,
            sw: ScaleManager.game_sw,
            sh: ScaleManager.game_sh
        };
        var gw;
        var gh;
        if (g.h / g.w > wnd.h / wnd.w) {
            if (g.sh / g.w > wnd.h / wnd.w) {
                gh = wnd.h * g.h / g.sh;
                gw = gh * g.w / g.h;
            }
            else {
                gw = wnd.w;
                gh = gw * g.h / g.w;
            }
        }
        else {
            if (g.h / g.sw > wnd.h / wnd.w) {
                gh = wnd.h;
                gw = gh * g.w / g.h;
            }
            else {
                gw = wnd.w * g.w / g.sw;
                gh = gw * g.h / g.w;
            }
        }
        var scale_x = gw / g.w;
        var scale_y = gh / g.h;
        var newScale = Math.min(scale_x, scale_y);
        ScaleManager.game.scale.setUserScale(newScale, newScale, 0, 0);
        this.dtx = (wnd.w - gw) / 2;
        this.dty = (wnd.h - gh) / 2;
        this.gameViewW = this.game_w + 2 * this.dtx / newScale;
        if (this.gameViewW > this.game_w)
            this.gameViewW = this.game_w;
        this.gameViewH = this.game_h + 2 * this.dty / newScale;
        if (this.gameViewH > this.game_h)
            this.gameViewH = this.game_h;
        this.dom.style.marginLeft = Math.round(this.dtx).toString() + 'px';
        if (!this.isDesktop && this.isPortrait) {
            this.dom.style.marginTop = '0px';
        }
        else {
            this.dom.style.marginTop = Math.round(this.dty).toString() + 'px';
        }
        this.dom.style.maxWidth = String(gw) + 'px';
        this.dom.style.maxHeight = String(gh) + 'px';
        ScaleManager.game.scale.refresh();
        this.updateRotationIcon();
        if (this.isPortrait != oldOri) {
            this.doEventOriChange();
        }
    };
    ScaleManager.updateRotationIcon = function () {
        var MAX_PERC = 24;
        if (!this.isDesktop) {
            if (this.isPortrait) {
                this.showRotateIcon();
            }
            else {
                this.hideRotateIcon();
                return;
            }
            var wnd = {
                w: window.innerWidth,
                h: window.innerHeight
            };
            var rp_div = document.getElementById("rp-div");
            var rp_img = document.getElementById("rp-img");
            var com_h = this.dom.clientHeight + rp_div.clientHeight;
            var perc = MAX_PERC;
            if (rp_img.style.height != null && rp_img.style.height != undefined && rp_img.style.height != '') {
                if (rp_img.style.height.indexOf('%') > 0)
                    perc = Number(rp_img.style.height.split('%')[0]);
            }
            if (com_h > wnd.h) {
                while (com_h > wnd.h) {
                    perc--;
                    rp_img.style.width = rp_img.style.height = String(perc) + '%';
                    com_h = this.dom.clientHeight + rp_div.clientHeight;
                }
            }
            else {
                while (perc < MAX_PERC && com_h < wnd.h - 10) {
                    perc++;
                    rp_img.style.width = rp_img.style.height = String(perc) + '%';
                    com_h = this.dom.clientHeight + rp_div.clientHeight;
                }
            }
            var bot_h = wnd.h - this.dom.clientHeight;
            rp_div.style.paddingTop = String((bot_h - rp_img.clientHeight) / 2) + 'px';
        }
    };
    ScaleManager.showRotateIcon = function () {
        document.getElementById("rp-div").style.display = "block";
    };
    ScaleManager.hideRotateIcon = function () {
        document.getElementById("rp-div").style.display = "none";
    };
    ScaleManager.dom_id = '';
    ScaleManager.isDesktop = false;
    ScaleManager.dtx = 0;
    ScaleManager.dty = 0;
    ScaleManager.onOrientationChange = new Phaser.Signal();
    return ScaleManager;
}());
var SndMng;
(function (SndMng) {
    SndMng.currentMusic = '';
    SndMng.MUSIC_MENU = 'music_main_menu';
    SndMng.MUSIC_GAME = 'music_in_game';
    SndMng.SFX_COMPLETE = 'complete';
    SndMng.SFX_PICK_UP = 'pick_up';
    SndMng.SFX_GOAL = 'goal';
    SndMng.SFX_BULK = 'bulk';
    SndMng.SFX_OPEN = 'open';
    SndMng.SFX_ROCKET = 'rocket';
    SndMng.SFX_WATER = 'water_puf';
    SndMng.SFX_JUMP = 'jump';
    SndMng.LOAD_SOUNDS = [SndMng.MUSIC_MENU, SndMng.MUSIC_GAME, SndMng.SFX_COMPLETE, SndMng.SFX_PICK_UP, SndMng.SFX_GOAL, SndMng.SFX_BULK, SndMng.SFX_OPEN, SndMng.SFX_ROCKET,
        SndMng.SFX_WATER, SndMng.SFX_JUMP];
    var MUS_MAX_VOL = 1;
    var game;
    var enabledMusic;
    var enabledSfx;
    var musics = [];
    var previos;
    function getMusic(aName) {
        for (var i = 0; i < musics.length; i++) {
            var data = musics[i];
            if (data.name == aName)
                return data.mus;
        }
        return null;
    }
    function init(aGame, aEnabledMusic, aEnabledSfx) {
        game = aGame;
        enabledMusic = aEnabledMusic;
        enabledSfx = aEnabledSfx;
    }
    SndMng.init = init;
    function playMusic(aName, aVolFrom, aVolEnd, aDuration) {
        if (aVolFrom === void 0) { aVolFrom = 0; }
        if (aVolEnd === void 0) { aVolEnd = 1; }
        if (aDuration === void 0) { aDuration = 500; }
        if (SndMng.currentMusic != aName) {
            SndMng.currentMusic = aName;
            stopAllMusic();
            if (!enabledMusic)
                return;
            if (aVolEnd > MUS_MAX_VOL)
                aVolEnd = MUS_MAX_VOL;
            var music = game.add.audio(aName, aVolFrom, true);
            music.volume = aVolFrom;
            music.play();
            game.add.tween(music).to({ volume: aVolEnd }, aDuration, Phaser.Easing.Linear.None, true);
            musics.push({ name: aName, mus: music });
        }
    }
    SndMng.playMusic = playMusic;
    function stopMusicById(id, aVol, aDuration) {
        if (aVol === void 0) { aVol = 0; }
        if (aDuration === void 0) { aDuration = 500; }
        try {
            var data = musics[id];
            var music = data.mus;
            var tw = game.add.tween(music).to({ volume: aVol }, aDuration, Phaser.Easing.Linear.None, true);
            tw.onComplete.add(function (mus) { mus.stop(); }, null, null, music);
            musics.splice(id, 1);
        }
        catch (e) {
            LogMng.error('SndMng.stopMusicById: ' + e);
        }
    }
    function stopMusicByName(aName, aVol, aDuration) {
        if (aVol === void 0) { aVol = 0; }
        if (aDuration === void 0) { aDuration = 500; }
        for (var i = musics.length - 1; i >= 0; i++) {
            var data = musics[i];
            if (data.name == aName) {
                stopMusicById(i, aVol, aDuration);
            }
        }
    }
    SndMng.stopMusicByName = stopMusicByName;
    function stopAllMusic(aVol, aDuration) {
        if (aVol === void 0) { aVol = 0; }
        if (aDuration === void 0) { aDuration = 500; }
        for (var i = musics.length - 1; i >= 0; i--) {
            stopMusicById(i);
        }
    }
    SndMng.stopAllMusic = stopAllMusic;
    function setEnabledMusic(aEnabled) {
        enabledMusic = aEnabled;
        if (enabledMusic) {
        }
        else {
            stopAllMusic();
        }
    }
    SndMng.setEnabledMusic = setEnabledMusic;
    function getEnabledMusic() {
        return enabledMusic;
    }
    SndMng.getEnabledMusic = getEnabledMusic;
    function getEnabledSfx() {
        return enabledSfx;
    }
    SndMng.getEnabledSfx = getEnabledSfx;
    function setEnabledSfx(aEnable) {
        enabledSfx = aEnable;
    }
    SndMng.setEnabledSfx = setEnabledSfx;
    function sfxPlay(aName, aVol) {
        if (aVol === void 0) { aVol = 1; }
        if (!enabledSfx)
            return;
        var snd = game.add.audio(aName, aVol);
        snd.play();
        return snd;
    }
    SndMng.sfxPlay = sfxPlay;
    function update(dt) {
    }
    SndMng.update = update;
})(SndMng || (SndMng = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var guiBtn = (function (_super) {
            __extends(guiBtn, _super);
            function guiBtn(game, x, y, atlas, textureBtn, textureHint, disableStatus) {
                var _this = _super.call(this, game, x, y) || this;
                _this.onClick = new Phaser.Signal();
                _this.button = new Phaser.Button(_this.game, 0, 0, atlas, _this.onClickButton, _this, textureBtn + '0002', textureBtn + '0001');
                _this.button.onInputOver.add(_this.onInputOver, _this);
                _this.button.onInputOut.add(_this.onInputOut, _this);
                _this.button.anchor.set(0.5);
                _this.addChild(_this.button);
                _this.disabled = new Phaser.Sprite(_this.game, 0, 0, atlas, 'audio_disable');
                _this.disabled.anchor.set(0.5);
                _this.addChild(_this.disabled);
                _this.disabled.visible = !disableStatus;
                _this.hint = new Phaser.Sprite(_this.game, 0, 21, atlas, textureHint);
                _this.hint.anchor.set(0.5);
                _this.hint.visible = false;
                _this.addChild(_this.hint);
                return _this;
            }
            guiBtn.prototype.onInputOut = function () {
                this.hint.visible = false;
            };
            guiBtn.prototype.onInputOver = function () {
                this.hint.visible = true;
                this.hint.scale.set(0);
                this.game.add.tween(this.hint.scale).to({ x: 1 }, 200, Phaser.Easing.Bounce.Out, true);
                this.game.add.tween(this.hint.scale).to({ y: 1 }, 200, Phaser.Easing.Bounce.Out, true);
            };
            guiBtn.prototype.setStatus = function (sEnable) {
                this.disabled.visible = !sEnable;
            };
            guiBtn.prototype.onClickButton = function () {
                this.onClick.dispatch();
            };
            return guiBtn;
        }(Phaser.Sprite));
        Client.guiBtn = guiBtn;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var guiBtnShopCritters = (function (_super) {
            __extends(guiBtnShopCritters, _super);
            function guiBtnShopCritters(game, x, y, iconFrame) {
                var _this = _super.call(this, game, x, y) || this;
                _this.unEquip = new Phaser.Signal;
                _this.priceNum = 10;
                _this.numIcon = iconFrame;
                _this.shadowIcon = new Phaser.Sprite(_this.game, 0, 0, 'shopAtlas', 'critters_icon_shadow0001');
                _this.shadowIcon.animations.add('play', Phaser.Animation.generateFrameNames('critters_icon_shadow', 1, 3, '', 4), 60, true);
                _this.shadowIcon.anchor.set(0.5);
                _this.shadowIcon.scale.x = 1.25;
                _this.shadowIcon.animations.currentAnim.frame = 2;
                _this.addChild(_this.shadowIcon);
                _this.icon = new Phaser.Sprite(_this.game, 0, -20, 'shopAtlas', 'critters_icon0001');
                _this.icon.animations.add('play', Phaser.Animation.generateFrameNames('critters_icon', 1, 21, '', 4), 60, true);
                _this.icon.anchor.set(0.5);
                _this.icon.animations.currentAnim.frame = iconFrame;
                _this.addChild(_this.icon);
                _this.price = new Phaser.Sprite(_this.game, 165, 25, 'shopAtlas', 'price_critters');
                _this.price.anchor.set(0.5);
                _this.addChild(_this.price);
                _this.equiped = new Phaser.Sprite(_this.game, -205, -25, 'shopAtlas', 'equiped');
                _this.equiped.anchor.set(0.5);
                _this.equiped.visible = false;
                _this.addChild(_this.equiped);
                var buyString = 'btn_buy_critters' + _this.numIcon;
                _this.btnBuy = new Phaser.Button(_this.game, -2, 18, 'shopAtlas', _this.onBuy, _this, buyString + '0002', buyString + '0001');
                _this.btnBuy.anchor.set(0.5);
                _this.btnBuy.scale.set(0.87);
                _this.addChild(_this.btnBuy);
                var equipString = 'btn_equip_critters' + _this.numIcon;
                _this.btnEquip = new Phaser.Button(_this.game, -2, 15, 'shopAtlas', _this.onEquip, _this, equipString + '0002', equipString + '0001');
                _this.btnEquip.anchor.set(0.5);
                _this.btnEquip.scale.set(0.87);
                _this.btnEquip.visible = false;
                _this.addChild(_this.btnEquip);
                return _this;
            }
            guiBtnShopCritters.prototype.CheckBuy = function () {
                var buy = uSaveData.getItem('CrittersShop' + (this.numIcon + 1)) || 'false';
                if (buy == 'true') {
                    this.btnBuy.visible = false;
                    this.btnEquip.visible = true;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    var equiped = Number(uSaveData.getItem('EquipCritters'));
                    if (this.numIcon == equiped - 1) {
                        this.equiped.visible = true;
                        this.btnEquip.tint = 0x4F4F4F;
                        this.shadowIcon.animations.currentAnim.frame = 1;
                    }
                }
            };
            guiBtnShopCritters.prototype.onBuy = function () {
                var crystl = Number(uSaveData.getItem('numCrystal') || '0');
                if (crystl >= this.priceNum) {
                    this.btnBuy.visible = false;
                    this.btnEquip.visible = true;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    uSaveData.setItem('CrittersShop' + (this.numIcon + 1), 'true');
                    crystl -= this.priceNum;
                    uSaveData.setItem('numCrystal', '' + crystl);
                    uSaveData.saveData();
                    this.onEquip();
                }
            };
            guiBtnShopCritters.prototype.fUnEquip = function () {
                if (this.btnEquip.visible) {
                    this.equiped.visible = false;
                    this.btnEquip.tint = 0xFFFFFF;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    uSaveData.setItem('EquipCritters', '' + 0);
                    uSaveData.saveData();
                }
            };
            guiBtnShopCritters.prototype.onEquip = function () {
                this.equiped.visible = true;
                this.unEquip.dispatch(this.numIcon);
                this.btnEquip.tint = 0x4F4F4F;
                this.shadowIcon.animations.currentAnim.frame = 1;
                uSaveData.setItem('EquipCritters', '' + (this.numIcon + 1));
                uSaveData.saveData();
            };
            return guiBtnShopCritters;
        }(Phaser.Sprite));
        Client.guiBtnShopCritters = guiBtnShopCritters;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var guiBtnShopHat = (function (_super) {
            __extends(guiBtnShopHat, _super);
            function guiBtnShopHat(game, x, y, iconFrame) {
                var _this = _super.call(this, game, x, y) || this;
                _this.unEquip = new Phaser.Signal;
                _this.priceNum = 2;
                _this.numIcon = iconFrame;
                _this.shadowIcon = new Phaser.Sprite(_this.game, 0, 0, 'shopAtlas', 'hat_icon_shadow0001');
                _this.shadowIcon.animations.add('play', Phaser.Animation.generateFrameNames('hat_icon_shadow', 1, 3, '', 4), 60, true);
                _this.shadowIcon.anchor.set(0.5);
                _this.shadowIcon.animations.currentAnim.frame = 2;
                _this.addChild(_this.shadowIcon);
                _this.icon = new Phaser.Sprite(_this.game, 0, 0, 'shopAtlas', 'hat_icon0001');
                _this.icon.animations.add('play', Phaser.Animation.generateFrameNames('hat_icon', 1, 21, '', 4), 60, true);
                _this.icon.anchor.set(0.5);
                _this.icon.animations.currentAnim.frame = iconFrame;
                _this.addChild(_this.icon);
                _this.price = new Phaser.Sprite(_this.game, -5, 25, 'shopAtlas', 'price_hat');
                _this.price.anchor.set(0.5);
                _this.addChild(_this.price);
                _this.equiped = new Phaser.Sprite(_this.game, -25, -25, 'shopAtlas', 'equiped');
                _this.equiped.anchor.set(0.5);
                _this.equiped.visible = false;
                _this.addChild(_this.equiped);
                _this.btnBuy = new Phaser.Button(_this.game, 0, 18, 'shopAtlas', _this.onBuy, _this, 'btn_by_hat0002', 'btn_by_hat0001');
                _this.btnBuy.anchor.set(0.5);
                _this.btnBuy.scale.set(0.87);
                _this.addChild(_this.btnBuy);
                _this.btnEquip = new Phaser.Button(_this.game, 0, 15, 'shopAtlas', _this.onEquip, _this, 'btn_equip_hat0002', 'btn_equip_hat0001');
                _this.btnEquip.anchor.set(0.5);
                _this.btnEquip.scale.set(0.87);
                _this.btnEquip.visible = false;
                _this.addChild(_this.btnEquip);
                return _this;
            }
            guiBtnShopHat.prototype.CheckBuy = function () {
                var buy = uSaveData.getItem('hatShop' + (this.numIcon + 1)) || 'false';
                if (buy == 'true') {
                    this.btnBuy.visible = false;
                    this.btnEquip.visible = true;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    var equiped = Number(uSaveData.getItem('EquipHat'));
                    if (this.numIcon == equiped - 1) {
                        this.equiped.visible = true;
                        this.btnEquip.tint = 0x4F4F4F;
                        this.shadowIcon.animations.currentAnim.frame = 1;
                    }
                }
            };
            guiBtnShopHat.prototype.onBuy = function () {
                var crystl = Number(uSaveData.getItem('numCrystal') || '0');
                if (crystl >= this.priceNum) {
                    this.btnBuy.visible = false;
                    this.btnEquip.visible = true;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    uSaveData.setItem('hatShop' + (this.numIcon + 1), 'true');
                    crystl -= this.priceNum;
                    uSaveData.setItem('numCrystal', '' + crystl);
                    uSaveData.saveData();
                    this.onEquip();
                }
            };
            guiBtnShopHat.prototype.fUnEquip = function () {
                if (this.btnEquip.visible) {
                    this.equiped.visible = false;
                    this.btnEquip.tint = 0xFFFFFF;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    uSaveData.setItem('EquipHat', '' + 0);
                    uSaveData.saveData();
                }
            };
            guiBtnShopHat.prototype.onEquip = function () {
                this.equiped.visible = true;
                this.unEquip.dispatch(this.numIcon);
                this.btnEquip.tint = 0x4F4F4F;
                this.shadowIcon.animations.currentAnim.frame = 1;
                uSaveData.setItem('EquipHat', '' + (this.numIcon + 1));
                uSaveData.saveData();
            };
            return guiBtnShopHat;
        }(Phaser.Sprite));
        Client.guiBtnShopHat = guiBtnShopHat;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var guiBtnShopSkin = (function (_super) {
            __extends(guiBtnShopSkin, _super);
            function guiBtnShopSkin(game, x, y, iconFrame) {
                var _this = _super.call(this, game, x, y) || this;
                _this.unEquip = new Phaser.Signal;
                _this.priceNum = 5;
                _this.numIcon = iconFrame;
                _this.shadowIcon = new Phaser.Sprite(_this.game, 0, 0, 'shopAtlas', 'hat_icon_shadow0001');
                _this.shadowIcon.animations.add('play', Phaser.Animation.generateFrameNames('hat_icon_shadow', 1, 3, '', 4), 60, true);
                _this.shadowIcon.anchor.set(0.5);
                _this.shadowIcon.animations.currentAnim.frame = 2;
                _this.addChild(_this.shadowIcon);
                _this.icon = new Phaser.Sprite(_this.game, 0, 0, 'shopAtlas', 'skin_icon0001');
                _this.icon.animations.add('play', Phaser.Animation.generateFrameNames('skin_icon', 1, 10, '', 4), 60, true);
                _this.icon.anchor.set(0.5);
                _this.icon.animations.currentAnim.frame = iconFrame;
                _this.addChild(_this.icon);
                _this.price = new Phaser.Sprite(_this.game, -5, 25, 'shopAtlas', 'price_skin');
                _this.price.anchor.set(0.5);
                _this.addChild(_this.price);
                _this.equiped = new Phaser.Sprite(_this.game, -25, -25, 'shopAtlas', 'equiped');
                _this.equiped.anchor.set(0.5);
                _this.equiped.visible = false;
                _this.addChild(_this.equiped);
                _this.btnBuy = new Phaser.Button(_this.game, 0, 18, 'shopAtlas', _this.onBuy, _this, 'btn_by_hat0002', 'btn_by_hat0001');
                _this.btnBuy.anchor.set(0.5);
                _this.btnBuy.scale.set(0.87);
                _this.addChild(_this.btnBuy);
                _this.btnEquip = new Phaser.Button(_this.game, 0, 15, 'shopAtlas', _this.onEquip, _this, 'btn_equip_hat0002', 'btn_equip_hat0001');
                _this.btnEquip.anchor.set(0.5);
                _this.btnEquip.scale.set(0.87);
                _this.btnEquip.visible = false;
                _this.addChild(_this.btnEquip);
                return _this;
            }
            guiBtnShopSkin.prototype.CheckBuy = function () {
                var buy = uSaveData.getItem('skinsShop' + (this.numIcon + 1)) || 'false';
                if (buy == 'true') {
                    this.btnBuy.visible = false;
                    this.btnEquip.visible = true;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    var equiped = Number(uSaveData.getItem('EquipSkin'));
                    if (this.numIcon == equiped - 1) {
                        this.equiped.visible = true;
                        this.btnEquip.tint = 0x4F4F4F;
                        this.shadowIcon.animations.currentAnim.frame = 1;
                    }
                }
            };
            guiBtnShopSkin.prototype.onBuy = function () {
                var crystl = Number(uSaveData.getItem('numCrystal') || '0');
                if (crystl >= this.priceNum) {
                    this.btnBuy.visible = false;
                    this.btnEquip.visible = true;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    uSaveData.setItem('skinsShop' + (this.numIcon + 1), 'true');
                    crystl -= this.priceNum;
                    uSaveData.setItem('numCrystal', '' + crystl);
                    uSaveData.saveData();
                    this.onEquip();
                }
            };
            guiBtnShopSkin.prototype.fUnEquip = function () {
                if (this.btnEquip.visible) {
                    this.equiped.visible = false;
                    this.btnEquip.tint = 0xFFFFFF;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    uSaveData.setItem('EquipSkin', '' + 0);
                    uSaveData.saveData();
                }
            };
            guiBtnShopSkin.prototype.onEquip = function () {
                this.equiped.visible = true;
                this.unEquip.dispatch(this.numIcon);
                this.btnEquip.tint = 0x4F4F4F;
                this.shadowIcon.animations.currentAnim.frame = 1;
                uSaveData.setItem('EquipSkin', '' + (this.numIcon + 1));
                uSaveData.saveData();
            };
            return guiBtnShopSkin;
        }(Phaser.Sprite));
        Client.guiBtnShopSkin = guiBtnShopSkin;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var guiBtnShopTile = (function (_super) {
            __extends(guiBtnShopTile, _super);
            function guiBtnShopTile(game, x, y, iconFrame) {
                var _this = _super.call(this, game, x, y) || this;
                _this.unEquip = new Phaser.Signal;
                _this.priceNum = 2;
                _this.numIcon = iconFrame;
                _this.shadowIcon = new Phaser.Sprite(_this.game, 0, 0, 'shopAtlas', 'tiles_icon_shadow0001');
                _this.shadowIcon.animations.add('play', Phaser.Animation.generateFrameNames('tiles_icon_shadow', 1, 3, '', 4), 60, true);
                _this.shadowIcon.anchor.set(0.5);
                _this.shadowIcon.animations.currentAnim.frame = 2;
                _this.addChild(_this.shadowIcon);
                _this.icon = new Phaser.Sprite(_this.game, 0, 0, 'shopAtlas', 'tiles_icon0001');
                _this.icon.animations.add('play', Phaser.Animation.generateFrameNames('tiles_icon', 1, 21, '', 4), 60, true);
                _this.icon.anchor.set(0.5);
                _this.icon.animations.currentAnim.frame = iconFrame;
                _this.addChild(_this.icon);
                _this.price = new Phaser.Sprite(_this.game, 26, 25, 'shopAtlas', 'price_skin');
                _this.price.anchor.set(0.5);
                _this.addChild(_this.price);
                _this.equiped = new Phaser.Sprite(_this.game, -60, -25, 'shopAtlas', 'equiped');
                _this.equiped.anchor.set(0.5);
                _this.equiped.visible = false;
                _this.addChild(_this.equiped);
                _this.btnBuy = new Phaser.Button(_this.game, 0, 13, 'shopAtlas', _this.onBuy, _this, 'btn_by_tile0002', 'btn_by_tile0001');
                _this.btnBuy.anchor.set(0.5);
                _this.btnBuy.scale.set(0.87);
                _this.addChild(_this.btnBuy);
                _this.btnEquip = new Phaser.Button(_this.game, 0, 13, 'shopAtlas', _this.onEquip, _this, 'btn_equip_tile0002', 'btn_equip_tile0001');
                _this.btnEquip.anchor.set(0.5);
                _this.btnEquip.scale.set(0.87);
                _this.btnEquip.visible = false;
                _this.addChild(_this.btnEquip);
                return _this;
            }
            guiBtnShopTile.prototype.CheckBuy = function () {
                var buy = uSaveData.getItem('tileShop' + (this.numIcon + 1)) || 'false';
                if (buy == 'true') {
                    this.btnBuy.visible = false;
                    this.btnEquip.visible = true;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    var equiped = Number(uSaveData.getItem('EquipTile'));
                    if (this.numIcon == equiped - 1) {
                        this.equiped.visible = true;
                        this.btnEquip.tint = 0x4F4F4F;
                        this.shadowIcon.animations.currentAnim.frame = 1;
                    }
                }
            };
            guiBtnShopTile.prototype.onBuy = function () {
                var crystl = Number(uSaveData.getItem('numCrystal') || '0');
                if (crystl >= this.priceNum) {
                    this.btnBuy.visible = false;
                    this.btnEquip.visible = true;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    uSaveData.setItem('tileShop' + (this.numIcon + 1), 'true');
                    crystl -= this.priceNum;
                    uSaveData.setItem('numCrystal', '' + crystl);
                    uSaveData.saveData();
                    this.onEquip();
                }
            };
            guiBtnShopTile.prototype.fUnEquip = function () {
                if (this.btnEquip.visible) {
                    this.equiped.visible = false;
                    this.btnEquip.tint = 0xFFFFFF;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    uSaveData.setItem('EquipTile', '' + 0);
                    uSaveData.saveData();
                }
            };
            guiBtnShopTile.prototype.onEquip = function () {
                this.equiped.visible = true;
                this.unEquip.dispatch(this.numIcon);
                this.btnEquip.tint = 0x4F4F4F;
                this.shadowIcon.animations.currentAnim.frame = 1;
                uSaveData.setItem('EquipTile', '' + (this.numIcon + 1));
                uSaveData.saveData();
            };
            return guiBtnShopTile;
        }(Phaser.Sprite));
        Client.guiBtnShopTile = guiBtnShopTile;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var guiBtnShopworld = (function (_super) {
            __extends(guiBtnShopworld, _super);
            function guiBtnShopworld(game, x, y, iconFrame) {
                var _this = _super.call(this, game, x, y) || this;
                _this.unEquip = new Phaser.Signal;
                _this.priceNum = 15;
                _this.numIcon = iconFrame;
                _this.shadowIcon = new Phaser.Sprite(_this.game, 0, 0, 'shopAtlas', 'critters_icon_shadow0001');
                _this.shadowIcon.animations.add('play', Phaser.Animation.generateFrameNames('critters_icon_shadow', 1, 3, '', 4), 60, true);
                _this.shadowIcon.anchor.set(0.5);
                _this.shadowIcon.scale.x = 1.25;
                _this.shadowIcon.visible = false;
                _this.shadowIcon.animations.currentAnim.frame = 2;
                _this.addChild(_this.shadowIcon);
                _this.icon = new Phaser.Sprite(_this.game, 0, 0, 'shopAtlas', 'world_icon0001');
                _this.icon.animations.add('play', Phaser.Animation.generateFrameNames('world_icon', 1, 21, '', 4), 60, true);
                _this.icon.anchor.set(0.5);
                _this.icon.animations.currentAnim.frame = iconFrame;
                _this.addChild(_this.icon);
                _this.price = new Phaser.Sprite(_this.game, 125, 25, 'shopAtlas', 'price_world');
                _this.price.anchor.set(0.5);
                _this.addChild(_this.price);
                _this.equiped = new Phaser.Sprite(_this.game, -165, -25, 'shopAtlas', 'equiped');
                _this.equiped.anchor.set(0.5);
                _this.equiped.visible = false;
                _this.addChild(_this.equiped);
                var buyString = 'btn_buy_world' + _this.numIcon;
                _this.btnBuy = new Phaser.Button(_this.game, 0, 15, 'shopAtlas', _this.onBuy, _this, buyString + '0002', buyString + '0001');
                _this.btnBuy.anchor.set(0.5);
                _this.btnBuy.scale.set(0.87);
                _this.addChild(_this.btnBuy);
                var equipString = 'btn_equip_world' + _this.numIcon;
                _this.btnEquip = new Phaser.Button(_this.game, 0, 15, 'shopAtlas', _this.onEquip, _this, equipString + '0002', equipString + '0001');
                _this.btnEquip.anchor.set(0.5);
                _this.btnEquip.scale.set(0.87);
                _this.btnEquip.visible = false;
                _this.addChild(_this.btnEquip);
                return _this;
            }
            guiBtnShopworld.prototype.CheckBuy = function () {
                var buy = uSaveData.getItem('WorldsShop' + (this.numIcon + 1)) || 'false';
                if (buy == 'true') {
                    this.btnBuy.visible = false;
                    this.btnEquip.visible = true;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    var equiped = Number(uSaveData.getItem('EquipWorlds'));
                    if (this.numIcon == equiped - 1) {
                        this.equiped.visible = true;
                        this.btnEquip.tint = 0x4F4F4F;
                        this.shadowIcon.animations.currentAnim.frame = 1;
                    }
                }
            };
            guiBtnShopworld.prototype.onBuy = function () {
                var crystl = Number(uSaveData.getItem('numCrystal') || '0');
                if (crystl >= this.priceNum) {
                    this.btnBuy.visible = false;
                    this.btnEquip.visible = true;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    uSaveData.setItem('WorldsShop' + (this.numIcon + 1), 'true');
                    crystl -= this.priceNum;
                    uSaveData.setItem('numCrystal', '' + crystl);
                    uSaveData.saveData();
                    this.onEquip();
                }
            };
            guiBtnShopworld.prototype.fUnEquip = function () {
                if (this.btnEquip.visible) {
                    this.equiped.visible = false;
                    this.btnEquip.tint = 0xFFFFFF;
                    this.shadowIcon.animations.currentAnim.frame = 0;
                    uSaveData.setItem('EquipWorlds', '' + 0);
                    uSaveData.saveData();
                }
            };
            guiBtnShopworld.prototype.onEquip = function () {
                this.equiped.visible = true;
                this.unEquip.dispatch(this.numIcon);
                this.btnEquip.tint = 0x4F4F4F;
                this.shadowIcon.animations.currentAnim.frame = 1;
                uSaveData.setItem('EquipWorlds', '' + (this.numIcon + 1));
                uSaveData.saveData();
            };
            return guiBtnShopworld;
        }(Phaser.Sprite));
        Client.guiBtnShopworld = guiBtnShopworld;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var levelBtn = (function (_super) {
            __extends(levelBtn, _super);
            function levelBtn(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.tLevel = 1;
                _this.onClick = new Phaser.Signal();
                _this.unlock = false;
                _this.tButton = new Phaser.Button(_this.game, 0, 0, 'menuAtlas', _this.onClickButton, _this, 'btn_level0002', 'btn_level0001');
                _this.tButton.anchor.set(0.5);
                _this.addChild(_this.tButton);
                _this.textNumber = new Phaser.BitmapText(_this.game, 0, 2, 'myFont', '', 18);
                _this.textNumber.anchor.set(0.5);
                _this.addChild(_this.textNumber);
                _this.lock = new Phaser.Sprite(_this.game, 0, 5, 'menuAtlas', 'lock_level');
                _this.lock.anchor.set(0.5);
                _this.addChild(_this.lock);
                _this.done = new Phaser.Sprite(_this.game, 10, 0, 'menuAtlas', 'done');
                _this.done.anchor.set(0, 0.5);
                _this.done.visible = false;
                _this.addChild(_this.done);
                _this.crystal = new Phaser.Sprite(_this.game, -14, 23, 'menuAtlas', 'crystal');
                _this.crystal.anchor.set(0.5);
                _this.crystal.visible = false;
                _this.addChild(_this.crystal);
                return _this;
            }
            levelBtn.prototype.onClickButton = function () {
                this.onClick.dispatch(this.tLevel);
            };
            levelBtn.prototype.setDone = function () {
                this.done.visible = true;
            };
            levelBtn.prototype.setCrystal = function () {
                this.crystal.visible = true;
            };
            levelBtn.prototype.setUnlock = function (enable) {
                if (enable === void 0) { enable = true; }
                this.lock.visible = !enable;
                this.unlock = enable;
                if (enable) {
                    this.textNumber.text = '' + this.tLevel;
                }
                else {
                    this.textNumber.text = '';
                }
            };
            return levelBtn;
        }(Phaser.Sprite));
        Client.levelBtn = levelBtn;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var LogoAnim = (function (_super) {
            __extends(LogoAnim, _super);
            function LogoAnim(game, x, y, cb) {
                var _this = _super.call(this, game, x, y) || this;
                _this.callBack = cb;
                _this.pic = new Phaser.Sprite(_this.game, 0, 0, 'preloader_atlas', 'preload_movie0001');
                _this.pic.anchor.set(0.5);
                _this.pic.animations.add('logo', Phaser.Animation.generateFrameNames('preload_movie', 1, 41, '', 4), 24, true);
                _this.pic.play('logo', 24, false);
                _this.pic.events.onAnimationComplete.addOnce(_this.completeLogo, _this);
                _this.addChild(_this.pic);
                return _this;
            }
            LogoAnim.prototype.completeLogo = function () {
                this.callBack();
            };
            return LogoAnim;
        }(Phaser.Sprite));
        Client.LogoAnim = LogoAnim;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var screenCrittersShop = (function (_super) {
            __extends(screenCrittersShop, _super);
            function screenCrittersShop(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.btnHats = [];
                _this.onExitShop = new Phaser.Signal;
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'shopAtlas', 'critters_bg');
                _this.tBack.anchor.set(0.5);
                _this.addChild(_this.tBack);
                var num = 0;
                for (var j = 0; j < 3; j++) {
                    for (var i = 0; i < 1; i++) {
                        var hat = new Client.guiBtnShopCritters(_this.game, 0 + 70 * i, -120 + (j * 100), num);
                        hat.scale.set(0.95);
                        hat.CheckBuy();
                        hat.unEquip.add(_this.unEquip, _this);
                        _this.addChild(hat);
                        _this.btnHats.push(hat);
                        num++;
                    }
                }
                _this.tBtnExit = new Phaser.Button(_this.game, 0, 235, 'shopAtlas', _this.Exit, _this, 'btn_back0002', 'btn_back0001');
                _this.tBtnExit.anchor.set(0.5);
                _this.tBtnExit.scale.set(0.87);
                _this.addChild(_this.tBtnExit);
                _this.tBtnUnequip = new Phaser.Button(_this.game, -185, 235, 'shopAtlas', _this.unEquip, _this, 'btn_unequip0002', 'btn_unequip0001');
                _this.tBtnUnequip.anchor.set(0.5);
                _this.tBtnUnequip.scale.set(0.87);
                _this.addChild(_this.tBtnUnequip);
                _this.crystalNumber = new Phaser.BitmapText(_this.game, -170, 175, 'myFont', '', 20);
                _this.crystalNumber.text = 'x 0';
                _this.crystalNumber.smoothed = true;
                _this.crystalNumber.anchor.set(0.5);
                _this.addChild(_this.crystalNumber);
                return _this;
            }
            screenCrittersShop.prototype.unEquip = function (eNum) {
                for (var i = 0; i < this.btnHats.length; i++) {
                    if (eNum != this.btnHats[i].numIcon) {
                        this.btnHats[i].fUnEquip();
                    }
                }
            };
            screenCrittersShop.prototype.Exit = function () {
                this.onExitShop.dispatch();
            };
            screenCrittersShop.prototype.update = function () {
                var crystl = Number(uSaveData.getItem('numCrystal') || '0');
                this.crystalNumber.text = 'x ' + crystl;
            };
            return screenCrittersShop;
        }(Phaser.Sprite));
        Client.screenCrittersShop = screenCrittersShop;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var screenHatsShop = (function (_super) {
            __extends(screenHatsShop, _super);
            function screenHatsShop(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.btnHats = [];
                _this.onExitShop = new Phaser.Signal;
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'shopAtlas', 'hats_bg');
                _this.tBack.anchor.set(0.5);
                _this.addChild(_this.tBack);
                var num = 0;
                for (var j = 0; j < 3; j++) {
                    for (var i = 0; i < 7; i++) {
                        var hat = new Client.guiBtnShopHat(_this.game, -210 + 70 * i, -120 + (j * 100), num);
                        hat.scale.set(0.95);
                        hat.CheckBuy();
                        hat.unEquip.add(_this.unEquip, _this);
                        _this.addChild(hat);
                        _this.btnHats.push(hat);
                        num++;
                    }
                }
                _this.tBtnExit = new Phaser.Button(_this.game, 0, 235, 'shopAtlas', _this.Exit, _this, 'btn_back0002', 'btn_back0001');
                _this.tBtnExit.anchor.set(0.5);
                _this.tBtnExit.scale.set(0.87);
                _this.addChild(_this.tBtnExit);
                _this.tBtnUnequip = new Phaser.Button(_this.game, -185, 235, 'shopAtlas', _this.unEquip, _this, 'btn_unequip0002', 'btn_unequip0001');
                _this.tBtnUnequip.anchor.set(0.5);
                _this.tBtnUnequip.scale.set(0.87);
                _this.addChild(_this.tBtnUnequip);
                _this.crystalNumber = new Phaser.BitmapText(_this.game, -170, 175, 'myFont', '', 20);
                _this.crystalNumber.text = 'x 0';
                _this.crystalNumber.smoothed = true;
                _this.crystalNumber.anchor.set(0.5);
                _this.addChild(_this.crystalNumber);
                return _this;
            }
            screenHatsShop.prototype.unEquip = function (eNum) {
                for (var i = 0; i < this.btnHats.length; i++) {
                    if (eNum != this.btnHats[i].numIcon) {
                        this.btnHats[i].fUnEquip();
                    }
                }
            };
            screenHatsShop.prototype.Exit = function () {
                this.onExitShop.dispatch();
            };
            screenHatsShop.prototype.update = function () {
                var crystl = Number(uSaveData.getItem('numCrystal') || '0');
                this.crystalNumber.text = 'x ' + crystl;
            };
            return screenHatsShop;
        }(Phaser.Sprite));
        Client.screenHatsShop = screenHatsShop;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var screenMainShop = (function (_super) {
            __extends(screenMainShop, _super);
            function screenMainShop(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.onHats = new Phaser.Signal;
                _this.onCritters = new Phaser.Signal;
                _this.onWorlds = new Phaser.Signal;
                _this.onSuits = new Phaser.Signal;
                _this.onExitShop = new Phaser.Signal;
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'shopAtlas', 'main_bg');
                _this.tBack.anchor.set(0.5);
                _this.addChild(_this.tBack);
                _this.tBtnHats = new Phaser.Button(_this.game, -122, -80, 'shopAtlas', _this.SelectHats, _this, 'btn_hats0002', 'btn_hats0001');
                _this.tBtnHats.anchor.set(0.5);
                _this.tBtnHats.scale.set(0.87);
                _this.addChild(_this.tBtnHats);
                _this.tBtnSuits = new Phaser.Button(_this.game, 122, -80, 'shopAtlas', _this.SelectSuits, _this, 'btn_suits0002', 'btn_suits0001');
                _this.tBtnSuits.anchor.set(0.5);
                _this.tBtnSuits.scale.set(0.87);
                _this.addChild(_this.tBtnSuits);
                _this.tBtnWorlds = new Phaser.Button(_this.game, 122, 70, 'shopAtlas', _this.SelectWorlds, _this, 'btn_worlds0002', 'btn_worlds0001');
                _this.tBtnWorlds.anchor.set(0.5);
                _this.tBtnWorlds.scale.set(0.87);
                _this.addChild(_this.tBtnWorlds);
                _this.tBtnCritters = new Phaser.Button(_this.game, -122, 70, 'shopAtlas', _this.SelectCritters, _this, 'btn_critters0002', 'btn_critters0001');
                _this.tBtnCritters.anchor.set(0.5);
                _this.tBtnCritters.scale.set(0.87);
                _this.addChild(_this.tBtnCritters);
                _this.tBtnExit = new Phaser.Button(_this.game, 0, 235, 'shopAtlas', _this.SelectExit, _this, 'btn_exit0002', 'btn_exit0001');
                _this.tBtnExit.anchor.set(0.5);
                _this.tBtnExit.scale.set(0.87);
                _this.addChild(_this.tBtnExit);
                _this.crystalNumber = new Phaser.BitmapText(_this.game, -170, 175, 'myFont', '', 20);
                _this.crystalNumber.text = 'x 0';
                _this.crystalNumber.smoothed = true;
                _this.crystalNumber.anchor.set(0.5);
                _this.addChild(_this.crystalNumber);
                _this.check();
                return _this;
            }
            screenMainShop.prototype.check = function () {
                var dim = Number(uSaveData.getItem('diamond')) || 0;
                this.crystalNumber.text = 'x ' + dim;
            };
            screenMainShop.prototype.SelectExit = function () {
                this.onExitShop.dispatch();
            };
            screenMainShop.prototype.SelectHats = function () {
                this.onHats.dispatch();
            };
            screenMainShop.prototype.SelectSuits = function () {
                this.onSuits.dispatch();
            };
            screenMainShop.prototype.SelectWorlds = function () {
                this.onWorlds.dispatch();
            };
            screenMainShop.prototype.SelectCritters = function () {
                this.onCritters.dispatch();
            };
            screenMainShop.prototype.update = function () {
                var crystl = Number(uSaveData.getItem('numCrystal') || '0');
                this.crystalNumber.text = 'x ' + crystl;
            };
            return screenMainShop;
        }(Phaser.Sprite));
        Client.screenMainShop = screenMainShop;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var screenSkinShop = (function (_super) {
            __extends(screenSkinShop, _super);
            function screenSkinShop(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.btnHats = [];
                _this.onExitShop = new Phaser.Signal;
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'shopAtlas', 'skins_bg');
                _this.tBack.anchor.set(0.5);
                _this.addChild(_this.tBack);
                var num = 0;
                for (var j = 0; j < 2; j++) {
                    for (var i = 0; i < 5; i++) {
                        var hat = new Client.guiBtnShopSkin(_this.game, -140 + 70 * i, -60 + (j * 100), num);
                        hat.scale.set(0.95);
                        hat.CheckBuy();
                        hat.unEquip.add(_this.unEquip, _this);
                        _this.addChild(hat);
                        _this.btnHats.push(hat);
                        num++;
                    }
                }
                _this.tBtnExit = new Phaser.Button(_this.game, 0, 235, 'shopAtlas', _this.Exit, _this, 'btn_back0002', 'btn_back0001');
                _this.tBtnExit.anchor.set(0.5);
                _this.tBtnExit.scale.set(0.87);
                _this.addChild(_this.tBtnExit);
                _this.tBtnUnequip = new Phaser.Button(_this.game, -185, 235, 'shopAtlas', _this.unEquip, _this, 'btn_unequip0002', 'btn_unequip0001');
                _this.tBtnUnequip.anchor.set(0.5);
                _this.tBtnUnequip.scale.set(0.87);
                _this.addChild(_this.tBtnUnequip);
                _this.crystalNumber = new Phaser.BitmapText(_this.game, -170, 175, 'myFont', '', 20);
                _this.crystalNumber.text = 'x 0';
                _this.crystalNumber.smoothed = true;
                _this.crystalNumber.anchor.set(0.5);
                _this.addChild(_this.crystalNumber);
                return _this;
            }
            screenSkinShop.prototype.unEquip = function (eNum) {
                for (var i = 0; i < this.btnHats.length; i++) {
                    if (eNum != this.btnHats[i].numIcon) {
                        this.btnHats[i].fUnEquip();
                    }
                }
            };
            screenSkinShop.prototype.Exit = function () {
                this.onExitShop.dispatch();
            };
            screenSkinShop.prototype.update = function () {
                var crystl = Number(uSaveData.getItem('numCrystal') || '0');
                this.crystalNumber.text = 'x ' + crystl;
            };
            return screenSkinShop;
        }(Phaser.Sprite));
        Client.screenSkinShop = screenSkinShop;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var screenWorldShop = (function (_super) {
            __extends(screenWorldShop, _super);
            function screenWorldShop(game, x, y) {
                var _this = _super.call(this, game, x, y) || this;
                _this.btnHats = [];
                _this.btnTile = [];
                _this.onExitShop = new Phaser.Signal;
                _this.tBack = new Phaser.Sprite(_this.game, 0, 0, 'shopAtlas', 'world_bg');
                _this.tBack.anchor.set(0.5);
                _this.addChild(_this.tBack);
                var num = 0;
                for (var j = 0; j < 3; j++) {
                    for (var i = 0; i < 1; i++) {
                        var hat = new Client.guiBtnShopworld(_this.game, -70 + 70 * i, -115 + (j * 100), num);
                        hat.scale.set(0.95);
                        hat.CheckBuy();
                        hat.unEquip.add(_this.unEquipWorld, _this);
                        _this.addChild(hat);
                        _this.btnHats.push(hat);
                        var tile = new Client.guiBtnShopTile(_this.game, 170 + 70 * i, -115 + (j * 102), num);
                        tile.scale.set(0.95);
                        tile.CheckBuy();
                        tile.unEquip.add(_this.unEquipTile, _this);
                        _this.addChild(tile);
                        _this.btnTile.push(tile);
                        num++;
                    }
                }
                _this.tBtnExit = new Phaser.Button(_this.game, 0, 235, 'shopAtlas', _this.Exit, _this, 'btn_back0002', 'btn_back0001');
                _this.tBtnExit.anchor.set(0.5);
                _this.tBtnExit.scale.set(0.87);
                _this.addChild(_this.tBtnExit);
                _this.tBtnUnequip = new Phaser.Button(_this.game, -185, 235, 'shopAtlas', _this.unEquip, _this, 'btn_unequip0002', 'btn_unequip0001');
                _this.tBtnUnequip.anchor.set(0.5);
                _this.tBtnUnequip.scale.set(0.87);
                _this.addChild(_this.tBtnUnequip);
                _this.crystalNumber = new Phaser.BitmapText(_this.game, -170, 175, 'myFont', '', 20);
                _this.crystalNumber.text = 'x 0';
                _this.crystalNumber.smoothed = true;
                _this.crystalNumber.anchor.set(0.5);
                _this.addChild(_this.crystalNumber);
                return _this;
            }
            screenWorldShop.prototype.unEquip = function (eNum) {
                this.unEquipTile(null);
                this.unEquipWorld(null);
            };
            screenWorldShop.prototype.unEquipWorld = function (eNum) {
                for (var i = 0; i < this.btnHats.length; i++) {
                    if (eNum != this.btnHats[i].numIcon) {
                        this.btnHats[i].fUnEquip();
                    }
                }
            };
            screenWorldShop.prototype.unEquipTile = function (eNum) {
                for (var i = 0; i < this.btnTile.length; i++) {
                    if (eNum != this.btnTile[i].numIcon) {
                        this.btnTile[i].fUnEquip();
                    }
                }
            };
            screenWorldShop.prototype.Exit = function () {
                this.onExitShop.dispatch();
            };
            screenWorldShop.prototype.update = function () {
                var crystl = Number(uSaveData.getItem('numCrystal') || '0');
                this.crystalNumber.text = 'x ' + crystl;
            };
            return screenWorldShop;
        }(Phaser.Sprite));
        Client.screenWorldShop = screenWorldShop;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var MyUtils;
(function (MyUtils) {
    var query_values = null;
    function readQueryValues() {
        var vals = {};
        var query = window.location.search.substring(1);
        var vars = query.split("&");
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split("=");
            if (typeof vals[pair[0]] === "undefined") {
                vals[pair[0]] = decodeURIComponent(pair[1]);
            }
            else if (typeof vals[pair[0]] === "string") {
                var arr = [vals[pair[0]], decodeURIComponent(pair[1])];
                vals[pair[0]] = arr;
            }
            else {
                vals[pair[0]].push(decodeURIComponent(pair[1]));
            }
        }
        query_values = vals;
    }
    function getQueryValue(aValName) {
        if (query_values == null)
            readQueryValues();
        return query_values[aValName];
    }
    MyUtils.getQueryValue = getQueryValue;
})(MyUtils || (MyUtils = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var p2Math = (function () {
            function p2Math() {
            }
            p2Math.AddVV = function (a, b) {
                var v = new Client.p2Vec2(a.x + b.x, a.y + b.y);
                return v;
            };
            p2Math.MulFV = function (s, a) {
                var v = new Client.p2Vec2(s * a.x, s * a.y);
                return v;
            };
            p2Math.Dot = function (a, b) {
                return a.x * b.x + a.y * b.y;
            };
            return p2Math;
        }());
        Client.p2Math = p2Math;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var PhaserGame;
(function (PhaserGame) {
    var Client;
    (function (Client) {
        var p2Vec2 = (function () {
            function p2Vec2(_x, _y) {
                this.x = _x;
                this.y = _y;
            }
            p2Vec2.prototype.Normalize = function () {
                var length = Math.sqrt(this.x * this.x + this.y * this.y);
                if (length < Number.MIN_VALUE) {
                    return 0.0;
                }
                var invLength = 1.0 / length;
                this.x *= invLength;
                this.y *= invLength;
                return length;
            };
            p2Vec2.prototype.NegativeSelf = function () {
                this.x = -this.x;
                this.y = -this.y;
            };
            p2Vec2.prototype.Multiply = function (a) {
                this.x *= a;
                this.y *= a;
            };
            p2Vec2.prototype.Length = function () {
                return Math.sqrt(this.x * this.x + this.y * this.y);
            };
            return p2Vec2;
        }());
        Client.p2Vec2 = p2Vec2;
    })(Client = PhaserGame.Client || (PhaserGame.Client = {}));
})(PhaserGame || (PhaserGame = {}));
var TextUtils;
(function (TextUtils) {
    function addZero(aNum, aLen) {
        var text = String(aNum);
        while (text.length < aLen)
            text = '0' + text;
        return text;
    }
    TextUtils.addZero = addZero;
    function sizingBitmapTextByW(aBmpText, aW, aInc, aDec) {
        if (aBmpText.text == '' || aBmpText.height == 0 || aBmpText.width == 0) {
            LogMng.debug('TextUtils.ts sizingBitmapTextByW(): aBmpText.text == ""');
            LogMng.debug('TextUtils.ts sizingBitmapTextByW(): aBmpText.width = ' + aBmpText.width);
            LogMng.debug('TextUtils.ts sizingBitmapTextByW(): aBmpText.height = ' + aBmpText.height);
            return;
        }
        if (aInc) {
            if (aBmpText.width < aW) {
                while (aBmpText.width < aW) {
                    aBmpText.fontSize++;
                }
            }
        }
        if (aDec) {
            if (aBmpText.width > aW) {
                while (aBmpText.width > aW) {
                    aBmpText.fontSize--;
                }
            }
        }
    }
    TextUtils.sizingBitmapTextByW = sizingBitmapTextByW;
    function sizingBitmapTextByH(aBmpText, aH, aInc, aDec) {
        if (aBmpText.text == '' || aBmpText.height == 0 || aBmpText.width == 0) {
            LogMng.debug('TextUtils.ts sizingBitmapTextByH(): aBmpText.text == ""');
            LogMng.debug('TextUtils.ts sizingBitmapTextByH(): aBmpText.width = ' + aBmpText.width);
            LogMng.debug('TextUtils.ts sizingBitmapTextByH(): aBmpText.height = ' + aBmpText.height);
            return;
        }
        if (aInc) {
            if (aBmpText.height < aH) {
                while (aBmpText.height < aH) {
                    aBmpText.fontSize++;
                }
            }
        }
        if (aDec) {
            if (aBmpText.height > aH) {
                while (aBmpText.height > aH) {
                    aBmpText.fontSize--;
                }
            }
        }
    }
    TextUtils.sizingBitmapTextByH = sizingBitmapTextByH;
})(TextUtils || (TextUtils = {}));
var uMath = (function () {
    function uMath() {
    }
    uMath.toPercent = function (current, total) {
        return (current / total) * 100;
    };
    uMath.fromPercent = function (percent, total) {
        return (percent * total) / 100;
    };
    uMath.random = function (lower, upper) {
        return Math.round(Math.random() * (upper - lower)) + lower;
    };
    uMath.toDegrees = function (radians) {
        return radians * 180 / Math.PI;
    };
    uMath.toRadians = function (degrees) {
        return degrees * Math.PI / 180;
    };
    uMath.distance = function (x1, y1, x2, y2) {
        var dx = x2 - x1;
        var dy = y2 - y1;
        return Math.sqrt(dx * dx + dy * dy);
    };
    uMath.prototype.getVelocity = function (x1, y1, velX, velY) {
    };
    uMath.getAngle = function (x1, y1, x2, y2, norm) {
        if (norm === void 0) { norm = true; }
        var dx = x2 - x1;
        var dy = y2 - y1;
        var angle = Math.atan2(dy, dx);
        if (norm) {
            if (angle < 0) {
                angle = Math.PI * 2 + angle;
            }
            else if (angle >= Math.PI * 2) {
                angle = angle - Math.PI * 2;
            }
        }
        return angle;
    };
    return uMath;
}());
var uSaveData = (function () {
    function uSaveData() {
    }
    uSaveData.Init = function () {
        uSaveData.myLocalData = [];
        uSaveData.myLocalData = Array();
        var JSONString = localStorage.getItem(uSaveData.nameGame);
        if (!JSONString) {
            JSONString = JSON.stringify(uSaveData.myLocalData);
        }
        uSaveData.myLocalData = JSON.parse(JSONString);
    };
    uSaveData.setItem = function (key, data) {
        var keyName = this.nameGame + key;
        var flag = false;
        for (var i = 0; i < this.myLocalData.length; i++) {
            if (!flag) {
                if (this.myLocalData[i].key == keyName) {
                    this.myLocalData[i].data = data;
                    flag = true;
                }
            }
        }
        if (!flag) {
            this.myLocalData[this.myLocalData.length] = new Object();
            this.myLocalData[this.myLocalData.length - 1].key = keyName;
            this.myLocalData[this.myLocalData.length - 1].data = data;
        }
    };
    uSaveData.saveData = function () {
        var JSONString = JSON.stringify(this.myLocalData);
        localStorage.setItem(uSaveData.nameGame, JSONString);
    };
    uSaveData.getItem = function (key) {
        var keyName = this.nameGame + key;
        var index = -1;
        for (var i = 0; i < this.myLocalData.length; i++) {
            if (this.myLocalData[i].key == keyName) {
                index = i;
            }
        }
        if (index >= 0) {
            return this.myLocalData[index].data;
        }
        else {
            return null;
        }
    };
    uSaveData.clearData = function () {
        localStorage.clear();
        this.myLocalData = [];
        this.myLocalData = null;
        this.myLocalData = new Array();
    };
    uSaveData.myLocalData = new Array();
    uSaveData.nameGame = 'FlambosInferno';
    return uSaveData;
}());
var PhaserNineSlice;
(function (PhaserNineSlice) {
    var NineSlice = (function (_super) {
        __extends(NineSlice, _super);
        function NineSlice(game, x, y, key, frame, width, height, data) {
            var _this = _super.call(this, game, x, y, key, frame) || this;
            _this.baseTexture = _this.texture.baseTexture;
            _this.baseFrame = _this.texture.frame;
            if (frame !== null && !data) {
                data = game.cache.getNineSlice(frame);
            }
            else if (!data) {
                data = game.cache.getNineSlice(key);
            }
            if (undefined === data) {
                return _this;
            }
            _this.topSize = data.top;
            if (!data.left) {
                _this.leftSize = _this.topSize;
            }
            else {
                _this.leftSize = data.left;
            }
            if (!data.right) {
                _this.rightSize = _this.leftSize;
            }
            else {
                _this.rightSize = data.right;
            }
            if (!data.bottom) {
                _this.bottomSize = _this.topSize;
            }
            else {
                _this.bottomSize = data.bottom;
            }
            _this.loadTexture(new Phaser.RenderTexture(_this.game, _this.localWidth, _this.localHeight));
            _this.resize(width, height);
            return _this;
        }
        NineSlice.prototype.renderTexture = function () {
            this.texture.resize(this.localWidth, this.localHeight, true);
            var textureXs = [0, this.leftSize, this.baseFrame.width - this.rightSize, this.baseFrame.width];
            var textureYs = [0, this.topSize, this.baseFrame.height - this.bottomSize, this.baseFrame.height];
            var finalXs = [0, this.leftSize, this.localWidth - this.rightSize, this.localWidth];
            var finalYs = [0, this.topSize, this.localHeight - this.bottomSize, this.localHeight];
            for (var yi = 0; yi < 3; yi++) {
                for (var xi = 0; xi < 3; xi++) {
                    var s = this.createTexturePart(textureXs[xi], textureYs[yi], textureXs[xi + 1] - textureXs[xi], textureYs[yi + 1] - textureYs[yi]);
                    s.width = finalXs[xi + 1] - finalXs[xi];
                    s.height = finalYs[yi + 1] - finalYs[yi];
                    this.texture.renderXY(s, finalXs[xi], finalYs[yi]);
                }
            }
        };
        NineSlice.prototype.resize = function (width, height) {
            this.localWidth = width;
            this.localHeight = height;
            this.renderTexture();
        };
        NineSlice.prototype.createTexturePart = function (x, y, width, height) {
            var frame = new PIXI.Rectangle(this.baseFrame.x + this.texture.frame.x + x, this.baseFrame.y + this.texture.frame.y + y, Math.max(width, 1), Math.max(height, 1));
            return new Phaser.Sprite(this.game, 0, 0, new PIXI.Texture(this.baseTexture, frame));
        };
        return NineSlice;
    }(Phaser.Sprite));
    PhaserNineSlice.NineSlice = NineSlice;
})(PhaserNineSlice || (PhaserNineSlice = {}));
var PhaserNineSlice;
(function (PhaserNineSlice) {
    var Plugin = (function (_super) {
        __extends(Plugin, _super);
        function Plugin(game, parent) {
            var _this = _super.call(this, game, parent) || this;
            _this.addNineSliceCache();
            _this.addNineSliceFactory();
            _this.addNineSliceLoader();
            return _this;
        }
        Plugin.prototype.addNineSliceLoader = function () {
            Phaser.Loader.prototype.nineSlice = function (key, url, top, left, right, bottom) {
                var cacheData = {
                    top: top
                };
                if (left) {
                    cacheData.left = left;
                }
                if (right) {
                    cacheData.right = right;
                }
                if (bottom) {
                    cacheData.bottom = bottom;
                }
                this.addToFileList('image', key, url);
                this.game.cache.addNineSlice(key, cacheData);
            };
        };
        Plugin.prototype.addNineSliceFactory = function () {
            Phaser.GameObjectFactory.prototype.nineSlice = function (x, y, key, frame, width, height, group) {
                if (group === undefined) {
                    group = this.world;
                }
                var nineSliceObject = new PhaserNineSlice.NineSlice(this.game, x, y, key, frame, width, height);
                return group.add(nineSliceObject);
            };
            Phaser.GameObjectCreator.prototype.nineSlice = function (x, y, key, frame, width, height) {
                return new PhaserNineSlice.NineSlice(this.game, x, y, key, frame, width, height);
            };
        };
        Plugin.prototype.addNineSliceCache = function () {
            Phaser.Cache.prototype.nineSlice = {};
            Phaser.Cache.prototype.addNineSlice = function (key, data) {
                this.nineSlice[key] = data;
            };
            Phaser.Cache.prototype.getNineSlice = function (key) {
                var data = this.nineSlice[key];
                if (undefined === data) {
                    console.warn('Phaser.Cache.getNineSlice: Key "' + key + '" not found in Cache.');
                }
                return data;
            };
        };
        return Plugin;
    }(Phaser.Plugin));
    PhaserNineSlice.Plugin = Plugin;
})(PhaserNineSlice || (PhaserNineSlice = {}));
//# sourceMappingURL=game.js.map